{
  "address": "0xd458eCA9ed9f383dDcA806E6cF726771Ca1b71E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_optionsPremiumPricer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_step",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DeltaSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStep",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "StepSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        }
      ],
      "name": "getStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newStrikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionsPremiumPricer",
      "outputs": [
        {
          "internalType": "contract IOptionsPremiumPricer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        }
      ],
      "name": "setDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStep",
          "type": "uint256"
        }
      ],
      "name": "setStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "step",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volatilityOracle",
      "outputs": [
        {
          "internalType": "contract IVolatilityOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9007fa49dc28e31329e2dd782d9c78d23290a6e0f7476ae2492b850411c040f",
  "receipt": {
    "to": null,
    "from": "0x46B4E6143Fb6ded2e5FBd87887Ef4f50f716dcA0",
    "contractAddress": "0xd458eCA9ed9f383dDcA806E6cF726771Ca1b71E0",
    "transactionIndex": 0,
    "gasUsed": "815261",
    "logsBloom": "0x
    "blockHash": "0xaff65c98b07ce58fc562a4665604551aad926bda11c67180b818c82db900f942",
    "transactionHash": "0xd9007fa49dc28e31329e2dd782d9c78d23290a6e0f7476ae2492b850411c040f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 57723066,
        "transactionHash": "0xd9007fa49dc28e31329e2dd782d9c78d23290a6e0f7476ae2492b850411c040f",
        "address": "0xd458eCA9ed9f383dDcA806E6cF726771Ca1b71E0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046b4e6143fb6ded2e5fbd87887ef4f50f716dca0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xaff65c98b07ce58fc562a4665604551aad926bda11c67180b818c82db900f942"
      }
    ],
    "blockNumber": 57723066,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Fd58932fcbA2b858e35d8fF6652f75B997F202e",
    1000,
    5
  ],
  "solcInputHash": "786b7f68275717f855f263ec53cebab4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeltaSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StepSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"}],\"name\":\"getStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newStrikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"contract IOptionsPremiumPricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"}],\"name\":\"setStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityOracle\",\"outputs\":[{\"internalType\":\"contract IVolatilityOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"params\":{\"expiryTimestamp\":\"is the unix timestamp of expiration\",\"isPut\":\"is whether option is put or call\"},\"returns\":{\"newDelta\":\"is the delta of the option given its parameters\",\"newStrikePrice\":\"is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDelta(uint256)\":{\"params\":{\"newDelta\":\"is the new delta value\"}},\"setStep(uint256)\":{\"params\":{\"newStep\":\"is the new step value\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"notice\":\"Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put\"},\"optionsPremiumPricer()\":{\"notice\":\"Immutables\"},\"setDelta(uint256)\":{\"notice\":\"Sets new delta value\"},\"setStep(uint256)\":{\"notice\":\"Sets new step value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/DeltaStrikeSelection.sol\":\"DeltaStrikeSelection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IPriceOracle {\\n    function decimals() external view returns (uint256 _decimals);\\n\\n    function latestAnswer() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xabed5bf667e5c972fbfd9b2f06a8169b10dcaf4841bcc91caf937ed3c27eea1f\",\"license\":\"GPL-3.0\"},\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity >0.6.0 <0.8.7;\\n\\ninterface IVolatilityOracle {\\n    function commit(address pool) external;\\n\\n    function twap(address pool) external returns (uint256 price);\\n\\n    function vol(address pool)\\n        external\\n        view\\n        returns (uint256 standardDeviation);\\n\\n    function annualizedVol(address pool)\\n        external\\n        view\\n        returns (uint256 annualStdev);\\n}\\n\",\"keccak256\":\"0xd7fc2a4845ebd140a45795d891a754d6aaaf456e908ca04ef20d32518903c108\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x11e656f1aedf911fb2ef73b7b9ff4386d879e4cecebdc801b208f8b290dfc289\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x462aa30f83c322d3129ded8da0d5f8430425a04c8c2d87787f33d7d5c41c1571\",\"license\":\"MIT\"},\"contracts/utils/DeltaStrikeSelection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {\\n    IPriceOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {\\n    IVolatilityOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ncontract DeltaStrikeSelection is Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Immutables\\n     */\\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\\n\\n    IVolatilityOracle public immutable volatilityOracle;\\n\\n    // delta for options strike price selection. 1 is 10000 (10**4)\\n    uint256 public delta;\\n\\n    // step in absolute terms at which we will increment\\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\\n    uint256 public step;\\n\\n    // multiplier to shift asset prices\\n    uint256 private immutable assetOracleMultiplier;\\n\\n    // Delta are in 4 decimal places. 1 * 10**4 = 1 delta.\\n    uint256 private constant DELTA_MULTIPLIER = 10**4;\\n\\n    // ChainLink's USD Price oracles return results in 8 decimal places\\n    uint256 private constant ORACLE_PRICE_MULTIPLIER = 10**8;\\n\\n    event DeltaSet(uint256 oldDelta, uint256 newDelta, address indexed owner);\\n    event StepSet(uint256 oldStep, uint256 newStep, address indexed owner);\\n\\n    constructor(\\n        address _optionsPremiumPricer,\\n        uint256 _delta,\\n        uint256 _step\\n    ) {\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_delta > 0, \\\"!_delta\\\");\\n        require(_delta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        require(_step > 0, \\\"!_step\\\");\\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\\n        volatilityOracle = IVolatilityOracle(\\n            IOptionsPremiumPricer(_optionsPremiumPricer).volatilityOracle()\\n        );\\n        // ex: delta = 7500 (.75)\\n        delta = _delta;\\n        uint256 _assetOracleMultiplier =\\n            10 **\\n                IPriceOracle(\\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\\n                )\\n                    .decimals();\\n\\n        // ex: step = 1000\\n        step = _step.mul(_assetOracleMultiplier);\\n\\n        assetOracleMultiplier = _assetOracleMultiplier;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price satisfying the delta value\\n     * given the expiry timestamp and whether option is call or put\\n     * @param expiryTimestamp is the unix timestamp of expiration\\n     * @param isPut is whether option is put or call\\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\\n     * @return newDelta is the delta of the option given its parameters\\n     */\\n\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256 newStrikePrice, uint256 newDelta)\\n    {\\n        require(\\n            expiryTimestamp > block.timestamp,\\n            \\\"Expiry must be in the future!\\\"\\n        );\\n\\n        // asset price\\n        uint256 assetPrice = optionsPremiumPricer.getUnderlyingPrice();\\n\\n        // asset's annualized volatility\\n        uint256 annualizedVol =\\n            volatilityOracle.annualizedVol(optionsPremiumPricer.pool()).mul(\\n                10**10\\n            );\\n\\n        // For each asset prices with step of 'step' (down if put, up if call)\\n        //   if asset's getOptionDelta(currStrikePrice, spotPrice, annualizedVol, t) == (isPut ? 1 - delta:delta)\\n        //   with certain margin of error\\n        //        return strike price\\n\\n        uint256 strike =\\n            isPut\\n                ? assetPrice.sub(assetPrice % step).sub(step)\\n                : assetPrice.add(step - (assetPrice % step)).add(step);\\n        uint256 targetDelta = isPut ? DELTA_MULTIPLIER.sub(delta) : delta;\\n        uint256 prevDelta = DELTA_MULTIPLIER;\\n\\n        while (true) {\\n            uint256 currDelta =\\n                optionsPremiumPricer.getOptionDelta(\\n                    assetPrice.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    strike,\\n                    annualizedVol,\\n                    expiryTimestamp\\n                );\\n            //  If the current delta is between the previous\\n            //  strike price delta and current strike price delta\\n            //  then we are done\\n            bool foundTargetStrikePrice =\\n                isPut\\n                    ? targetDelta >= prevDelta && targetDelta <= currDelta\\n                    : targetDelta <= prevDelta && targetDelta >= currDelta;\\n\\n            if (foundTargetStrikePrice) {\\n                uint256 finalDelta =\\n                    _getBestDelta(prevDelta, currDelta, targetDelta, isPut);\\n                uint256 finalStrike =\\n                    _getBestStrike(finalDelta, prevDelta, strike, isPut);\\n                require(\\n                    isPut\\n                        ? finalStrike <= assetPrice\\n                        : finalStrike >= assetPrice,\\n                    \\\"Invalid strike price\\\"\\n                );\\n                // make decimals consistent with oToken strike price decimals (10 ** 8)\\n                return (\\n                    finalStrike.mul(ORACLE_PRICE_MULTIPLIER).div(\\n                        assetOracleMultiplier\\n                    ),\\n                    finalDelta\\n                );\\n            }\\n\\n            strike = isPut ? strike.sub(step) : strike.add(step);\\n\\n            prevDelta = currDelta;\\n        }\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param prevDelta is the delta of the previous strike price\\n     * @param currDelta is delta of the current strike price\\n     * @param targetDelta is the delta we are targeting\\n     * @param isPut is whether its a put\\n     * @return the best delta value\\n     */\\n    function _getBestDelta(\\n        uint256 prevDelta,\\n        uint256 currDelta,\\n        uint256 targetDelta,\\n        bool isPut\\n    ) private pure returns (uint256) {\\n        uint256 finalDelta;\\n\\n        // for tie breaks (ex: 0.05 <= 0.1 <= 0.15) round to higher strike price\\n        // for calls and lower strike price for puts for deltas\\n        if (isPut) {\\n            uint256 upperBoundDiff = currDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(prevDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? prevDelta\\n                : currDelta;\\n        } else {\\n            uint256 upperBoundDiff = prevDelta.sub(targetDelta);\\n            uint256 lowerBoundDiff = targetDelta.sub(currDelta);\\n            finalDelta = lowerBoundDiff <= upperBoundDiff\\n                ? currDelta\\n                : prevDelta;\\n        }\\n\\n        return finalDelta;\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param finalDelta is the best delta value we found\\n     * @param prevDelta is delta of the previous strike price\\n     * @param strike is the strike of the previous iteration\\n     * @param isPut is whether its a put\\n     * @return the best strike\\n     */\\n    function _getBestStrike(\\n        uint256 finalDelta,\\n        uint256 prevDelta,\\n        uint256 strike,\\n        bool isPut\\n    ) private view returns (uint256) {\\n        if (finalDelta != prevDelta) {\\n            return strike;\\n        }\\n        return isPut ? strike.add(step) : strike.sub(step);\\n    }\\n\\n    /**\\n     * @notice Sets new delta value\\n     * @param newDelta is the new delta value\\n     */\\n    function setDelta(uint256 newDelta) external onlyOwner {\\n        require(newDelta > 0, \\\"!newDelta\\\");\\n        require(newDelta <= DELTA_MULTIPLIER, \\\"newDelta cannot be more than 1\\\");\\n        uint256 oldDelta = delta;\\n        delta = newDelta;\\n        emit DeltaSet(oldDelta, newDelta, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets new step value\\n     * @param newStep is the new step value\\n     */\\n    function setStep(uint256 newStep) external onlyOwner {\\n        require(newStep > 0, \\\"!newStep\\\");\\n        uint256 oldStep = step;\\n        step = newStep.mul(assetOracleMultiplier);\\n        emit StepSet(oldStep, newStep, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x8812f1be9efdf7d2f908e82a6e80054117a5a61c8dc343acaa011fe356e59433\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620011db380380620011db8339810160408190526200003491620003e0565b6200003f336200033f565b6001600160a01b0383166200009b5760405162461bcd60e51b815260206004820152601660248201527f215f6f7074696f6e735072656d69756d5072696365720000000000000000000060448201526064015b60405180910390fd5b60008211620000d75760405162461bcd60e51b8152602060048201526007602482015266215f64656c746160c81b604482015260640162000092565b6127108211156200012b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e20310000604482015260640162000092565b60008111620001665760405162461bcd60e51b81526020600482015260066024820152650215f737465760d41b604482015260640162000092565b826001600160a01b03166080816001600160a01b031660601b81525050826001600160a01b03166355b13a4f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001bd57600080fd5b505afa158015620001d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f89190620003c3565b6001600160a01b031660a0816001600160a01b031660601b81525050816001819055506000836001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025757600080fd5b505afa1580156200026c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002929190620003c3565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002cb57600080fd5b505afa158015620002e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000306919062000417565b6200031390600a62000479565b90506200032f81836200038f60201b6200091b1790919060201c565b60025560c052506200056d915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006200039d828462000535565b90505b92915050565b80516001600160a01b0381168114620003be57600080fd5b919050565b600060208284031215620003d5578081fd5b6200039d82620003a6565b600080600060608486031215620003f5578182fd5b6200040084620003a6565b925060208401519150604084015190509250925092565b60006020828403121562000429578081fd5b5051919050565b600181815b808511156200047157816000190482111562000455576200045562000557565b808516156200046357918102915b93841c939080029062000435565b509250929050565b60006200039d83836000826200049257506001620003a0565b81620004a157506000620003a0565b8160018114620004ba5760028114620004c557620004e5565b6001915050620003a0565b60ff841115620004d957620004d962000557565b50506001821b620003a0565b5060208310610133831016604e8410600b84101617156200050a575081810a620003a0565b62000516838362000430565b80600019048211156200052d576200052d62000557565b029392505050565b600081600019048311821515161562000552576200055262000557565b500290565b634e487b7160e01b600052601160045260246000fd5b60805160601c60a05160601c60c051610c0f620005cc600039600081816105d20152818161073a01526108bc01526000818160d901526103dd0152600081816101310152818161033f0152818161040c01526105a80152610c0f6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa662641461012c578063e25fe17514610153578063e436b8911461015c578063f2fde38b14610184578063f8dcbddb1461019757600080fd5b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d4578063715018a6146101135780638da5cb5b1461011b575b600080fd5b6100b66100b1366004610a8a565b6101aa565b005b6100c160015481565b6040519081526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6100b66102b3565b6000546001600160a01b03166100fb565b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6100c160025481565b61016f61016a366004610aba565b6102e9565b604080519283526020830191909152016100cb565b6100b6610192366004610a52565b6107b3565b6100b66101a5366004610a8a565b61084e565b6000546001600160a01b031633146101dd5760405162461bcd60e51b81526004016101d490610aed565b60405180910390fd5b600081116102195760405162461bcd60e51b8152602060048201526009602482015268216e657744656c746160b81b60448201526064016101d4565b61271081111561026b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e2031000060448201526064016101d4565b6001805490829055604080518281526020810184905233917f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d91015b60405180910390a25050565b6000546001600160a01b031633146102dd5760405162461bcd60e51b81526004016101d490610aed565b6102e7600061092e565b565b60008042841161033b5760405162461bcd60e51b815260206004820152601d60248201527f457870697279206d75737420626520696e20746865206675747572652100000060448201526064016101d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610aa2565b905060006105186402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610aa2565b9061091b565b90506000856105545760025461054f906105496105358287610b84565b6002546105429190610b6d565b869061097e565b9061097e565b610575565b6002546105759061056f6105688287610b84565b869061098a565b9061098a565b905060008661058657600154610596565b600154610596906127109061098a565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6106057f00000000000000000000000000000000000000000000000000000000000000006105ff8a6305f5e10061091b565b90610996565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101889052606481018d905260840160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610aa2565b90506000896106a7578284111580156106a25750818410155b6106b7565b8284101580156106b75750818411155b9050801561077a5760006106cd8484878e6109a2565b905060006106dd8286898f610a1c565b90508b6106ed57888110156106f2565b888111155b6107355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420737472696b6520707269636560601b60448201526064016101d4565b6107677f00000000000000000000000000000000000000000000000000000000000000006105ff836305f5e10061091b565b829a509a505050505050505050506107ac565b896107925760025461078d90869061097e565b6107a0565b6002546107a090869061098a565b9450819250505061059c565b9250929050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101d490610aed565b6001600160a01b0381166108425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d4565b61084b8161092e565b50565b6000546001600160a01b031633146108785760405162461bcd60e51b81526004016101d490610aed565b600081116108b35760405162461bcd60e51b81526020600482015260086024820152670216e6577537465760c41b60448201526064016101d4565b6002546108e0827f000000000000000000000000000000000000000000000000000000000000000061091b565b600255604080518281526020810184905233917f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c91016102a7565b60006109278284610b4e565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109278284610b22565b60006109278284610b6d565b60006109278284610b3a565b60008082156109e05760006109b7868661098a565b905060006109c5868961098a565b9050818111156109d557866109d7565b875b92505050610a11565b60006109ec878661098a565b905060006109fa868861098a565b905081811115610a0a5787610a0c565b865b925050505b90505b949350505050565b6000838514610a2c575081610a14565b81610a4457600254610a3f90849061098a565b610a11565b600254610a1190849061097e565b600060208284031215610a63578081fd5b813561092781610bc4565b600060208284031215610a7f578081fd5b815161092781610bc4565b600060208284031215610a9b578081fd5b5035919050565b600060208284031215610ab3578081fd5b5051919050565b60008060408385031215610acc578081fd5b8235915060208301358015158114610ae2578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b3557610b35610b98565b500190565b600082610b4957610b49610bae565b500490565b6000816000190483118215151615610b6857610b68610b98565b500290565b600082821015610b7f57610b7f610b98565b500390565b600082610b9357610b93610bae565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461084b57600080fdfea26469706673582212201443c82f5078287ff9257c6b77c34a9b44efe298e74847dae4ddd6e44afe63e064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa662641461012c578063e25fe17514610153578063e436b8911461015c578063f2fde38b14610184578063f8dcbddb1461019757600080fd5b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d4578063715018a6146101135780638da5cb5b1461011b575b600080fd5b6100b66100b1366004610a8a565b6101aa565b005b6100c160015481565b6040519081526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6100b66102b3565b6000546001600160a01b03166100fb565b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b6100c160025481565b61016f61016a366004610aba565b6102e9565b604080519283526020830191909152016100cb565b6100b6610192366004610a52565b6107b3565b6100b66101a5366004610a8a565b61084e565b6000546001600160a01b031633146101dd5760405162461bcd60e51b81526004016101d490610aed565b60405180910390fd5b600081116102195760405162461bcd60e51b8152602060048201526009602482015268216e657744656c746160b81b60448201526064016101d4565b61271081111561026b5760405162461bcd60e51b815260206004820152601e60248201527f6e657744656c74612063616e6e6f74206265206d6f7265207468616e2031000060448201526064016101d4565b6001805490829055604080518281526020810184905233917f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d91015b60405180910390a25050565b6000546001600160a01b031633146102dd5760405162461bcd60e51b81526004016101d490610aed565b6102e7600061092e565b565b60008042841161033b5760405162461bcd60e51b815260206004820152601d60248201527f457870697279206d75737420626520696e20746865206675747572652100000060448201526064016101d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce9190610aa2565b905060006105186402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190610a6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156104da57600080fd5b505afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610aa2565b9061091b565b90506000856105545760025461054f906105496105358287610b84565b6002546105429190610b6d565b869061097e565b9061097e565b610575565b6002546105759061056f6105688287610b84565b869061098a565b9061098a565b905060008661058657600154610596565b600154610596906127109061098a565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6106057f00000000000000000000000000000000000000000000000000000000000000006105ff8a6305f5e10061091b565b90610996565b6040516001600160e01b031960e084901b16815260048101919091526024810187905260448101889052606481018d905260840160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610aa2565b90506000896106a7578284111580156106a25750818410155b6106b7565b8284101580156106b75750818411155b9050801561077a5760006106cd8484878e6109a2565b905060006106dd8286898f610a1c565b90508b6106ed57888110156106f2565b888111155b6107355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420737472696b6520707269636560601b60448201526064016101d4565b6107677f00000000000000000000000000000000000000000000000000000000000000006105ff836305f5e10061091b565b829a509a505050505050505050506107ac565b896107925760025461078d90869061097e565b6107a0565b6002546107a090869061098a565b9450819250505061059c565b9250929050565b6000546001600160a01b031633146107dd5760405162461bcd60e51b81526004016101d490610aed565b6001600160a01b0381166108425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d4565b61084b8161092e565b50565b6000546001600160a01b031633146108785760405162461bcd60e51b81526004016101d490610aed565b600081116108b35760405162461bcd60e51b81526020600482015260086024820152670216e6577537465760c41b60448201526064016101d4565b6002546108e0827f000000000000000000000000000000000000000000000000000000000000000061091b565b600255604080518281526020810184905233917f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c91016102a7565b60006109278284610b4e565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109278284610b22565b60006109278284610b6d565b60006109278284610b3a565b60008082156109e05760006109b7868661098a565b905060006109c5868961098a565b9050818111156109d557866109d7565b875b92505050610a11565b60006109ec878661098a565b905060006109fa868861098a565b905081811115610a0a5787610a0c565b865b925050505b90505b949350505050565b6000838514610a2c575081610a14565b81610a4457600254610a3f90849061098a565b610a11565b600254610a1190849061097e565b600060208284031215610a63578081fd5b813561092781610bc4565b600060208284031215610a7f578081fd5b815161092781610bc4565b600060208284031215610a9b578081fd5b5035919050565b600060208284031215610ab3578081fd5b5051919050565b60008060408385031215610acc578081fd5b8235915060208301358015158114610ae2578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b3557610b35610b98565b500190565b600082610b4957610b49610bae565b500490565b6000816000190483118215151615610b6857610b68610b98565b500290565b600082821015610b7f57610b7f610b98565b500390565b600082610b9357610b93610bae565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461084b57600080fdfea26469706673582212201443c82f5078287ff9257c6b77c34a9b44efe298e74847dae4ddd6e44afe63e064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStrikePrice(uint256,bool)": {
        "params": {
          "expiryTimestamp": "is the unix timestamp of expiration",
          "isPut": "is whether option is put or call"
        },
        "returns": {
          "newDelta": "is the delta of the option given its parameters",
          "newStrikePrice": "is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDelta(uint256)": {
        "params": {
          "newDelta": "is the new delta value"
        }
      },
      "setStep(uint256)": {
        "params": {
          "newStep": "is the new step value"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStrikePrice(uint256,bool)": {
        "notice": "Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put"
      },
      "optionsPremiumPricer()": {
        "notice": "Immutables"
      },
      "setDelta(uint256)": {
        "notice": "Sets new delta value"
      },
      "setStep(uint256)": {
        "notice": "Sets new step value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 956,
        "contract": "contracts/utils/DeltaStrikeSelection.sol:DeltaStrikeSelection",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11250,
        "contract": "contracts/utils/DeltaStrikeSelection.sol:DeltaStrikeSelection",
        "label": "delta",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11252,
        "contract": "contracts/utils/DeltaStrikeSelection.sol:DeltaStrikeSelection",
        "label": "step",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}