{
  "address": "0xa64AC9904eb0497f4F0c7D2d222909f189e0DAA6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "getStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "setStrikePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x170165e60537f6c161b99df3deedbeec6c40559abef3a20bd17bc19cadc1d4ab",
  "receipt": {
    "to": null,
    "from": "0xF8368119Bb1073Cf01B841848725d81b542A4c19",
    "contractAddress": "0xa64AC9904eb0497f4F0c7D2d222909f189e0DAA6",
    "transactionIndex": 1,
    "gasUsed": "1964462",
    "logsBloom": "0x
    "blockHash": "0x1d0e90916dc22e3729ab52d89e31611d799bed0248abea16fab9d9fbd5b0f6b2",
    "transactionHash": "0x170165e60537f6c161b99df3deedbeec6c40559abef3a20bd17bc19cadc1d4ab",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 104125648,
        "transactionHash": "0x170165e60537f6c161b99df3deedbeec6c40559abef3a20bd17bc19cadc1d4ab",
        "address": "0xa64AC9904eb0497f4F0c7D2d222909f189e0DAA6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8368119bb1073cf01b841848725d81b542a4c19"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1d0e90916dc22e3729ab52d89e31611d799bed0248abea16fab9d9fbd5b0f6b2"
      }
    ],
    "blockNumber": 104125648,
    "cumulativeGasUsed": "1964462",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "359918aea28ed0b1630a4791007d4f0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"}],\"name\":\"setStrikePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"returns\":{\"_0\":\"newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\",\"_1\":\"newDelta is the delta of the option given its parameters\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setStrikePrice(uint256)\":{\"params\":{\"_strikePrice\":\"is the strike price of the option\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"delta\":{\"details\":\"Delta for options strike price selection. 1 is 10000 (10**4)\"},\"strikePrice\":{\"details\":\"Selected strike price\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"notice\":\"Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put\"},\"setStrikePrice(uint256)\":{\"notice\":\"Sets the strike price, only callable by the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/ManualStrikeSelection.sol\":\"ManualStrikeSelection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/utils/ManualStrikeSelection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ManualStrikeSelection is Ownable {\\n    /// @dev Selected strike price\\n    uint256 public strikePrice;\\n\\n    /// @dev Delta for options strike price selection. 1 is 10000 (10**4)\\n    uint256 public constant delta = 1000;\\n\\n    /**\\n     * @notice Sets the strike price, only callable by the owner\\n     * @param _strikePrice is the strike price of the option\\n     */\\n    function setStrikePrice(uint256 _strikePrice) external onlyOwner {\\n        strikePrice = _strikePrice;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price satisfying the delta value\\n     * given the expiry timestamp and whether option is call or put\\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\\n     * @return newDelta is the delta of the option given its parameters\\n     */\\n    function getStrikePrice(uint256, bool)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (strikePrice, delta);\\n    }\\n}\\n\",\"keccak256\":\"0x82facd05e9db1f08373157e8dee55b7c476d3966a56283affe2198fe4f99c6c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61035e8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c52987cf1161005b578063c52987cf146100c3578063e436b891146100cc578063e488cd9f146100fb578063f2fde38b1461010e57600080fd5b806312b495a814610082578063715018a61461009e5780638da5cb5b146100a8575b600080fd5b61008b6103e881565b6040519081526020015b60405180910390f35b6100a6610121565b005b6000546040516001600160a01b039091168152602001610095565b61008b60015481565b6100e66100da3660046102c0565b5050600154906103e890565b60408051928352602083019190915201610095565b6100a66101093660046102a8565b610160565b6100a661011c36600461027a565b61018f565b6000546001600160a01b031633146101545760405162461bcd60e51b815260040161014b906102f3565b60405180910390fd5b61015e600061022a565b565b6000546001600160a01b0316331461018a5760405162461bcd60e51b815260040161014b906102f3565b600155565b6000546001600160a01b031633146101b95760405162461bcd60e51b815260040161014b906102f3565b6001600160a01b03811661021e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014b565b6102278161022a565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561028b578081fd5b81356001600160a01b03811681146102a1578182fd5b9392505050565b6000602082840312156102b9578081fd5b5035919050565b600080604083850312156102d2578081fd5b82359150602083013580151581146102e8578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220a2411314f1e20102c709267359157f0079f94586fda5aceb5084ad78616a3d2764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c52987cf1161005b578063c52987cf146100c3578063e436b891146100cc578063e488cd9f146100fb578063f2fde38b1461010e57600080fd5b806312b495a814610082578063715018a61461009e5780638da5cb5b146100a8575b600080fd5b61008b6103e881565b6040519081526020015b60405180910390f35b6100a6610121565b005b6000546040516001600160a01b039091168152602001610095565b61008b60015481565b6100e66100da3660046102c0565b5050600154906103e890565b60408051928352602083019190915201610095565b6100a66101093660046102a8565b610160565b6100a661011c36600461027a565b61018f565b6000546001600160a01b031633146101545760405162461bcd60e51b815260040161014b906102f3565b60405180910390fd5b61015e600061022a565b565b6000546001600160a01b0316331461018a5760405162461bcd60e51b815260040161014b906102f3565b600155565b6000546001600160a01b031633146101b95760405162461bcd60e51b815260040161014b906102f3565b6001600160a01b03811661021e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014b565b6102278161022a565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561028b578081fd5b81356001600160a01b03811681146102a1578182fd5b9392505050565b6000602082840312156102b9578081fd5b5035919050565b600080604083850312156102d2578081fd5b82359150602083013580151581146102e8578182fd5b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220a2411314f1e20102c709267359157f0079f94586fda5aceb5084ad78616a3d2764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStrikePrice(uint256,bool)": {
        "returns": {
          "_0": "newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)",
          "_1": "newDelta is the delta of the option given its parameters"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setStrikePrice(uint256)": {
        "params": {
          "_strikePrice": "is the strike price of the option"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "delta": {
        "details": "Delta for options strike price selection. 1 is 10000 (10**4)"
      },
      "strikePrice": {
        "details": "Selected strike price"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStrikePrice(uint256,bool)": {
        "notice": "Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put"
      },
      "setStrikePrice(uint256)": {
        "notice": "Sets the strike price, only callable by the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1002,
        "contract": "contracts/utils/ManualStrikeSelection.sol:ManualStrikeSelection",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17903,
        "contract": "contracts/utils/ManualStrikeSelection.sol:ManualStrikeSelection",
        "label": "strikePrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}