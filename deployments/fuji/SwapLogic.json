{
  "address": "0x1DD78D76a6414A5FdfE15FD97987e161Cc18463e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signerWallet",
          "type": "address"
        }
      ],
      "name": "Authorize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signerWallet",
          "type": "address"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSize",
          "type": "uint256"
        }
      ],
      "name": "NewOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signerWallet",
          "type": "address"
        }
      ],
      "name": "Revoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "name": "SettleOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signerWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "signerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BID_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "name": "averagePriceForOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "swapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signerWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ISwap.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "check",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "minPrice",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "minBidSize",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "totalSize",
          "type": "uint128"
        }
      ],
      "name": "createOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_domainVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "nonceUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offersCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "swapId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signerWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ISwap.Bid[]",
          "name": "bids",
          "type": "tuple[]"
        }
      ],
      "name": "settleOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapOffers",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "minPrice",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "minBidSize",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "totalSize",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "availableSize",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "totalSales",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5041faf862fdb37a109de7d2569164e5dc2c61578a2f226077765db4afd2623",
  "receipt": {
    "to": null,
    "from": "0x422f7Bb366608723c8fe61Ac6D923023dCCBC3d7",
    "contractAddress": "0x1DD78D76a6414A5FdfE15FD97987e161Cc18463e",
    "transactionIndex": 0,
    "gasUsed": "2511198",
    "logsBloom": "0x
    "blockHash": "0x149766813f2111baa67a3e9f5941617ef4867abe14d6858f10952048a5ccb2bf",
    "transactionHash": "0xf5041faf862fdb37a109de7d2569164e5dc2c61578a2f226077765db4afd2623",
    "logs": [],
    "blockNumber": 11519202,
    "cumulativeGasUsed": "2511198",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7c5737198e0350df334dd243d1d73ef5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"}],\"name\":\"Authorize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSize\",\"type\":\"uint256\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"SettleOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BID_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"averagePriceForOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISwap.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minBidSize\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"totalSize\",\"type\":\"uint128\"}],\"name\":\"createOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_domainVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"nonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offersCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISwap.Bid[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"name\":\"settleOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapOffers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"minBidSize\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"totalSize\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"availableSize\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorize(address)\":{\"details\":\"Emits an Authorize event\",\"params\":{\"signer\":\"address Wallet of the signer to authorize\"}},\"averagePriceForOffer(uint256)\":{\"params\":{\"swapId\":\"unique identifier of the swap offer\"}},\"cancelNonce(uint256[])\":{\"details\":\"Cancelled nonces are marked as usedEmits a Cancel eventOut of gas may occur in arrays of length > 400\",\"params\":{\"nonces\":\"uint256[] List of nonces to cancel\"}},\"check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))\":{\"params\":{\"bid\":\"Bid struct containing bid details\"},\"returns\":{\"_0\":\"tuple of error count and bytes32[] memory array of error messages\"}},\"createOffer(address,address,uint96,uint96,uint128)\":{\"params\":{\"biddingToken\":\"token asked by seller\",\"minBidSize\":\"minimum amount of oToken requested in a single bid\",\"minPrice\":\"minimum price of oToken denominated in biddingToken\",\"oToken\":\"token offered by seller\",\"totalSize\":\"amount of oToken offered by seller\"}},\"nonceUsed(address,uint256)\":{\"params\":{\"nonce\":\"uint256 Nonce being checked\",\"signer\":\"address Address of the signer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke()\":{\"details\":\"Emits a Revoke event\"},\"setFee(address,uint256)\":{\"params\":{\"fee\":\"is the fee in percent in 2 decimals\",\"referrer\":\"is the address of the referrer\"}},\"settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])\":{\"params\":{\"bids\":\"bids for swaps\",\"swapId\":\"unique identifier of the swap offer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authorize(address)\":{\"notice\":\"Authorize a signer\"},\"averagePriceForOffer(uint256)\":{\"notice\":\"Returns the average settlement price for a swap offer\"},\"cancelNonce(uint256[])\":{\"notice\":\"Cancel one or more nonces\"},\"check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))\":{\"notice\":\"Validates Swap bid for any potential errors\"},\"createOffer(address,address,uint96,uint96,uint128)\":{\"notice\":\"Create a new offer available for swap\"},\"nonceUsed(address,uint256)\":{\"notice\":\"Returns true if the nonce has been used\"},\"revoke()\":{\"notice\":\"Revoke the signer\"},\"setFee(address,uint256)\":{\"notice\":\"Sets the referral fee for a specific referrer\"},\"settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])\":{\"notice\":\"Settles the swap offering by iterating through the bids\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Swap.sol\":\"Swap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\ninterface ISwap {\\n    struct Offer {\\n        // 32 byte slot 1, partial fill\\n        // Seller wallet address\\n        address seller;\\n        // 32 byte slot 2\\n        // Addess of oToken\\n        address oToken;\\n        // Price per oToken denominated in biddingToken\\n        uint96 minPrice;\\n        // 32 byte slot 3\\n        // ERC20 Token to bid for oToken\\n        address biddingToken;\\n        // Minimum oToken amount acceptable for a single bid\\n        uint96 minBidSize;\\n        // 32 byte slot 4\\n        // Total available oToken amount\\n        uint128 totalSize;\\n        // Remaining available oToken amount\\n        // This figure is updated after each successfull swap\\n        uint128 availableSize;\\n        // 32 byte slot 5\\n        // Amount of biddingToken received\\n        // This figure is updated after each successfull swap\\n        uint256 totalSales;\\n    }\\n\\n    struct Bid {\\n        // ID assigned to offers\\n        uint256 swapId;\\n        // Number only used once for each wallet\\n        uint256 nonce;\\n        // Signer wallet address\\n        address signerWallet;\\n        // Amount of biddingToken offered by signer\\n        uint256 sellAmount;\\n        // Amount of oToken requested by signer\\n        uint256 buyAmount;\\n        // Referrer wallet address\\n        address referrer;\\n        // Signature recovery id\\n        uint8 v;\\n        // r portion of the ECSDA signature\\n        bytes32 r;\\n        // s portion of the ECSDA signature\\n        bytes32 s;\\n    }\\n\\n    struct OfferDetails {\\n        // Seller wallet address\\n        address seller;\\n        // Addess of oToken\\n        address oToken;\\n        // Price per oToken denominated in biddingToken\\n        uint256 minPrice;\\n        // ERC20 Token to bid for oToken\\n        address biddingToken;\\n        // Minimum oToken amount acceptable for a single bid\\n        uint256 minBidSize;\\n    }\\n\\n    event Swap(\\n        uint256 indexed swapId,\\n        uint256 nonce,\\n        address indexed signerWallet,\\n        uint256 signerAmount,\\n        uint256 sellerAmount,\\n        address referrer,\\n        uint256 feeAmount\\n    );\\n\\n    event NewOffer(\\n        uint256 swapId,\\n        address seller,\\n        address oToken,\\n        address biddingToken,\\n        uint256 minPrice,\\n        uint256 minBidSize,\\n        uint256 totalSize\\n    );\\n\\n    event SetFee(address referrer, uint256 fee);\\n\\n    event SettleOffer(uint256 swapId);\\n\\n    event Cancel(uint256 indexed nonce, address indexed signerWallet);\\n\\n    event Authorize(address indexed signer, address indexed signerWallet);\\n\\n    event Revoke(address indexed signer, address indexed signerWallet);\\n\\n    function createOffer(\\n        address oToken,\\n        address biddingToken,\\n        uint96 minPrice,\\n        uint96 minBidSize,\\n        uint128 totalSize\\n    ) external returns (uint256 swapId);\\n\\n    function settleOffer(uint256 swapId, Bid[] calldata bids) external;\\n\\n    function cancelNonce(uint256[] calldata nonces) external;\\n\\n    function check(Bid calldata bid)\\n        external\\n        view\\n        returns (uint256, bytes32[] memory);\\n\\n    function averagePriceForOffer(uint256 swapId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function authorize(address sender) external;\\n\\n    function revoke() external;\\n\\n    function nonceUsed(address, uint256) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa4ad88a7fe546378a9603df8d75da4122fec56ec04c78e7d2161c6f0f153a56b\",\"license\":\"MIT\"},\"contracts/storage/SwapStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport \\\"../interfaces/ISwap.sol\\\";\\n\\nabstract contract SwapStorageV1 {\\n    // Keccak256 of domain name for signature verification\\n    bytes32 public DOMAIN_NAME;\\n    // Keccak256 of domain version for signature verification\\n    bytes32 public DOMAIN_VERSION;\\n    // Keccak256 of abi-encoded domain parameters for signature verification\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    // Counter to keep track number of offers\\n    uint256 public offersCounter;\\n    // Mapping of swap offer details for a given swapId\\n    mapping(uint256 => ISwap.Offer) public swapOffers;\\n    // Mapping of referral fees for a given address\\n    mapping(address => uint256) public referralFees;\\n    // Mapping of authorized delegate for a given address\\n    mapping(address => address) public authorized;\\n    /**\\n     * @notice Double mapping of signers to nonce groups to nonce states\\n     * @dev The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same key\\n     * @dev The nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\\n     */\\n    mapping(address => mapping(uint256 => uint256)) internal _nonceGroups;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of SwapStorage\\n// e.g. SwapStorage<versionNumber>, so finally it would look like\\n// contract SwapStorage is SwapStorageV1, SwapStorageV2\\nabstract contract SwapStorage is SwapStorageV1 {\\n\\n}\\n\",\"keccak256\":\"0x68e4d8abd35f4872fa36be73d3b7365125909465400730eee139d3caab56d0ee\",\"license\":\"MIT\"},\"contracts/utils/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/airswap/airswap-protocols/blob/main/source/swap/contracts/Swap.sol\\n\\npragma solidity =0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../storage/SwapStorage.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\n\\ncontract Swap is\\n    ISwap,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    SwapStorage\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable DOMAIN_CHAIN_ID;\\n\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            abi.encodePacked(\\n                \\\"EIP712Domain(\\\",\\n                \\\"string name,\\\",\\n                \\\"string version,\\\",\\n                \\\"uint256 chainId,\\\",\\n                \\\"address verifyingContract\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n    bytes32 public constant BID_TYPEHASH =\\n        keccak256(\\n            abi.encodePacked(\\n                \\\"Bid(\\\",\\n                \\\"uint256 swapId,\\\",\\n                \\\"uint256 nonce,\\\",\\n                \\\"address signerWallet,\\\",\\n                \\\"uint256 sellAmount,\\\",\\n                \\\"uint256 buyAmount,\\\",\\n                \\\"address referrer\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n    uint256 internal constant MAX_PERCENTAGE = 10000;\\n    uint256 internal constant MAX_FEE = 1000;\\n    uint256 internal constant MAX_ERROR_COUNT = 10;\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    /************************************************\\n     *  CONSTRUCTOR\\n     ***********************************************/\\n\\n    constructor() {\\n        uint256 currentChainId = getChainId();\\n        DOMAIN_CHAIN_ID = currentChainId;\\n    }\\n\\n    /************************************************\\n     *  INITIALIZATION\\n     ***********************************************/\\n\\n    function initialize(\\n        string memory _domainName,\\n        string memory _domainVersion,\\n        address _owner\\n    ) external initializer {\\n        require(bytes(_domainName).length > 0, \\\"!_domainName\\\");\\n        require(bytes(_domainVersion).length > 0, \\\"!_domainVersion\\\");\\n        require(_owner != address(0), \\\"!_owner\\\");\\n\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        DOMAIN_NAME = keccak256(bytes(_domainName));\\n        DOMAIN_VERSION = keccak256(bytes(_domainVersion));\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                DOMAIN_NAME,\\n                DOMAIN_VERSION,\\n                DOMAIN_CHAIN_ID,\\n                this\\n            )\\n        );\\n    }\\n\\n    /************************************************\\n     *  SETTER\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the referral fee for a specific referrer\\n     * @param referrer is the address of the referrer\\n     * @param fee is the fee in percent in 2 decimals\\n     */\\n    function setFee(address referrer, uint256 fee) external onlyOwner {\\n        require(referrer != address(0), \\\"Referrer cannot be the zero address\\\");\\n        require(fee < MAX_FEE, \\\"Fee exceeds maximum\\\");\\n\\n        referralFees[referrer] = fee;\\n\\n        emit SetFee(referrer, fee);\\n    }\\n\\n    /************************************************\\n     *  OFFER CREATION AND SETTLEMENT\\n     ***********************************************/\\n\\n    /**\\n     * @notice Create a new offer available for swap\\n     * @param oToken token offered by seller\\n     * @param biddingToken token asked by seller\\n     * @param minPrice minimum price of oToken denominated in biddingToken\\n     * @param minBidSize minimum amount of oToken requested in a single bid\\n     * @param totalSize amount of oToken offered by seller\\n     */\\n    function createOffer(\\n        address oToken,\\n        address biddingToken,\\n        uint96 minPrice,\\n        uint96 minBidSize,\\n        uint128 totalSize\\n    ) external override returns (uint256 swapId) {\\n        require(oToken != address(0), \\\"oToken cannot be the zero address\\\");\\n        require(\\n            biddingToken != address(0),\\n            \\\"BiddingToken cannot be the zero address\\\"\\n        );\\n        require(minPrice > 0, \\\"MinPrice must be larger than zero\\\");\\n        require(minBidSize > 0, \\\"MinBidSize must be larger than zero\\\");\\n        require(minBidSize <= totalSize, \\\"MinBidSize exceeds total size\\\");\\n\\n        offersCounter += 1;\\n\\n        swapId = offersCounter;\\n\\n        swapOffers[swapId].seller = msg.sender;\\n        swapOffers[swapId].oToken = oToken;\\n        swapOffers[swapId].biddingToken = biddingToken;\\n        swapOffers[swapId].minBidSize = minBidSize;\\n        swapOffers[swapId].minPrice = minPrice;\\n        swapOffers[swapId].totalSize = totalSize;\\n        swapOffers[swapId].availableSize = totalSize;\\n        // We warm the storage slot with 1 wei so we avoid a cold SSTORE\\n        swapOffers[swapId].totalSales = 1;\\n\\n        emit NewOffer(\\n            swapId,\\n            msg.sender,\\n            oToken,\\n            biddingToken,\\n            minPrice,\\n            minBidSize,\\n            totalSize\\n        );\\n    }\\n\\n    /**\\n     * @notice Settles the swap offering by iterating through the bids\\n     * @param swapId unique identifier of the swap offer\\n     * @param bids bids for swaps\\n     */\\n    function settleOffer(uint256 swapId, Bid[] calldata bids)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        Offer storage offer = swapOffers[swapId];\\n\\n        address seller = offer.seller;\\n        require(\\n            seller == msg.sender,\\n            \\\"Only seller can settle or offer doesn't exist\\\"\\n        );\\n        require(offer.availableSize > 0, \\\"Offer fully settled\\\");\\n\\n        uint256 totalSales;\\n        OfferDetails memory offerDetails;\\n        offerDetails.seller = seller;\\n        offerDetails.oToken = offer.oToken;\\n        offerDetails.biddingToken = offer.biddingToken;\\n        offerDetails.minPrice = offer.minPrice;\\n        offerDetails.minBidSize = offer.minBidSize;\\n\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            require(\\n                swapId == bids[i].swapId,\\n                \\\"Offer and bid swapId mismatched\\\"\\n            );\\n\\n            _swap(offerDetails, offer, bids[i]);\\n            totalSales += bids[i].sellAmount;\\n        }\\n\\n        bool fullySettled = offer.availableSize == 0;\\n\\n        // Deduct the initial 1 wei offset if offer is fully settled\\n        offer.totalSales += totalSales - (fullySettled ? 1 : 0);\\n\\n        if (fullySettled) {\\n            offer.seller = address(0);\\n            offer.oToken = address(0);\\n            offer.biddingToken = address(0);\\n            offer.minBidSize = 0;\\n            offer.minPrice = 0;\\n\\n            emit SettleOffer(swapId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Authorize a signer\\n     * @param signer address Wallet of the signer to authorize\\n     * @dev Emits an Authorize event\\n     */\\n    function authorize(address signer) external override {\\n        require(signer != address(0), \\\"SIGNER_INVALID\\\");\\n        authorized[msg.sender] = signer;\\n        emit Authorize(signer, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Revoke the signer\\n     * @dev Emits a Revoke event\\n     */\\n    function revoke() external override {\\n        address tmp = authorized[msg.sender];\\n        delete authorized[msg.sender];\\n        emit Revoke(tmp, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Cancel one or more nonces\\n     * @dev Cancelled nonces are marked as used\\n     * @dev Emits a Cancel event\\n     * @dev Out of gas may occur in arrays of length > 400\\n     * @param nonces uint256[] List of nonces to cancel\\n     */\\n    function cancelNonce(uint256[] calldata nonces) external override {\\n        for (uint256 i = 0; i < nonces.length; i++) {\\n            uint256 nonce = nonces[i];\\n            if (_markNonceAsUsed(msg.sender, nonce)) {\\n                emit Cancel(nonce, msg.sender);\\n            }\\n        }\\n    }\\n\\n    /************************************************\\n     *  PUBLIC VIEW FUNCTIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Validates Swap bid for any potential errors\\n     * @param bid Bid struct containing bid details\\n     * @return tuple of error count and bytes32[] memory array of error messages\\n     */\\n    function check(Bid calldata bid)\\n        external\\n        view\\n        override\\n        returns (uint256, bytes32[] memory)\\n    {\\n        Offer memory offer = swapOffers[bid.swapId];\\n        require(offer.seller != address(0), \\\"Offer does not exist\\\");\\n\\n        bytes32[] memory errors = new bytes32[](MAX_ERROR_COUNT);\\n\\n        uint256 errCount;\\n\\n        // Check signature\\n        address signatory = _getSignatory(bid);\\n\\n        if (signatory == address(0)) {\\n            errors[errCount] = \\\"SIGNATURE_INVALID\\\";\\n            errCount++;\\n        }\\n\\n        if (\\n            bid.signerWallet != signatory &&\\n            authorized[bid.signerWallet] != signatory\\n        ) {\\n            errors[errCount] = \\\"UNAUTHORIZED\\\";\\n            errCount++;\\n        }\\n\\n        // Check nonce\\n        if (nonceUsed(signatory, bid.nonce)) {\\n            errors[errCount] = \\\"NONCE_ALREADY_USED\\\";\\n            errCount++;\\n        }\\n\\n        // Check bid size\\n        if (bid.buyAmount < offer.minBidSize) {\\n            errors[errCount] = \\\"BID_TOO_SMALL\\\";\\n            errCount++;\\n        }\\n        if (bid.buyAmount > offer.availableSize) {\\n            errors[errCount] = \\\"BID_EXCEED_AVAILABLE_SIZE\\\";\\n            errCount++;\\n        }\\n\\n        // Check bid price\\n        uint256 bidPrice =\\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\\n        if (bidPrice < offer.minPrice) {\\n            errors[errCount] = \\\"PRICE_TOO_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check signer allowance\\n        uint256 signerAllowance =\\n            IERC20(offer.biddingToken).allowance(\\n                bid.signerWallet,\\n                address(this)\\n            );\\n        if (signerAllowance < bid.sellAmount) {\\n            errors[errCount] = \\\"SIGNER_ALLOWANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check signer balance\\n        uint256 signerBalance =\\n            IERC20(offer.biddingToken).balanceOf(bid.signerWallet);\\n        if (signerBalance < bid.sellAmount) {\\n            errors[errCount] = \\\"SIGNER_BALANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check seller allowance\\n        uint256 sellerAllowance =\\n            IERC20(offer.oToken).allowance(offer.seller, address(this));\\n        if (sellerAllowance < bid.buyAmount) {\\n            errors[errCount] = \\\"SELLER_ALLOWANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        // Check seller balance\\n        uint256 sellerBalance = IERC20(offer.oToken).balanceOf(offer.seller);\\n        if (sellerBalance < bid.buyAmount) {\\n            errors[errCount] = \\\"SELLER_BALANCE_LOW\\\";\\n            errCount++;\\n        }\\n\\n        return (errCount, errors);\\n    }\\n\\n    /**\\n     * @notice Returns the average settlement price for a swap offer\\n     * @param swapId unique identifier of the swap offer\\n     */\\n    function averagePriceForOffer(uint256 swapId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Offer storage offer = swapOffers[swapId];\\n        require(offer.totalSize != 0, \\\"Offer does not exist\\\");\\n\\n        uint256 availableSize = offer.availableSize;\\n\\n        // Deduct the initial 1 wei offset if offer is not fully settled\\n        uint256 adjustment = availableSize != 0 ? 1 : 0;\\n\\n        return\\n            ((offer.totalSales - adjustment) * (10**8)) /\\n            (offer.totalSize - availableSize);\\n    }\\n\\n    /**\\n     * @notice Returns true if the nonce has been used\\n     * @param signer address Address of the signer\\n     * @param nonce uint256 Nonce being checked\\n     */\\n    function nonceUsed(address signer, uint256 nonce)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256 groupKey = nonce / 256;\\n        uint256 indexInGroup = nonce % 256;\\n        return (_nonceGroups[signer][groupKey] >> indexInGroup) & 1 == 1;\\n    }\\n\\n    /************************************************\\n     *  INTERNAL FUNCTIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Swap Atomic ERC20 Swap\\n     * @param details Details of offering\\n     * @param offer Offer struct containing offer details\\n     * @param bid Bid struct containing bid details\\n     */\\n    function _swap(\\n        OfferDetails memory details,\\n        Offer storage offer,\\n        Bid calldata bid\\n    ) internal {\\n        require(DOMAIN_CHAIN_ID == getChainId(), \\\"CHAIN_ID_CHANGED\\\");\\n\\n        address signatory = _getSignatory(bid);\\n\\n        require(signatory != address(0), \\\"SIGNATURE_INVALID\\\");\\n\\n        if (bid.signerWallet != signatory) {\\n            require(authorized[bid.signerWallet] == signatory, \\\"UNAUTHORIZED\\\");\\n        }\\n\\n        require(_markNonceAsUsed(signatory, bid.nonce), \\\"NONCE_ALREADY_USED\\\");\\n        require(\\n            bid.buyAmount <= offer.availableSize,\\n            \\\"BID_EXCEED_AVAILABLE_SIZE\\\"\\n        );\\n        require(bid.buyAmount >= details.minBidSize, \\\"BID_TOO_SMALL\\\");\\n\\n        // Ensure min. price is met\\n        uint256 bidPrice =\\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\\n        require(bidPrice >= details.minPrice, \\\"PRICE_TOO_LOW\\\");\\n\\n        // don't have to do a uint128 check because we already check\\n        // that bid.buyAmount <= offer.availableSize\\n        offer.availableSize -= uint128(bid.buyAmount);\\n\\n        // Transfer token from sender to signer\\n        IERC20(details.oToken).safeTransferFrom(\\n            details.seller,\\n            bid.signerWallet,\\n            bid.buyAmount\\n        );\\n\\n        // Transfer to referrer if any\\n        uint256 feeAmount;\\n        if (bid.referrer != address(0)) {\\n            uint256 feePercent = referralFees[bid.referrer];\\n\\n            if (feePercent > 0) {\\n                feeAmount = (bid.sellAmount * feePercent) / MAX_PERCENTAGE;\\n\\n                IERC20(details.biddingToken).safeTransferFrom(\\n                    bid.signerWallet,\\n                    bid.referrer,\\n                    feeAmount\\n                );\\n            }\\n        }\\n\\n        // Transfer token from signer to recipient\\n        IERC20(details.biddingToken).safeTransferFrom(\\n            bid.signerWallet,\\n            details.seller,\\n            bid.sellAmount - feeAmount\\n        );\\n\\n        // Emit a Swap event\\n        emit Swap(\\n            bid.swapId,\\n            bid.nonce,\\n            bid.signerWallet,\\n            bid.sellAmount,\\n            bid.buyAmount,\\n            bid.referrer,\\n            feeAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Marks a nonce as used for the given signer\\n     * @param signer address Address of the signer for which to mark the nonce as used\\n     * @param nonce uint256 Nonce to be marked as used\\n     * @return bool True if the nonce was not marked as used already\\n     */\\n    function _markNonceAsUsed(address signer, uint256 nonce)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 groupKey = nonce / 256;\\n        uint256 indexInGroup = nonce % 256;\\n        uint256 group = _nonceGroups[signer][groupKey];\\n\\n        // If it is already used, return false\\n        if ((group >> indexInGroup) & 1 == 1) {\\n            return false;\\n        }\\n\\n        _nonceGroups[signer][groupKey] = group | (uint256(1) << indexInGroup);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Recover the signatory from a signature\\n     * @param bid Bid struct containing bid details\\n     */\\n    function _getSignatory(Bid calldata bid) internal view returns (address) {\\n        return\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR,\\n                        keccak256(\\n                            abi.encode(\\n                                BID_TYPEHASH,\\n                                bid.swapId,\\n                                bid.nonce,\\n                                bid.signerWallet,\\n                                bid.sellAmount,\\n                                bid.buyAmount,\\n                                bid.referrer\\n                            )\\n                        )\\n                    )\\n                ),\\n                bid.v,\\n                bid.r,\\n                bid.s\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current chainId using the chainid opcode\\n     * @return id uint256 The chain id\\n     */\\n    function getChainId() internal view returns (uint256 id) {\\n        // no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ec8231cb8ae44b2039f58afb5ffe3fbc9f705084e083cae85b66110d5d992a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50466080819052612c7761003d600039600081816101d9015281816105870152611a7a0152612c776000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806375780f42116100c3578063b6a5d7de1161007c578063b6a5d7de1461035e578063b918161114610371578063d5172fcc1461039a578063e55156b5146103ad578063f2fde38b146103c0578063fbcac9e1146103d357600080fd5b806375780f4214610227578063796f077b146102475780638da5cb5b14610250578063a13f1c6214610275578063acb8cc491461034d578063b6549f751461035657600080fd5b80633644e515116101155780633644e515146101cb578063416f281d146101d457806351bb9b1e146101fb57806369fd925f146102035780636c1c56f11461020c578063715018a61461021f57600080fd5b8063077f224a1461015257806307a975a1146101675780631647795e1461018d57806320606b70146101b05780632787b5f8146101b8575b600080fd5b610165610160366004612675565b6103f4565b005b61017a610175366004612549565b6105e7565b6040519081526020015b60405180910390f35b6101a061019b3660046125bc565b6108d5565b6040519015158152602001610184565b61017a61092d565b61017a6101c63660046126fe565b610955565b61017a60995481565b61017a7f000000000000000000000000000000000000000000000000000000000000000081565b61017a610a2c565b61017a609a5481565b61016561021a3660046125e5565b610a3b565b610165610ac6565b61017a61023536600461252f565b609c6020526000908152604090205481565b61017a60975481565b6065546001600160a01b03165b6040516001600160a01b039091168152602001610184565b6102ee6102833660046126fe565b609b60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b0393841694838516946001600160601b03600160a01b95869004811695918516949190910416916001600160801b0380831692600160801b9004169088565b604080516001600160a01b03998a16815297891660208901526001600160601b0396871690880152969093166060860152921660808401526001600160801b0391821660a08401521660c082015260e081019190915261010001610184565b61017a60985481565b610165610afc565b61016561036c36600461252f565b610b54565b61025d61037f36600461252f565b609d602052600090815260409020546001600160a01b031681565b6101656103a836600461272e565b610bf1565b6101656103bb3660046125bc565b610f23565b6101656103ce36600461252f565b61104e565b6103e66103e13660046126e6565b6110e9565b6040516101849291906129e2565b600054610100900460ff168061040d575060005460ff16155b6104325760405162461bcd60e51b81526004016104299061295f565b60405180910390fd5b600054610100900460ff16158015610454576000805461ffff19166101011790555b60008451116104945760405162461bcd60e51b815260206004820152600c60248201526b215f646f6d61696e4e616d6560a01b6044820152606401610429565b60008351116104d75760405162461bcd60e51b815260206004820152600f60248201526e10afb237b6b0b4b72b32b939b4b7b760891b6044820152606401610429565b6001600160a01b0382166105175760405162461bcd60e51b815260206004820152600760248201526610afb7bbb732b960c91b6044820152606401610429565b61051f6118b2565b610527611925565b6105308261104e565b8351602080860191909120609755835184820120609855604051610554910161289d565b60408051601f198184030181528282528051602091820120609754609854928501919091529183019190915260608201527f000000000000000000000000000000000000000000000000000000000000000060808201523060a082015260c00160408051601f19818403018152919052805160209091012060995580156105e1576000805461ff00191690555b50505050565b60006001600160a01b0386166106495760405162461bcd60e51b815260206004820152602160248201527f6f546f6b656e2063616e6e6f7420626520746865207a65726f206164647265736044820152607360f81b6064820152608401610429565b6001600160a01b0385166106af5760405162461bcd60e51b815260206004820152602760248201527f42696464696e67546f6b656e2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b6064820152608401610429565b6000846001600160601b0316116107125760405162461bcd60e51b815260206004820152602160248201527f4d696e5072696365206d757374206265206c6172676572207468616e207a65726044820152606f60f81b6064820152608401610429565b6000836001600160601b0316116107775760405162461bcd60e51b815260206004820152602360248201527f4d696e42696453697a65206d757374206265206c6172676572207468616e207a60448201526265726f60e81b6064820152608401610429565b816001600160801b0316836001600160601b031611156107d95760405162461bcd60e51b815260206004820152601d60248201527f4d696e42696453697a65206578636565647320746f74616c2073697a650000006044820152606401610429565b6001609a60008282546107ec9190612a2f565b9091555050609a546000818152609b602090815260409182902080546001600160a01b0319163390811782556001600160601b03888116600160a01b8181026001600160a01b038e81169182176002880155938d16918202938f16938417600180880191909155600160801b6001600160801b038d1690810281176003890155600490970155875189815296870194909452858701929092526060850192909252608084015260a083015260c082015290519192507f61ed224de71f3815c67ff417a9cba223a61831d6223cfd50f3986f55cca81166919081900360e00190a195945050505050565b6000806108e461010084612a47565b905060006108f461010085612beb565b6001600160a01b0386166000908152609e6020908152604080832095835294905292909220546001921c82169091149150505b92915050565b60405160200161093c9061289d565b6040516020818303038152906040528051906020012081565b6000818152609b6020526040812060038101546001600160801b03166109b45760405162461bcd60e51b815260206004820152601460248201527313d999995c88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610429565b6003810154600160801b90046001600160801b03166000816109d75760006109da565b60015b600384015460ff9190911691506109fb9083906001600160801b0316612b8d565b818460040154610a0b9190612b8d565b610a19906305f5e100612b46565b610a239190612a47565b95945050505050565b60405160200161093c906127e6565b60005b81811015610ac1576000838383818110610a6857634e487b7160e01b600052603260045260246000fd5b905060200201359050610a7b338261198c565b15610aae57604051339082907f8dd3c361eb2366ff27c2db0eb07b9261f1d052570742ab8c9a0c326f37aa576d90600090a35b5080610ab981612bd0565b915050610a3e565b505050565b6065546001600160a01b03163314610af05760405162461bcd60e51b8152600401610429906129ad565b610afa6000611a25565b565b336000818152609d602052604080822080546001600160a01b0319811690915590516001600160a01b03909116929183917fd7426110292f20fe59e73ccf52124e0f5440a756507c91c7b0a6c50e1eb1a23a9190a350565b6001600160a01b038116610b9b5760405162461bcd60e51b815260206004820152600e60248201526d14d251d3915497d253959053125160921b6044820152606401610429565b336000818152609d602052604080822080546001600160a01b0319166001600160a01b038616908117909155905190917f30468de898bda644e26bab66e5a2241a3aa6aaf527257f5ca54e0f65204ba14a91a350565b60026001541415610c445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610429565b60026001556000838152609b6020526040902080546001600160a01b0316338114610cc75760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c792073656c6c65722063616e20736574746c65206f72206f666665722060448201526c191bd95cdb89dd08195e1a5cdd609a1b6064820152608401610429565b6003820154600160801b90046001600160801b0316610d1e5760405162461bcd60e51b815260206004820152601360248201527213d999995c88199d5b1b1e481cd95d1d1b1959606a1b6044820152606401610429565b6040805160a0810182526001600160a01b03838116825260018501548082166020840152600286015491821660608401526001600160601b03600160a01b9182900481169484019490945290049091166080820152600090815b85811015610e7457868682818110610da057634e487b7160e01b600052603260045260246000fd5b90506101200201600001358814610df95760405162461bcd60e51b815260206004820152601f60248201527f4f6666657220616e642062696420737761704964206d69736d617463686564006044820152606401610429565b610e2a8286898985818110610e1e57634e487b7160e01b600052603260045260246000fd5b90506101200201611a77565b868682818110610e4a57634e487b7160e01b600052603260045260246000fd5b905061012002016060013583610e609190612a2f565b925080610e6c81612bd0565b915050610d78565b506003840154600160801b90046001600160801b03161580610e97576000610e9a565b60015b610ea79060ff1684612b8d565b856004016000828254610eba9190612a2f565b90915550508015610f155784546001600160a01b031916855560006002860181905560018601556040518881527f1b5db04ed24662a962854839dba8e5b26c71e843c99221f770571a4ea3ecfdcd9060200160405180910390a15b505060018055505050505050565b6065546001600160a01b03163314610f4d5760405162461bcd60e51b8152600401610429906129ad565b6001600160a01b038216610faf5760405162461bcd60e51b815260206004820152602360248201527f52656665727265722063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b6064820152608401610429565b6103e88110610ff65760405162461bcd60e51b81526020600482015260136024820152724665652065786365656473206d6178696d756d60681b6044820152606401610429565b6001600160a01b0382166000818152609c6020908152604091829020849055815192835282018390527f01fe2943baee27f47add82886c2200f910c749c461c9b63c5fe83901a53bdb49910160405180910390a15050565b6065546001600160a01b031633146110785760405162461bcd60e51b8152600401610429906129ad565b6001600160a01b0381166110dd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610429565b6110e681611a25565b50565b80356000908152609b6020908152604080832081516101008101835281546001600160a01b039081168083526001840154808316968401969096526001600160601b03600160a01b96879004811695840195909552600284015491821660608481019190915295909104909316608082015260038201546001600160801b0380821660a0840152600160801b9091041660c082015260049091015460e0820152906111cd5760405162461bcd60e51b815260206004820152601460248201527313d999995c88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610429565b60408051600a808252610160820190925260009160208201610140803683370190505090506000806111fe87611f3d565b90506001600160a01b03811661125c577014d251d3905515549157d2539590531251607a1b83838151811061124357634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161125881612bd0565b9250505b6001600160a01b0381166112766060890160408a0161252f565b6001600160a01b0316141580156112c657506001600160a01b038116609d60006112a660608b0160408c0161252f565b6001600160a01b0390811682526020820192909252604001600020541614155b15611314576b15539055551213d49256915160a21b8383815181106112fb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161131081612bd0565b9250505b6113228188602001356108d5565b1561137657711393d390d157d053149150511657d554d15160721b83838151811061135d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161137281612bd0565b9250505b83608001516001600160601b0316876080013510156113d9576c10925117d513d3d7d4d3505313609a1b8383815181106113c057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152816113d581612bd0565b9250505b8360c001516001600160801b03168760800135111561144857784249445f4558434545445f415641494c41424c455f53495a4560381b83838151811061142f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528161144481612bd0565b9250505b6000608088013561145b6008600a612a9e565b6114699060608b0135612b46565b6114739190612a47565b905084604001516001600160601b03168110156114d4576c50524943455f544f4f5f4c4f5760981b8484815181106114bb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152826114d081612bd0565b9350505b600085606001516001600160a01b031663dd62ed3e8a60400160208101906114fc919061252f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190612716565b905088606001358110156115d857735349474e45525f414c4c4f57414e43455f4c4f5760601b8585815181106115bf57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152836115d481612bd0565b9450505b600086606001516001600160a01b03166370a082318b6040016020810190611600919061252f565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561163f57600080fd5b505afa158015611653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116779190612716565b905089606001358110156116d457715349474e45525f42414c414e43455f4c4f5760701b8686815181106116bb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152846116d081612bd0565b9550505b60208701518751604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e9060440160206040518083038186803b15801561172757600080fd5b505afa15801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f9190612716565b90508a608001358110156117be577353454c4c45525f414c4c4f57414e43455f4c4f5760601b8787815181106117a557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152856117ba81612bd0565b9650505b602088015188516040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b15801561180b57600080fd5b505afa15801561181f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118439190612716565b90508b608001358110156118a0577153454c4c45525f42414c414e43455f4c4f5760701b88888151811061188757634e487b7160e01b600052603260045260246000fd5b60209081029190910101528661189c81612bd0565b9750505b50949a95995094975050505050505050565b600054610100900460ff16806118cb575060005460ff16155b6118e75760405162461bcd60e51b81526004016104299061295f565b600054610100900460ff16158015611909576000805461ffff19166101011790555b6119116120ad565b80156110e6576000805461ff001916905550565b600054610100900460ff168061193e575060005460ff16155b61195a5760405162461bcd60e51b81526004016104299061295f565b600054610100900460ff1615801561197c576000805461ffff19166101011790555b61198461211c565b611911612186565b60008061199b61010084612a47565b905060006119ab61010085612beb565b6001600160a01b0386166000908152609e60209081526040808320868452909152902054909150600181831c811614156119eb5760009350505050610927565b6001600160a01b0386166000908152609e602090815260408083209583529490529290922060019182901b92909217909155905092915050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b467f000000000000000000000000000000000000000000000000000000000000000014611ad95760405162461bcd60e51b815260206004820152601060248201526f10d210525397d25117d0d2105391d15160821b6044820152606401610429565b6000611ae482611f3d565b90506001600160a01b038116611b305760405162461bcd60e51b815260206004820152601160248201527014d251d3905515549157d2539590531251607a1b6044820152606401610429565b6001600160a01b038116611b4a606084016040850161252f565b6001600160a01b031614611bcf576001600160a01b038116609d6000611b76606086016040870161252f565b6001600160a01b0390811682526020820192909252604001600020541614611bcf5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610429565b611bdd81836020013561198c565b611c1e5760405162461bcd60e51b81526020600482015260126024820152711393d390d157d053149150511657d554d15160721b6044820152606401610429565b6003830154600160801b90046001600160801b031660808301351115611c825760405162461bcd60e51b81526020600482015260196024820152784249445f4558434545445f415641494c41424c455f53495a4560381b6044820152606401610429565b836080015182608001351015611cca5760405162461bcd60e51b815260206004820152600d60248201526c10925117d513d3d7d4d3505313609a1b6044820152606401610429565b60006080830135611cdd6008600a612a9e565b611ceb906060860135612b46565b611cf59190612a47565b90508460400151811015611d3b5760405162461bcd60e51b815260206004820152600d60248201526c50524943455f544f4f5f4c4f5760981b6044820152606401610429565b82608001358460030160108282829054906101000a90046001600160801b0316611d659190612b65565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611dbe8560000151846040016020810190611da4919061252f565b60208801516001600160a01b0316919060808701356121e6565b600080611dd160c0860160a0870161252f565b6001600160a01b031614611e6e576000609c81611df460c0880160a0890161252f565b6001600160a01b0316815260208101919091526040016000205490508015611e6c57612710611e27826060880135612b46565b611e319190612a47565b9150611e6c611e46606087016040880161252f565b611e5660c0880160a0890161252f565b60608a01516001600160a01b03169190856121e6565b505b611ea7611e81606086016040870161252f565b8751611e91846060890135612b8d565b60608a01516001600160a01b03169291906121e6565b611eb7606085016040860161252f565b6001600160a01b031684357f71abc95ed6b8cb4d0cc5eee25c1212bea3ca594e723da5c9facf161f3f5b6bd5602087013560608801356080890135611f0260c08b0160a08c0161252f565b604080519485526020850193909352918301526001600160a01b031660608201526080810185905260a00160405180910390a3505050505050565b60006001609954604051602001611f53906127e6565b6040516020818303038152906040528051906020012084600001358560200135866040016020810190611f86919061252f565b60608801356080890135611fa060c08b0160a08c0161252f565b60408051602081019890985287019590955260608601939093526001600160a01b03918216608086015260a085015260c08401919091521660e0820152610100016040516020818303038152906040528051906020012060405160200161201e92919061190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209091012061204660e0850160c086016127a9565b6040805160008152602081018083529390935260ff9091169082015260e08401356060820152610100840135608082015260a0016020604051602081039080840390855afa15801561209c573d6000803e3d6000fd5b5050604051601f1901519392505050565b600054610100900460ff16806120c6575060005460ff16155b6120e25760405162461bcd60e51b81526004016104299061295f565b600054610100900460ff16158015612104576000805461ffff19166101011790555b6001805580156110e6576000805461ff001916905550565b600054610100900460ff1680612135575060005460ff16155b6121515760405162461bcd60e51b81526004016104299061295f565b600054610100900460ff16158015611911576000805461ffff191661010117905580156110e6576000805461ff001916905550565b600054610100900460ff168061219f575060005460ff16155b6121bb5760405162461bcd60e51b81526004016104299061295f565b600054610100900460ff161580156121dd576000805461ffff19166101011790555b61191133611a25565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180516001600160e01b03166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526105e19287929160009161227e9185169084906122fb565b805190915015610ac1578080602001905181019061229c9190612655565b610ac15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610429565b606061230a8484600085612314565b90505b9392505050565b6060824710156123755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610429565b843b6123c35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610429565b600080866001600160a01b031685876040516123df91906127ca565b60006040518083038185875af1925050503d806000811461241c576040519150601f19603f3d011682016040523d82523d6000602084013e612421565b606091505b509150915061243182828661243c565b979650505050505050565b6060831561244b57508161230d565b82511561245b5782518084602001fd5b8160405162461bcd60e51b8152600401610429919061292c565b80356001600160a01b038116811461248c57600080fd5b919050565b600082601f8301126124a1578081fd5b813567ffffffffffffffff808211156124bc576124bc612c2b565b604051601f8301601f19908116603f011681019082821181831017156124e4576124e4612c2b565b816040528381528660208588010111156124fc578485fd5b8360208701602083013792830160200193909352509392505050565b80356001600160601b038116811461248c57600080fd5b600060208284031215612540578081fd5b61230d82612475565b600080600080600060a08688031215612560578081fd5b61256986612475565b945061257760208701612475565b935061258560408701612518565b925061259360608701612518565b915060808601356001600160801b03811681146125ae578182fd5b809150509295509295909350565b600080604083850312156125ce578182fd5b6125d783612475565b946020939093013593505050565b600080602083850312156125f7578182fd5b823567ffffffffffffffff8082111561260e578384fd5b818501915085601f830112612621578384fd5b81358181111561262f578485fd5b8660208260051b8501011115612643578485fd5b60209290920196919550909350505050565b600060208284031215612666578081fd5b8151801515811461230d578182fd5b600080600060608486031215612689578283fd5b833567ffffffffffffffff808211156126a0578485fd5b6126ac87838801612491565b945060208601359150808211156126c1578384fd5b506126ce86828701612491565b9250506126dd60408501612475565b90509250925092565b600061012082840312156126f8578081fd5b50919050565b60006020828403121561270f578081fd5b5035919050565b600060208284031215612727578081fd5b5051919050565b600080600060408486031215612742578283fd5b83359250602084013567ffffffffffffffff80821115612760578384fd5b818601915086601f830112612773578384fd5b813581811115612781578485fd5b87602061012083028501011115612796578485fd5b6020830194508093505050509250925092565b6000602082840312156127ba578081fd5b813560ff8116811461230d578182fd5b600082516127dc818460208701612ba4565b9190910192915050565b63084d2c8560e31b81526e1d5a5b9d0c8d4d881cddd85c12590b608a1b60048201526d1d5a5b9d0c8d4d881b9bdb98d94b60921b6013820152741859191c995cdcc81cda59db995c95d85b1b195d0b605a1b6021820152721d5a5b9d0c8d4d881cd95b1b105b5bdd5b9d0b606a1b6036820152711d5a5b9d0c8d4d88189d5e505b5bdd5b9d0b60721b60498201526f30b2323932b9b9903932b332b93932b960811b605b820152602960f81b606b820152606c0190565b6c08a92a06e626488dedac2d2dc5609b1b81526b1cdd1c9a5b99c81b985b594b60a21b600d8201526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b60198201526f1d5a5b9d0c8d4d8818da185a5b92590b60821b60288201527f6164647265737320766572696679696e67436f6e7472616374000000000000006038820152602960f81b605182015260520190565b602081526000825180602084015261294b816040850160208701612ba4565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006040820184835260206040818501528185518084526060860191508287019350845b81811015612a2257845183529383019391830191600101612a06565b5090979650505050505050565b60008219821115612a4257612a42612bff565b500190565b600082612a5657612a56612c15565b500490565b600181815b80851115612a96578160001904821115612a7c57612a7c612bff565b80851615612a8957918102915b93841c9390800290612a60565b509250929050565b600061230d8383600082612ab457506001610927565b81612ac157506000610927565b8160018114612ad75760028114612ae157612afd565b6001915050610927565b60ff841115612af257612af2612bff565b50506001821b610927565b5060208310610133831016604e8410600b8410161715612b20575081810a610927565b612b2a8383612a5b565b8060001904821115612b3e57612b3e612bff565b029392505050565b6000816000190483118215151615612b6057612b60612bff565b500290565b60006001600160801b0383811690831681811015612b8557612b85612bff565b039392505050565b600082821015612b9f57612b9f612bff565b500390565b60005b83811015612bbf578181015183820152602001612ba7565b838111156105e15750506000910152565b6000600019821415612be457612be4612bff565b5060010190565b600082612bfa57612bfa612c15565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212202320f76fbd58ab73a94bbb720268a6cefad5c36432c3ddb0a4b63764db91e05264736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorize(address)": {
        "details": "Emits an Authorize event",
        "params": {
          "signer": "address Wallet of the signer to authorize"
        }
      },
      "averagePriceForOffer(uint256)": {
        "params": {
          "swapId": "unique identifier of the swap offer"
        }
      },
      "cancelNonce(uint256[])": {
        "details": "Cancelled nonces are marked as usedEmits a Cancel eventOut of gas may occur in arrays of length > 400",
        "params": {
          "nonces": "uint256[] List of nonces to cancel"
        }
      },
      "check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))": {
        "params": {
          "bid": "Bid struct containing bid details"
        },
        "returns": {
          "_0": "tuple of error count and bytes32[] memory array of error messages"
        }
      },
      "createOffer(address,address,uint96,uint96,uint128)": {
        "params": {
          "biddingToken": "token asked by seller",
          "minBidSize": "minimum amount of oToken requested in a single bid",
          "minPrice": "minimum price of oToken denominated in biddingToken",
          "oToken": "token offered by seller",
          "totalSize": "amount of oToken offered by seller"
        }
      },
      "nonceUsed(address,uint256)": {
        "params": {
          "nonce": "uint256 Nonce being checked",
          "signer": "address Address of the signer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke()": {
        "details": "Emits a Revoke event"
      },
      "setFee(address,uint256)": {
        "params": {
          "fee": "is the fee in percent in 2 decimals",
          "referrer": "is the address of the referrer"
        }
      },
      "settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])": {
        "params": {
          "bids": "bids for swaps",
          "swapId": "unique identifier of the swap offer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "authorize(address)": {
        "notice": "Authorize a signer"
      },
      "averagePriceForOffer(uint256)": {
        "notice": "Returns the average settlement price for a swap offer"
      },
      "cancelNonce(uint256[])": {
        "notice": "Cancel one or more nonces"
      },
      "check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32))": {
        "notice": "Validates Swap bid for any potential errors"
      },
      "createOffer(address,address,uint96,uint96,uint128)": {
        "notice": "Create a new offer available for swap"
      },
      "nonceUsed(address,uint256)": {
        "notice": "Returns true if the nonce has been used"
      },
      "revoke()": {
        "notice": "Revoke the signer"
      },
      "setFee(address,uint256)": {
        "notice": "Sets the referral fee for a specific referrer"
      },
      "settleOffer(uint256,(uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)[])": {
        "notice": "Settles the swap offering by iterating through the bids"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 179,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 230,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 993,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 169,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14487,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "DOMAIN_NAME",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 14489,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "DOMAIN_VERSION",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 14491,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 14493,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "offersCounter",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 14498,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "swapOffers",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_struct(Offer)4120_storage)"
      },
      {
        "astId": 14502,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "referralFees",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14506,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "authorized",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14513,
        "contract": "contracts/utils/Swap.sol:Swap",
        "label": "_nonceGroups",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Offer)4120_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISwap.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)4120_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Offer)4120_storage": {
        "encoding": "inplace",
        "label": "struct ISwap.Offer",
        "members": [
          {
            "astId": 4105,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4107,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "oToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4109,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "minPrice",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 4111,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "biddingToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4113,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "minBidSize",
            "offset": 20,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 4115,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "totalSize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 4117,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "availableSize",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 4119,
            "contract": "contracts/utils/Swap.sol:Swap",
            "label": "totalSales",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}