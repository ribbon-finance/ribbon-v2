{
  "address": "0x5d5Acc6D05f1c675458fCf9847EA64CEBdFDb5f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gammaController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marginPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisEasyAuction",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "AuctionDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CloseShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InstantWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "NewOptionStrikeSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "OpenShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumDiscount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "PremiumDiscountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAMMA_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GNOSIS_EASY_AUCTION",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OTOKEN_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRemainingOTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitAndClose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOtokenPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numRounds",
          "type": "uint256"
        }
      ],
      "name": "initRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_keeper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_optionsPremiumPricer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_strikeSelection",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_premiumDiscount",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "_auctionDuration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_isUsdcAuction",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "_swapPath",
              "type": "bytes"
            }
          ],
          "internalType": "struct RibbonThetaVault.InitParams",
          "name": "_initParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUsdcAuction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastStrikeOverrideRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOptionReadyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionAuctionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionState",
      "outputs": [
        {
          "internalType": "address",
          "name": "nextOption",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOption",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nextOptionReadyAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionsPremiumPricer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overriddenStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollToNextOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "setAuctionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOptionsPremiumPricer",
          "type": "address"
        }
      ],
      "name": "setOptionsPremiumPricer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "setPremiumDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "strikePrice",
          "type": "uint128"
        }
      ],
      "name": "setStrikePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrikeSelection",
          "type": "address"
        }
      ],
      "name": "setStrikeSelection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "newSwapPath",
          "type": "bytes"
        }
      ],
      "name": "setSwapPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "settleAuctionAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikeSelection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPath",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint56",
          "name": "minimumSupply",
          "type": "uint56"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawInstantly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0301dda56d07d4e33dc471271e8685bc72a7a7403b930acde99730591393c362",
  "receipt": {
    "to": null,
    "from": "0x004FCF8052D3c7eCb7558ac0068882425a055528",
    "contractAddress": "0x5d5Acc6D05f1c675458fCf9847EA64CEBdFDb5f1",
    "transactionIndex": 0,
    "gasUsed": "5257088",
    "logsBloom": "0x
    "blockHash": "0x1133990da9a07a14e21e3538943ad5c9bc244bff8985c88407d455e34c59be81",
    "transactionHash": "0x0301dda56d07d4e33dc471271e8685bc72a7a7403b930acde99730591393c362",
    "logs": [],
    "blockNumber": 3059475,
    "cumulativeGasUsed": "5257088",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD9D01A9F7C810EC035C0e42cB9E80Ef44D7f8692",
    "0x6275B63A4eE560004c34431e573314426906cee9",
    "0x3aB375D57EbB733E735a17eDFd3F973f6BC5de21",
    "0x836E115f0580c8350228E073949bf269F7BC4B62",
    "0x9EBC603bBf8309E1715a1678B5C13A4aE6c26452",
    "0xa5cd8D8effACB7Ad861e3797404924199D1463a5",
    "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10"
  ],
  "solcInputHash": "2140ab137b588e633ff429756162e2c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gammaController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisEasyAuction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CloseShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InstantWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"NewOptionStrikeSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"OpenShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"PremiumDiscountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMMA_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNOSIS_EASY_AUCTION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTOKEN_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRemainingOTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitAndClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOtokenPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numRounds\",\"type\":\"uint256\"}],\"name\":\"initRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strikeSelection\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_premiumDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUsdcAuction\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_swapPath\",\"type\":\"bytes\"}],\"internalType\":\"struct RibbonThetaVault.InitParams\",\"name\":\"_initParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUsdcAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStrikeOverrideRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOptionReadyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionAuctionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nextOption\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOption\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionReadyAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overriddenStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollToNextOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOptionsPremiumPricer\",\"type\":\"address\"}],\"name\":\"setOptionsPremiumPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"setPremiumDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"}],\"name\":\"setStrikePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrikeSelection\",\"type\":\"address\"}],\"name\":\"setStrikeSelection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"newSwapPath\",\"type\":\"bytes\"}],\"name\":\"setSwapPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"settleAuctionAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikeSelection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_gammaController\":\"is the contract address for opyn actions\",\"_gnosisEasyAuction\":\"is the contract address that facilitates gnosis auctions\",\"_marginPool\":\"is the contract address for providing collateral to opyn\",\"_oTokenFactory\":\"is the contract address for minting new opyn option types (strikes, asset, expiry)\",\"_uniswapFactory\":\"is the contract address of UniswapV3 factory containing\",\"_uniswapRouter\":\"is the contract address of UniswapV3 router that handles swaps\",\"_usdc\":\"is the USDC contract\",\"_weth\":\"is the Wrapped Ether contract\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\"}},\"depositFor(uint256,address)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"creditor\":\"is the address that can claim/withdraw deposited amount\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,bool,bytes),(bool,uint8,address,address,uint56,uint104))\":{\"params\":{\"_initParams\":\"is the struct with vault initialization parameters\",\"_vaultParams\":\"is the struct with vault general data\"}},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAuctionDuration(uint256)\":{\"params\":{\"newAuctionDuration\":\"is the auction duration\"}},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setNewKeeper(address)\":{\"params\":{\"newKeeper\":\"is the address of the new keeper\"}},\"setOptionsPremiumPricer(address)\":{\"params\":{\"newOptionsPremiumPricer\":\"is the address of the new strike selection contract\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"setPremiumDiscount(uint256)\":{\"params\":{\"newPremiumDiscount\":\"is the premium discount\"}},\"setStrikePrice(uint128)\":{\"params\":{\"strikePrice\":\"is the strike price of the new oTokens (decimals = 8)\"}},\"setStrikeSelection(address)\":{\"params\":{\"newStrikeSelection\":\"is the address of the new strike selection contract\"}},\"setSwapPath(bytes)\":{\"params\":{\"newSwapPath\":\"is the new path\"}},\"settleAuctionAndSwap(uint256)\":{\"params\":{\"minAmountOut\":\"is the minimum amount of underlying acceptable for the swap\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawInstantly(uint256)\":{\"params\":{\"amount\":\"is the amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELAY()\":{\"notice\":\"15 minute timelock between commitAndClose and rollToNexOption.\"},\"OTOKEN_FACTORY()\":{\"notice\":\"oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\"},\"PERIOD()\":{\"notice\":\"7 day period between each options sale.\"},\"USDC()\":{\"notice\":\"USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"},\"WETH()\":{\"notice\":\"WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"},\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"burnRemainingOTokens()\":{\"notice\":\"Burn the remaining oTokens left over from gnosis auction.\"},\"commitAndClose()\":{\"notice\":\"Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious.\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"constructor\":{\"notice\":\"Initializes the contract with immutable variables\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"deposit(uint256)\":{\"notice\":\"Deposits the `asset` from msg.sender.\"},\"depositETH()\":{\"notice\":\"Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\"},\"depositFor(uint256,address)\":{\"notice\":\"Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,bool,bytes),(bool,uint8,address,address,uint56,uint104))\":{\"notice\":\"Initializes the OptionVault contract with storage variables.\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"keeper()\":{\"notice\":\"role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"optionState()\":{\"notice\":\"Vault's state of the options sold and the timelocked option\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"rollToNextOption()\":{\"notice\":\"Rolls the vault's funds into a new short position.\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"setAuctionDuration(uint256)\":{\"notice\":\"Sets the new auction duration\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"},\"setOptionsPremiumPricer(address)\":{\"notice\":\"Sets the new options premium pricer contract\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"setPremiumDiscount(uint256)\":{\"notice\":\"Sets the new discount on premiums for options we are selling\"},\"setStrikePrice(uint128)\":{\"notice\":\"Optionality to set strike price manually\"},\"setStrikeSelection(address)\":{\"notice\":\"Sets the new strike selection contract\"},\"setSwapPath(bytes)\":{\"notice\":\"Sets a new path for swaps\"},\"settleAuctionAndSwap(uint256)\":{\"notice\":\"Settle USDC auction and swap the proceeds to underlying asset\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"startAuction()\":{\"notice\":\"Initiate the gnosis auction.\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts locked into a short position\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawInstantly(uint256)\":{\"notice\":\"Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"notice\":\"UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage. RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/BaseVaults/RibbonThetaVault.sol\":\"RibbonThetaVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41ed736eb79c71ea59fadcc23cfbc4ff1ccb802458ede6bd69b18e5abdcefdce\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x226639ee48018ec78891a829816799c9b9f6bbec7e84c4ca43cdc7dc8a07628f\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf2dcc40727ef8d8723ee3193cefdeffa3c2b5a56b0a444d233eafceee0d6f298\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaca9a37c1f43c85c81c799997e75193df1980191bd6ce9b5f7b980d97e565dbf\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.4;\\npragma abicoder v2;\\n\\n/// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x7b367d72a3142c31fe6dc809205b2e95212079a11593deccfb0411c3e0abc609\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\\npragma solidity =0.8.4;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n}\\n\",\"keccak256\":\"0x835bf8872f3689f25e420cc99ba7c70d0877c746312356df9ff0ec792e4fd7ff\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x027f79659aea02845423eb96cfc4f926efb2214745463e3cbcfe4e4c24a065d9\",\"license\":\"MIT\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.4;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(\\n                        add(tempBytes, lengthmod),\\n                        mul(0x20, iszero(lengthmod))\\n                    )\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(\\n                            add(\\n                                add(_bytes, lengthmod),\\n                                mul(0x20, iszero(lengthmod))\\n                            ),\\n                            _start\\n                        )\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint24)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xbc69a9dd251991910e68cef3a97810e4154de96c0dcf3931609882f58d7f9d7a\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 oTokenPremium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocation;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\n\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            DSMath\\n                .wmul(\\n                oTokenSellAmount.mul(10**10),\\n                auctionDetails\\n                    .oTokenPremium\\n            )\\n                .div(10**(uint256(18).sub(auctionDetails.assetDecimals)));\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of oToken we minted and are selling\\n            auctionDetails.oTokenAddress,\\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\\n            auctionDetails.asset,\\n            // orders can be cancelled at any time during the auction\\n            auctionEnd,\\n            // order will last for `duration`\\n            auctionEnd,\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.oTokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            .mul(bidDetails.optionAllocation)\\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\\n            .div(bidDetails.optionPremium)\\n            .div(10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.oTokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n\\n        return (sellAmount, buyAmount, userId);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address oTokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but otokens will be transferred to gnosis.\\n        uint256 oTokenSellAmount =\\n            IERC20(oTokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        return oTokenSellAmount;\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        uint256 optionPremium =\\n            premiumPricer.getPremium(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x135c9d8faacd784cae610486c10f95b263ca8e9178524c026ce00c036b663122\",\"license\":\"MIT\"},\"contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\\npragma solidity =0.8.4;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH =\\n        POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x6a41d695705efc4116fece0e2986437d8f033cf8278744b5e673a94f33b4933d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x90bc4b56ee48f314d1e326903bdb2926bed143fa4e6867a7d44975503106bf56\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/UniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISwapRouter} from \\\"../interfaces/ISwapRouter.sol\\\";\\nimport {IUniswapV3Factory} from \\\"../interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"./Path.sol\\\";\\n\\nlibrary UniswapRouter {\\n    using Path for bytes;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Check if the path set for swap is valid\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @param validTokenIn is the contract address of the correct tokenIn\\n     * @param validTokenOut is the contract address of the correct tokenOut\\n     * @param uniswapFactory is the contract address of UniswapV3 factory\\n     * @return isValidPath is whether the path is valid\\n     */\\n    function checkPath(\\n        bytes memory swapPath,\\n        address validTokenIn,\\n        address validTokenOut,\\n        address uniswapFactory\\n    ) public view returns (bool isValidPath) {\\n        // Function checks if the tokenIn and tokenOut in the swapPath\\n        // matches the validTokenIn and validTokenOut specified.\\n        address tokenIn;\\n        address tokenOut;\\n        address tempTokenIn;\\n        uint24 fee;\\n        IUniswapV3Factory factory = IUniswapV3Factory(uniswapFactory);\\n\\n        // Return early if swapPath is below the bare minimum (43)\\n        require(swapPath.length >= 43, \\\"Path too short\\\");\\n        // Return early if swapPath is above the max (66)\\n        // At worst we have 2 hops e.g. USDC > WETH > asset\\n        require(swapPath.length <= 66, \\\"Path too long\\\");\\n\\n        // Decode the first pool in path\\n        (tokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\\n\\n        // Check to factory if pool exists\\n        require(\\n            factory.getPool(tokenIn, tokenOut, fee) != address(0),\\n            \\\"Pool does not exist\\\"\\n        );\\n\\n        // Check next pool if multiple pools\\n        while (swapPath.hasMultiplePools()) {\\n            // Remove the first pool from path\\n            swapPath = swapPath.skipToken();\\n            // Check the next pool and update tokenOut\\n            (tempTokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\\n\\n            require(\\n                factory.getPool(tokenIn, tokenOut, fee) != address(0),\\n                \\\"Pool does not exist\\\"\\n            );\\n        }\\n\\n        return tokenIn == validTokenIn && tokenOut == validTokenOut;\\n    }\\n\\n    /**\\n     * @notice Swaps assets by calling UniswapV3 router\\n     * @param recipient is the address of recipient of the tokenOut\\n     * @param tokenIn is the address of the token given to the router\\n     * @param amountIn is the amount of tokenIn given to the router\\n     * @param minAmountOut is the minimum acceptable amount of tokenOut received from swap\\n     * @param router is the contract address of UniswapV3 router\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @return amountOut is the amount of tokenOut received from the swap\\n     */\\n    function swap(\\n        address recipient,\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address router,\\n        bytes calldata swapPath\\n    ) internal returns (uint256 amountOut) {\\n        // Approve router to spend tokenIn\\n        IERC20(tokenIn).safeApprove(router, amountIn);\\n\\n        // Swap assets using UniswapV3 router\\n        ISwapRouter.ExactInputParams memory swapParams =\\n            ISwapRouter.ExactInputParams({\\n                recipient: recipient,\\n                path: swapPath,\\n                deadline: block.timestamp.add(10 minutes),\\n                amountIn: amountIn,\\n                amountOutMinimum: minAmountOut\\n            });\\n\\n        amountOut = ISwapRouter(router).exactInput(swapParams);\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0x44ceef375c28f791505f10f2a15c9b0d52775d444e2d4ebedcfcebca5e73abd5\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x462aa30f83c322d3129ded8da0d5f8430425a04c8c2d87787f33d7d5c41c1571\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\nimport {UniswapRouter} from \\\"./UniswapRouter.sol\\\";\\n\\nlibrary VaultLifecycle {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverrideRound;\\n        uint256 overriddenStrikePrice;\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param strikeSelection is the address of the contract with strike selection logic\\n     * @param optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param premiumDiscount is the vault's discount applied to the premium\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        address strikeSelection,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry;\\n\\n        // uninitialized state\\n        if (closeParams.currentOption == address(0)) {\\n            expiry = getNextFriday(block.timestamp);\\n        } else {\\n            expiry = getNextFriday(\\n                IOtoken(closeParams.currentOption).expiryTimestamp()\\n            );\\n        }\\n\\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        // get the black scholes premium of the option\\n        premium = GnosisAuction.getOTokenPremium(\\n            otokenAddress,\\n            optionsPremiumPricer,\\n            premiumDiscount\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param asset is the address of the vault's asset\\n     * @param decimals is the decimals of the asset\\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        uint256 balanceForVaultFees;\\n        {\\n            uint256 pricePerShareBeforeFee =\\n                ShareMath.pricePerShare(\\n                    params.currentShareSupply,\\n                    currentBalance,\\n                    pendingAmount,\\n                    params.decimals\\n                );\\n\\n            uint256 queuedWithdrawBeforeFee =\\n                params.currentShareSupply > 0\\n                    ? ShareMath.sharesToAsset(\\n                        queuedWithdrawShares,\\n                        pricePerShareBeforeFee,\\n                        params.decimals\\n                    )\\n                    : 0;\\n\\n            // Deduct the difference between the newly scheduled withdrawals\\n            // and the older withdrawals\\n            // so we can charge them fees before they leave\\n            uint256 withdrawAmountDiff =\\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\\n                    ? queuedWithdrawBeforeFee.sub(\\n                        params.lastQueuedWithdrawAmount\\n                    )\\n                    : 0;\\n\\n            balanceForVaultFees = currentBalance\\n                .sub(queuedWithdrawBeforeFee)\\n                .add(withdrawAmountDiff);\\n        }\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycle\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance.sub(totalVaultFee);\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply,\\n                currentBalance,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n\\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\\n\\n            queuedWithdrawAmount = newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    queuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                )\\n                : 0;\\n        }\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\n                .mul(10**18) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n\\n            if (collateralDecimals > 8) {\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n                if (mintAmount > scaleBy) {\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                }\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param oldOption is the address of the old option\\n     * @param asset is the address of the vault's asset\\n     * @return amount of asset received by exercising the option\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param currentOption is the address of the current option\\n     * @return amount of collateral redeemed by burning otokens\\n     */\\n    function burnOtokens(address gammaController, address currentOption)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 numOTokensToBurn =\\n            IERC20(currentOption).balanceOf(address(this));\\n\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\n\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning `amount` of oTokens from the ribbon vault,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            numOTokensToBurn, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\n                vault.shortAmounts[0]\\n            ), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance.sub(pendingAmount)\\n                : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? lockedBalanceSansPending\\n                    .sub(lastLockedAmount)\\n                    .mul(performanceFeePercent)\\n                    .div(100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\\n                    100 * Vault.FEE_MULTIPLIER\\n                )\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrice is the strike price of the option\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return the address of the option\\n     */\\n    function getOrDeployOtoken(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(\\n            otoken,\\n            vaultParams,\\n            collateralAsset,\\n            closeParams.USDC,\\n            closeParams.delay\\n        );\\n\\n        return otoken;\\n    }\\n\\n    /**\\n     * @notice Starts the gnosis auction\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\n     * @return the auction id of the newly created auction\\n     */\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Settles the gnosis auction\\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\\n     * @param auctionID is the auction ID of the gnosis easy auction\\n     */\\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\\n        internal\\n    {\\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\\n    }\\n\\n    /**\\n     * @notice Swaps tokens using UniswapV3 router\\n     * @param tokenIn is the token address to swap\\n     * @param minAmountOut is the minimum acceptable amount of tokenOut received from swap\\n     * @param router is the contract address of UniswapV3 router\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     */\\n    function swap(\\n        address tokenIn,\\n        uint256 minAmountOut,\\n        address router,\\n        bytes calldata swapPath\\n    ) external {\\n        uint256 balance = IERC20(tokenIn).balanceOf(address(this));\\n\\n        if (balance > 0) {\\n            UniswapRouter.swap(\\n                address(this),\\n                tokenIn,\\n                balance,\\n                minAmountOut,\\n                router,\\n                swapPath\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Places a bid in an auction\\n     * @param bidDetails is the struct with all the details of the\\n      bid including the auction's id and how much to bid\\n     */\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\n        external\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        return GnosisAuction.placeBid(bidDetails);\\n    }\\n\\n    /**\\n     * @notice Claims the oTokens belonging to the vault\\n     * @param auctionSellOrder is the sell order of the bid\\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\\n     holding custody to the funds\\n     * @param counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     */\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) external {\\n        GnosisAuction.claimAuctionOtokens(\\n            auctionSellOrder,\\n            gnosisEasyAuction,\\n            counterpartyThetaVault\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param owner is the owner of the vault with critical permissions\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        address owner,\\n        address keeper,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param currentExpiry is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 currentExpiry)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((currentExpiry / 1 days) + 4) % 7;\\n        uint256 nextFriday = currentExpiry + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed currentExpiry is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (currentExpiry >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n}\\n\",\"keccak256\":\"0xffe078b7024a6e33876b90632334e56fec8d4228d29119efe86d623a2793337c\",\"license\":\"MIT\"},\"contracts/storage/RibbonThetaVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nabstract contract RibbonThetaVaultStorageV1 {\\n    // Logic contract used to price options\\n    address public optionsPremiumPricer;\\n    // Logic contract used to select strike prices\\n    address public strikeSelection;\\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\\n    uint256 public premiumDiscount;\\n    // Current oToken premium\\n    uint256 public currentOtokenPremium;\\n    // Last round id at which the strike was manually overridden\\n    uint16 public lastStrikeOverrideRound;\\n    // Price last overridden strike set to\\n    uint256 public overriddenStrikePrice;\\n    // Auction duration\\n    uint256 public auctionDuration;\\n    // Auction id of current option\\n    uint256 public optionAuctionID;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV3 {\\n    // Auction will be denominated in USDC if true\\n    bool public isUsdcAuction;\\n    // Path for swaps\\n    bytes public swapPath;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\\nabstract contract RibbonThetaVaultStorage is\\n    RibbonThetaVaultStorageV1,\\n    RibbonThetaVaultStorageV2,\\n    RibbonThetaVaultStorageV3\\n{\\n\\n}\\n\",\"keccak256\":\"0x38bab8b01043d56c691fb83b32e45325841d63ab5905259b7812674034646f15\",\"license\":\"MIT\"},\"contracts/vaults/BaseVaults/RibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {\\n    RibbonThetaVaultStorage\\n} from \\\"../../storage/RibbonThetaVaultStorage.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\nimport {UniswapRouter} from \\\"../../libraries/UniswapRouter.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\\n */\\ncontract RibbonThetaVault is RibbonVault, RibbonThetaVaultStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable OTOKEN_FACTORY;\\n\\n    // The minimum duration for an option auction.\\n    uint256 private constant MIN_AUCTION_DURATION = 1 hours;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenShort(\\n        address indexed options,\\n        uint256 depositAmount,\\n        address indexed manager\\n    );\\n\\n    event CloseShort(\\n        address indexed options,\\n        uint256 withdrawAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\n\\n    event PremiumDiscountSet(\\n        uint256 premiumDiscount,\\n        uint256 newPremiumDiscount\\n    );\\n\\n    event AuctionDurationSet(\\n        uint256 auctionDuration,\\n        uint256 newAuctionDuration\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    /************************************************\\n     *  STRUCTS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initialization parameters for the vault.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\n     * @param _auctionDuration is the duration of the gnosis auction\\n     * @param _isUsdcAuction is whether Gnosis auction should be denominated in USDC\\n     * @param _swapPath is the path for swapping\\n     */\\n    struct InitParams {\\n        address _owner;\\n        address _keeper;\\n        address _feeRecipient;\\n        uint256 _managementFee;\\n        uint256 _performanceFee;\\n        string _tokenName;\\n        string _tokenSymbol;\\n        address _optionsPremiumPricer;\\n        address _strikeSelection;\\n        uint32 _premiumDiscount;\\n        uint256 _auctionDuration;\\n        bool _isUsdcAuction;\\n        bytes _swapPath;\\n    }\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _uniswapRouter is the contract address of UniswapV3 router that handles swaps\\n     * @param _uniswapFactory is the contract address of UniswapV3 factory containing\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _uniswapRouter,\\n        address _uniswapFactory\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction,\\n            _uniswapRouter,\\n            _uniswapFactory\\n        )\\n    {\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        OTOKEN_FACTORY = _oTokenFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _initParams is the struct with vault initialization parameters\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        InitParams calldata _initParams,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _initParams._owner,\\n            _initParams._keeper,\\n            _initParams._feeRecipient,\\n            _initParams._managementFee,\\n            _initParams._performanceFee,\\n            _initParams._tokenName,\\n            _initParams._tokenSymbol,\\n            _vaultParams\\n        );\\n        require(\\n            _initParams._optionsPremiumPricer != address(0),\\n            \\\"!_optionsPremiumPricer\\\"\\n        );\\n        require(\\n            _initParams._strikeSelection != address(0),\\n            \\\"!_strikeSelection\\\"\\n        );\\n        require(\\n            _initParams._premiumDiscount > 0 &&\\n                _initParams._premiumDiscount <\\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"!_premiumDiscount\\\"\\n        );\\n        require(\\n            _initParams._auctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"!_auctionDuration\\\"\\n        );\\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\\n        strikeSelection = _initParams._strikeSelection;\\n        premiumDiscount = _initParams._premiumDiscount;\\n        auctionDuration = _initParams._auctionDuration;\\n\\n        isUsdcAuction = _initParams._isUsdcAuction;\\n        if (_initParams._isUsdcAuction) {\\n            require(_checkPath(_initParams._swapPath), \\\"\\\");\\n            swapPath = _initParams._swapPath;\\n        }\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new discount on premiums for options we are selling\\n     * @param newPremiumDiscount is the premium discount\\n     */\\n    function setPremiumDiscount(uint256 newPremiumDiscount) external onlyOwner {\\n        require(\\n            newPremiumDiscount > 0 &&\\n                newPremiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"Invalid discount\\\"\\n        );\\n\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\n\\n        premiumDiscount = newPremiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the new auction duration\\n     * @param newAuctionDuration is the auction duration\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\n        require(\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"Invalid auction duration\\\"\\n        );\\n\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\n\\n        auctionDuration = newAuctionDuration;\\n    }\\n\\n    /**\\n     * @notice Sets the new strike selection contract\\n     * @param newStrikeSelection is the address of the new strike selection contract\\n     */\\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\\n        require(newStrikeSelection != address(0), \\\"!newStrikeSelection\\\");\\n        strikeSelection = newStrikeSelection;\\n    }\\n\\n    /**\\n     * @notice Sets the new options premium pricer contract\\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\\n     */\\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newOptionsPremiumPricer != address(0),\\n            \\\"!newOptionsPremiumPricer\\\"\\n        );\\n        optionsPremiumPricer = newOptionsPremiumPricer;\\n    }\\n\\n    /**\\n     * @notice Optionality to set strike price manually\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\n     */\\n    function setStrikePrice(uint128 strikePrice)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\n        overriddenStrikePrice = strikePrice;\\n        lastStrikeOverrideRound = vaultState.round;\\n    }\\n\\n    /**\\n     * @notice Sets a new path for swaps\\n     * @param newSwapPath is the new path\\n     */\\n    function setSwapPath(bytes calldata newSwapPath)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(isUsdcAuction, \\\"!isUsdcAuction\\\");\\n        require(_checkPath(newSwapPath), \\\"Invalid swap path\\\");\\n        swapPath = newSwapPath;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw\\n     */\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending).sub(amount)\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        transferAsset(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        VaultLifecycle.CloseParams memory closeParams =\\n            VaultLifecycle.CloseParams({\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\n                USDC: USDC,\\n                currentOption: oldOption,\\n                delay: DELAY,\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\n                overriddenStrikePrice: overriddenStrikePrice\\n            });\\n\\n        (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        ) =\\n            VaultLifecycle.commitAndClose(\\n                strikeSelection,\\n                optionsPremiumPricer,\\n                premiumDiscount,\\n                closeParams,\\n                vaultParams,\\n                vaultState\\n            );\\n\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\n\\n        ShareMath.assertUint104(premium);\\n        currentOtokenPremium = uint104(premium);\\n        optionState.nextOption = otokenAddress;\\n\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        _closeShort(oldOption);\\n    }\\n\\n    /**\\n     * @notice Closes the existing short position for the vault.\\n     */\\n    function _closeShort(address oldOption) private {\\n        uint256 lockedAmount = vaultState.lockedAmount;\\n        if (oldOption != address(0)) {\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\n        }\\n        vaultState.lockedAmount = 0;\\n\\n        optionState.currentOption = address(0);\\n\\n        if (oldOption != address(0)) {\\n            uint256 withdrawAmount =\\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\n        (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        ) = _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        ShareMath.assertUint104(lockedBalance);\\n        vaultState.lockedAmount = uint104(lockedBalance);\\n\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\n\\n        VaultLifecycle.createShort(\\n            GAMMA_CONTROLLER,\\n            MARGIN_POOL,\\n            newOption,\\n            lockedBalance\\n        );\\n\\n        _startAuction();\\n    }\\n\\n    /**\\n     * @notice Initiate the gnosis auction.\\n     */\\n    function startAuction() external onlyKeeper nonReentrant {\\n        _startAuction();\\n    }\\n\\n    function _startAuction() private {\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\n\\n        uint256 currOtokenPremium = currentOtokenPremium;\\n\\n        require(currOtokenPremium > 0, \\\"!currentOtokenPremium\\\");\\n\\n        bool _isUsdcAuction = isUsdcAuction;\\n        auctionDetails.oTokenAddress = optionState.currentOption;\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        auctionDetails.asset = _isUsdcAuction ? USDC : vaultParams.asset;\\n        auctionDetails.assetDecimals = _isUsdcAuction\\n            ? 6\\n            : vaultParams.decimals;\\n        auctionDetails.oTokenPremium = currOtokenPremium;\\n        auctionDetails.duration = auctionDuration;\\n\\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\n     */\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\n        uint256 unlockedAssetAmount =\\n            VaultLifecycle.burnOtokens(\\n                GAMMA_CONTROLLER,\\n                optionState.currentOption\\n            );\\n\\n        vaultState.lockedAmount = uint104(\\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Settle USDC auction and swap the proceeds to underlying asset\\n     * @param minAmountOut is the minimum amount of underlying acceptable for the swap\\n     */\\n    function settleAuctionAndSwap(uint256 minAmountOut)\\n        external\\n        onlyKeeper\\n        nonReentrant\\n    {\\n        require(isUsdcAuction, \\\"!isUsdcAuction\\\");\\n        require(minAmountOut > 0, \\\"!minAmountOut\\\");\\n\\n        VaultLifecycle.settleAuction(GNOSIS_EASY_AUCTION, optionAuctionID);\\n\\n        VaultLifecycle.swap(USDC, minAmountOut, UNISWAP_ROUTER, swapPath);\\n    }\\n}\\n\",\"keccak256\":\"0x90150dc8f45dd8c64ec8b474efa6fb3c906752361cb1ef589921eb8a69e41274\",\"license\":\"MIT\"},\"contracts/vaults/BaseVaults/base/RibbonVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {Vault} from \\\"../../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../../libraries/ShareMath.sol\\\";\\nimport {UniswapRouter} from \\\"../../../libraries/UniswapRouter.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\ncontract RibbonVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n    uint256[30] private ____gap;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 15 minutes;\\n\\n    /// @notice 7 day period between each options sale.\\n    uint256 public constant PERIOD = 7 days;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    // UNISWAP_ROUTER is the contract address of UniswapV3 Router which handles swaps\\n    // https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\n    address public immutable UNISWAP_ROUTER;\\n\\n    // UNISWAP_FACTORY is the contract address of UniswapV3 Factory which stores pool information\\n    // https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\\n    address public immutable UNISWAP_FACTORY;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _uniswapRouter is the contract address for UniswapV3 router which handles swaps\\n     * @param _uniswapFactory is the contract address for UniswapV3 factory\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _uniswapRouter,\\n        address _uniswapFactory\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_uniswapRouter != address(0), \\\"!_uniswapRouter\\\");\\n        require(_uniswapFactory != address(0), \\\"!_uniswapFactory\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n        UNISWAP_ROUTER = _uniswapRouter;\\n        UNISWAP_FACTORY = _uniswapFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function baseInitialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) internal initializer {\\n        VaultLifecycle.verifyInitializerParams(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _performanceFee,\\n            _managementFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        keeper = _keeper;\\n\\n        feeRecipient = _feeRecipient;\\n        performanceFee = _performanceFee;\\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\\n            WEEKS_PER_YEAR\\n        );\\n        vaultParams = _vaultParams;\\n\\n        uint256 assetBalance =\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\\n     */\\n    function depositETH() external payable nonReentrant {\\n        require(vaultParams.asset == WETH, \\\"!WETH\\\");\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        _depositFor(msg.value, msg.sender);\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param amount is the amount of `asset` to deposit\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(uint256 amount, address creditor)\\n        external\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"!amount\\\");\\n        require(creditor != address(0));\\n\\n        _depositFor(amount, creditor);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n        transferAsset(msg.sender, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /*\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /*\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @return newOption is the new option address\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n     */\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\n        internal\\n        returns (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        )\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        address recipient = feeRecipient;\\n        uint256 mintShares;\\n        uint256 performanceFeeInAsset;\\n        uint256 totalVaultFee;\\n        {\\n            uint256 newPricePerShare;\\n            (\\n                lockedBalance,\\n                queuedWithdrawAmount,\\n                newPricePerShare,\\n                mintShares,\\n                performanceFeeInAsset,\\n                totalVaultFee\\n            ) = VaultLifecycle.rollover(\\n                vaultState,\\n                VaultLifecycle.RolloverParams(\\n                    vaultParams.decimals,\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee\\n                )\\n            );\\n\\n            optionState.currentOption = newOption;\\n            optionState.nextOption = address(0);\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                recipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n        }\\n\\n        _mint(address(this), mintShares);\\n\\n        if (totalVaultFee > 0) {\\n            transferAsset(payable(recipient), totalVaultFee);\\n        }\\n\\n        return (newOption, lockedBalance, queuedWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) internal {\\n        address asset = vaultParams.asset;\\n        if (asset == WETH) {\\n            IWETH(WETH).withdraw(amount);\\n            (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            return;\\n        }\\n        IERC20(asset).safeTransfer(recipient, amount);\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        return\\n            uint256(vaultState.lockedAmount).add(\\n                IERC20(vaultParams.asset).balanceOf(address(this))\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Helper to check whether swap path goes from stables (USDC) to vault's underlying asset\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @return boolean whether the path is valid\\n     */\\n    function _checkPath(bytes calldata swapPath) internal view returns (bool) {\\n        return\\n            UniswapRouter.checkPath(\\n                swapPath,\\n                USDC,\\n                vaultParams.asset,\\n                UNISWAP_FACTORY\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0342948afe92e7c8d33a918cbc3a8aea807730303782ad45bcd792a19ef1a35d\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b506040516200628b3803806200628b83398101604081905262000035916200030b565b878786868686866001600160a01b038716620000815760405162461bcd60e51b8152602060048201526006602482015265042beeecae8d60d31b60448201526064015b60405180910390fd5b6001600160a01b038616620000c25760405162461bcd60e51b8152602060048201526006602482015265215f7573646360d01b604482015260640162000078565b6001600160a01b0383166200011a5760405162461bcd60e51b815260206004820152601360248201527f215f676e6f7369734561737941756374696f6e00000000000000000000000000604482015260640162000078565b6001600160a01b038516620001665760405162461bcd60e51b815260206004820152601160248201527010afb3b0b6b6b0a1b7b73a3937b63632b960791b604482015260640162000078565b6001600160a01b038416620001ad5760405162461bcd60e51b815260206004820152600c60248201526b0857db585c99da5b941bdbdb60a21b604482015260640162000078565b6001600160a01b038216620001f75760405162461bcd60e51b815260206004820152600f60248201526e10afbab734b9bbb0b82937baba32b960891b604482015260640162000078565b6001600160a01b038116620002425760405162461bcd60e51b815260206004820152601060248201526f215f756e6973776170466163746f727960801b604482015260640162000078565b6001600160601b0319606097881b811660805295871b861660a05293861b851660c05291851b841660e052841b831661010052831b82166101205290911b16610140526001600160a01b038616620002cf5760405162461bcd60e51b815260206004820152600f60248201526e215f6f546f6b656e466163746f727960881b604482015260640162000078565b505050505060601b6001600160601b0319166101605250620003b29050565b80516001600160a01b03811681146200030657600080fd5b919050565b600080600080600080600080610100898b03121562000328578384fd5b6200033389620002ee565b97506200034360208a01620002ee565b96506200035360408a01620002ee565b95506200036360608a01620002ee565b94506200037360808a01620002ee565b93506200038360a08a01620002ee565b92506200039360c08a01620002ee565b9150620003a360e08a01620002ee565b90509295985092959890939650565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c615de4620004a760003960008181610f2501526128ab015260008181610e270152613ff5015260008181610ed101526124ac015260008181610902015281816124320152613bc901526000818161081f01526122ac0152600081816105290152818161182f0152818161228401526144f9015260008181610a9301528181612488015281816128d001528181613c0f0152613fc3015260008181610d5201528181612fbd015281816130690152818161360701526136440152615de46000f3fe60806040526004361061047e5760003560e01c806395d89b4111610255578063c74c0fac11610144578063df5af13f116100c1578063f60f764511610085578063f60f764514611027578063f6326fb314611047578063f656ba511461104f578063f756fa2114611084578063f957a06714611099578063fe56e232146110b957600080fd5b8063df5af13f14610fa7578063e73c63d514610fbc578063e74b981b14610fd2578063ea00b1ca14610ff2578063f2fde38b1461100757600080fd5b8063d826492011610108578063d826492014610ebf578063db006a7514610ef3578063db43e86214610f13578063dc4e9bef14610f47578063dd62ed3e14610f6157600080fd5b8063c74c0fac14610e15578063ce7c2ac214610e49578063d13f1b3e14610e69578063d164cc1514610e89578063d5f2638214610ea957600080fd5b8063a6f7f5d6116101d2578063afa6626411610196578063afa6626414610d89578063b4d1d79514610da9578063b6b55f2514610dc0578063b9f8092b14610de0578063be9d7d5714610df557600080fd5b8063a6f7f5d614610cea578063a9059cbb14610d00578063aced166114610d20578063ad5c464814610d40578063ad7a672f14610d7457600080fd5b8063a083ff1711610219578063a083ff1714610c07578063a285c9e814610c6a578063a2db9d8314610c8c578063a457c2d714610caa578063a497e67414610cca57600080fd5b806395d89b4114610af1578063980db6f414610b0657806399530b0614610b265780639be43daa14610b3b5780639fcc2d7514610b5b57600080fd5b8063503c70aa1161037157806370a08231116102ee57806387153eb1116102b257806387153eb114610a3e5780638778878214610a6b57806389a3027114610a815780638b10cc7c14610ab55780638da5cb5b14610ad357600080fd5b806370a0823114610959578063715018a61461098f5780637a9262a2146109a45780637e108d5214610a0857806383536ff314610a2857600080fd5b806369b411701161033557806369b41170146108c55780636b64c769146108db5780636c10f66c146108f05780636f31ab341461092457806370897b231461093957600080fd5b8063503c70aa146107c257806355489bb2146107d8578063600a2cfb146107f8578063650cce8a1461080d5780636719b2ee1461084157600080fd5b8063355274ea116103ff5780633f90916a116103c35780633f90916a1461072e578063432833a61461074c5780634603c0aa14610762578063469048401461078257806347786d37146107a257600080fd5b8063355274ea1461068257806336efd16f146106a057806339509351146106c05780633ec143d3146106e05780633f23bb731461070e57600080fd5b806323b872dd1161044657806323b872dd146105635780632728f333146105835780632775d01c1461061657806330630da414610638578063313ce5671461065857600080fd5b806306fdde0314610483578063095ea7b3146104ae5780630cbf54c8146104de57806318160ddd146105025780631a92f6c214610517575b600080fd5b34801561048f57600080fd5b506104986110d9565b6040516104a591906158ce565b60405180910390f35b3480156104ba57600080fd5b506104ce6104c9366004615423565b61116b565b60405190151581526020016104a5565b3480156104ea57600080fd5b506104f460fb5481565b6040519081526020016104a5565b34801561050e57600080fd5b506099546104f4565b34801561052357600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016104a5565b34801561056f57600080fd5b506104ce61057e3660046153e3565b611182565b34801561058f57600080fd5b5060cf5460d0546105d19161ffff8116916001600160681b03620100008304811692600160781b900416906001600160801b0380821691600160801b90041685565b6040805161ffff90961686526001600160681b03948516602087015293909216928401929092526001600160801b03918216606084015216608082015260a0016104a5565b34801561062257600080fd5b506106366106313660046155cc565b611233565b005b34801561064457600080fd5b5061063661065336600461538f565b6113d6565b34801561066457600080fd5b5060cc54610100900460ff1660405160ff90911681526020016104a5565b34801561068e57600080fd5b5060ce546001600160681b03166104f4565b3480156106ac57600080fd5b506106366106bb3660046155e4565b61146e565b3480156106cc57600080fd5b506104ce6106db366004615423565b6114f6565b3480156106ec57600080fd5b5060f9546106fb9061ffff1681565b60405161ffff90911681526020016104a5565b34801561071a57600080fd5b506104f461072936600461538f565b611532565b34801561073a57600080fd5b5060d0546001600160801b03166104f4565b34801561075857600080fd5b506104f460fc5481565b34801561076e57600080fd5b5061063661077d36600461538f565b611585565b34801561078e57600080fd5b5060d35461054b906001600160a01b031681565b3480156107ae57600080fd5b506106366107bd3660046155cc565b611627565b3480156107ce57600080fd5b506104f460fd5481565b3480156107e457600080fd5b506106366107f33660046155a5565b611702565b34801561080457600080fd5b506106366117c3565b34801561081957600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561084d57600080fd5b5061089461085c36600461538f565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b0316908201526060016104a5565b3480156108d157600080fd5b506104f461038481565b3480156108e757600080fd5b5061063661191e565b3480156108fc57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561093057600080fd5b5061063661197e565b34801561094557600080fd5b506106366109543660046155cc565b6119b5565b34801561096557600080fd5b506104f461097436600461538f565b6001600160a01b031660009081526097602052604090205490565b34801561099b57600080fd5b50610636611a7c565b3480156109b057600080fd5b506109e66109bf36600461538f565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b039091166020830152016104a5565b348015610a1457600080fd5b50610636610a233660046155cc565b611ab2565b348015610a3457600080fd5b506104f460f75481565b348015610a4a57600080fd5b506104f4610a593660046155cc565b60ca6020526000908152604090205481565b348015610a7757600080fd5b506104f460d55481565b348015610a8d57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610ac157600080fd5b5060d2546001600160a01b031661054b565b348015610adf57600080fd5b506065546001600160a01b031661054b565b348015610afd57600080fd5b50610498611ced565b348015610b1257600080fd5b50610636610b213660046154dc565b611cfc565b348015610b3257600080fd5b506104f4611df0565b348015610b4757600080fd5b50610636610b563660046155cc565b611e2a565b348015610b6757600080fd5b5060cc5460cd5460ce54610bb79260ff808216936101008304909116926001600160a01b036201000090930483169282169166ffffffffffffff600160a01b90910416906001600160681b031686565b60408051961515875260ff90951660208701526001600160a01b03938416948601949094529116606084015266ffffffffffffff1660808301526001600160681b031660a082015260c0016104a5565b348015610c1357600080fd5b5060d15460d254610c3e916001600160a01b039081169190811690600160a01b900463ffffffff1683565b604080516001600160a01b03948516815293909216602084015263ffffffff16908201526060016104a5565b348015610c7657600080fd5b5060d254600160a01b900463ffffffff166104f4565b348015610c9857600080fd5b5060d1546001600160a01b031661054b565b348015610cb657600080fd5b506104ce610cc5366004615423565b611f1b565b348015610cd657600080fd5b50610636610ce53660046155cc565b611fb4565b348015610cf657600080fd5b506104f460d65481565b348015610d0c57600080fd5b506104ce610d1b366004615423565b612071565b348015610d2c57600080fd5b5060d45461054b906001600160a01b031681565b348015610d4c57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610d8057600080fd5b506104f461207e565b348015610d9557600080fd5b5060f55461054b906001600160a01b031681565b348015610db557600080fd5b506104f462093a8081565b348015610dcc57600080fd5b50610636610ddb3660046155cc565b61211d565b348015610dec57600080fd5b50610636612191565b348015610e0157600080fd5b50610636610e103660046155cc565b612358565b348015610e2157600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610e5557600080fd5b506104f4610e6436600461538f565b61250e565b348015610e7557600080fd5b50610636610e843660046155cc565b61252b565b348015610e9557600080fd5b50610636610ea436600461538f565b6125ef565b348015610eb557600080fd5b506104f460f85481565b348015610ecb57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610eff57600080fd5b50610636610f0e3660046155cc565b61267e565b348015610f1f57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610f5357600080fd5b5060fe546104ce9060ff1681565b348015610f6d57600080fd5b506104f4610f7c3660046153ab565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b348015610fb357600080fd5b506104986126eb565b348015610fc857600080fd5b506104f460fa5481565b348015610fde57600080fd5b50610636610fed36600461538f565b612779565b348015610ffe57600080fd5b5061063661286c565b34801561101357600080fd5b5061063661102236600461538f565b612b14565b34801561103357600080fd5b50610636611042366004615549565b612baf565b610636612f90565b34801561105b57600080fd5b5061106f61106a36600461538f565b6130d6565b604080519283526020830191909152016104a5565b34801561109057600080fd5b506106366131b9565b3480156110a557600080fd5b5060f65461054b906001600160a01b031681565b3480156110c557600080fd5b506106366110d43660046155cc565b61320e565b6060609a80546110e890615bae565b80601f016020809104026020016040519081016040528092919081815260200182805461111490615bae565b80156111615780601f1061113657610100808354040283529160200191611161565b820191906000526020600020905b81548152906001019060200180831161114457829003601f168201915b5050505050905090565b60006111783384846132ef565b5060015b92915050565b600061118f848484613414565b6001600160a01b0384166000908152609860209081526040808320338452909152902054828110156112195760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61122685338584036132ef565b60019150505b9392505050565b600260015414156112565760405162461bcd60e51b8152600401611210906159a6565b600260015533600090815260c96020526040902060cf5461ffff168261128e5760405162461bcd60e51b815260040161121090615985565b815461ffff1681146112d25760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b6044820152606401611210565b81546201000090046001600160681b0316838110156113235760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b6044820152606401611210565b61132d81856135e4565b83546001600160681b0391909116620100000262010000600160781b031990911617835560d054611367906001600160801b0316856135e4565b60d080546001600160801b0319166001600160801b0392909216919091179055604080518581526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a26113cc33856135f0565b5050600180555050565b6065546001600160a01b031633146114005760405162461bcd60e51b815260040161121090615950565b6001600160a01b03811661144c5760405162461bcd60e51b815260206004820152601360248201527210b732bba9ba3934b5b2a9b2b632b1ba34b7b760691b6044820152606401611210565b60f680546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156114915760405162461bcd60e51b8152600401611210906159a6565b6002600155816114b35760405162461bcd60e51b815260040161121090615985565b6001600160a01b0381166114c657600080fd5b6114d08282613751565b60cc546114ee906201000090046001600160a01b03163330856139e3565b505060018055565b3360008181526098602090815260408083206001600160a01b0387168452909152812054909161117891859061152d908690615a29565b6132ef565b60cc5460009060ff610100909104168161156861154e60995490565b61155661207e565b60d0546001600160801b031685613a4e565b905061157d6115768561250e565b8284613a8e565b949350505050565b6065546001600160a01b031633146115af5760405162461bcd60e51b815260040161121090615950565b6001600160a01b0381166116055760405162461bcd60e51b815260206004820152601860248201527f216e65774f7074696f6e735072656d69756d50726963657200000000000000006044820152606401611210565b60f580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146116515760405162461bcd60e51b815260040161121090615950565b6000811161168b5760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b6044820152606401611210565b61169481613af0565b60ce54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160ce80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b6065546001600160a01b0316331461172c5760405162461bcd60e51b815260040161121090615950565b6002600154141561174f5760405162461bcd60e51b8152600401611210906159a6565b60026001556001600160801b0381166117995760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b6044820152606401611210565b6001600160801b031660fa5560cf5460f9805461ffff191661ffff90921691909117905560018055565b60d4546001600160a01b031633146117ed5760405162461bcd60e51b8152600401611210906158e1565b600260015414156118105760405162461bcd60e51b8152600401611210906159a6565b600260015560d2546040516358ffbb3d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116602482015260009073853cC5f4780D81e4e5C3649C2d1ad968338517da906358ffbb3d9060440160206040518083038186803b15801561189757600080fd5b505af41580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf91906154c4565b60cf549091506118ee906201000090046001600160681b0316826135e4565b60cf80546001600160681b0392909216620100000262010000600160781b03199092169190911790555060018055565b60d4546001600160a01b031633146119485760405162461bcd60e51b8152600401611210906158e1565b6002600154141561196b5760405162461bcd60e51b8152600401611210906159a6565b6002600155611978613b3a565b60018055565b600260015414156119a15760405162461bcd60e51b8152600401611210906159a6565b600260018190555061197860006001613d33565b6065546001600160a01b031633146119df5760405162461bcd60e51b815260040161121090615950565b6119ed620f42406064615b4c565b8110611a3b5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e6365206665650000000000000000006044820152606401611210565b60d55460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160d555565b6065546001600160a01b03163314611aa65760405162461bcd60e51b815260040161121090615950565b611ab06000613ee2565b565b60026001541415611ad55760405162461bcd60e51b8152600401611210906159a6565b600260015580611b145760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611210565b33600090815260c960205260409020546201000090046001600160681b0316151580611b5e575033600090815260c96020526040902054600160781b90046001600160801b031615155b15611b6f57611b6f60006001613d33565b60cf5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b031660008215611bf857611bf18287613f34565b9050611c5b565b8115611c3a5760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b6044820152606401611210565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b611c6481613f40565b33600090815260cb6020526040812080546001600160801b03808516620100000262010000600160901b03199092169190911790915560d054611cb091600160801b9091041688613f34565b9050611cbb81613f40565b60d080546001600160801b03808416600160801b029116179055611ce0333089613414565b5050600180555050505050565b6060609b80546110e890615bae565b6065546001600160a01b03163314611d265760405162461bcd60e51b815260040161121090615950565b60026001541415611d495760405162461bcd60e51b8152600401611210906159a6565b600260015560fe5460ff16611d915760405162461bcd60e51b815260206004820152600e60248201526d10b4b9aab9b231a0bab1ba34b7b760911b6044820152606401611210565b611d9b8282613f8a565b611ddb5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e6eec2e040e0c2e8d607b1b6044820152606401611210565b611de760ff838361525c565b50506001805550565b6000611e25611dfe60995490565b611e0661207e565b60d05460cc546001600160801b0390911690610100900460ff16613a4e565b905090565b60026001541415611e4d5760405162461bcd60e51b8152600401611210906159a6565b600260015580611e8c5760405162461bcd60e51b815260206004820152600a602482015269216e756d526f756e647360b01b6044820152606401611210565b60cf5461ffff1660005b82811015611de7576000611eaa8284615a29565b600081815260ca602052604090205490915015611ef75760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b6044820152606401611210565b600090815260ca602052604090206001905580611f1381615be9565b915050611e96565b3360009081526098602090815260408083206001600160a01b038616845290915281205482811015611f9d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401611210565b611faa33858584036132ef565b5060019392505050565b6065546001600160a01b03163314611fde5760405162461bcd60e51b815260040161121090615950565b610e108110156120305760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e206475726174696f6e00000000000000006044820152606401611210565b60fb5460408051918252602082018390527f5acd982e2240ed224a69aa03dab039d3797c108e4b5f288cd7dd6ca181b275f3910160405180910390a160fb55565b6000611178338484613414565b60cc546040516370a0823160e01b8152306004820152600091611e2591620100009091046001600160a01b0316906370a082319060240160206040518083038186803b1580156120cd57600080fd5b505afa1580156120e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210591906154c4565b60cf546201000090046001600160681b031690613f34565b600260015414156121405760405162461bcd60e51b8152600401611210906159a6565b6002600155806121625760405162461bcd60e51b815260040161121090615985565b61216c8133613751565b60cc5461218a906201000090046001600160a01b03163330846139e3565b5060018055565b60d4546001600160a01b031633146121bb5760405162461bcd60e51b8152600401611210906158e1565b600260015414156121de5760405162461bcd60e51b8152600401611210906159a6565b600260018190555060008060006121f660fd5461406d565b60fd8190559194509250905061220b82613af0565b60cf805462010000600160781b031916620100006001600160681b0385160217905560405182815233906001600160a01b038516907f045c558fdce4714c5816d53820d27420f4cd860892df203fe636384d8d19aa019060200160405180910390a3604051632904c23960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152841660448201526064810183905273853cC5f4780D81e4e5C3649C2d1ad968338517da90632904c2399060840160206040518083038186803b15801561231757600080fd5b505af415801561232b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234f91906154c4565b50611de7613b3a565b60d4546001600160a01b031633146123825760405162461bcd60e51b8152600401611210906158e1565b600260015414156123a55760405162461bcd60e51b8152600401611210906159a6565b600260015560fe5460ff166123ed5760405162461bcd60e51b815260206004820152600e60248201526d10b4b9aab9b231a0bab1ba34b7b760911b6044820152606401611210565b6000811161242d5760405162461bcd60e51b815260206004820152600d60248201526c085b5a5b905b5bdd5b9d13dd5d609a1b6044820152606401611210565b6124597f000000000000000000000000000000000000000000000000000000000000000060fc546143eb565b604051637f0f41d760e01b815273853cC5f4780D81e4e5C3649C2d1ad968338517da90637f0f41d7906124d7907f00000000000000000000000000000000000000000000000000000000000000009085907f00000000000000000000000000000000000000000000000000000000000000009060ff906004016157b7565b60006040518083038186803b1580156124ef57600080fd5b505af4158015612503573d6000803e3d6000fd5b505060018055505050565b600080600061251c846130d6565b909250905061157d8282613f34565b6065546001600160a01b031633146125555760405162461bcd60e51b815260040161121090615950565b60008111801561256f575061256c600a6064615b4c565b81105b6125ae5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908191a5cd8dbdd5b9d60821b6044820152606401611210565b60f75460408051918252602082018390527f4cd657fde404967d63a338fb06c5c98751a9df57dfae6dc333a432faf8a5f656910160405180910390a160f755565b6065546001600160a01b031633146126195760405162461bcd60e51b815260040161121090615950565b6001600160a01b03811661265c5760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401611210565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156126a15760405162461bcd60e51b8152600401611210906159a6565b6002600155806126e05760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611210565b61218a816000613d33565b60ff80546126f890615bae565b80601f016020809104026020016040519081016040528092919081815260200182805461272490615bae565b80156127715780601f1061274657610100808354040283529160200191612771565b820191906000526020600020905b81548152906001019060200180831161275457829003601f168201915b505050505081565b6065546001600160a01b031633146127a35760405162461bcd60e51b815260040161121090615950565b6001600160a01b0381166127ec5760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b6044820152606401611210565b60d3546001600160a01b038281169116141561284a5760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e7400000000000000006044820152606401611210565b60d380546001600160a01b0319166001600160a01b0392909216919091179055565b6002600154141561288f5760405162461bcd60e51b8152600401611210906159a6565b600260015560d2546040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000008116602083019081529381168284018181526103846060850190815260f95461ffff9081166080870190815260fa5460a0880190815260f65460f55460f7549a516334d0abdd60e21b815291891660048301528816602482015260448101999099528751871660648a0152985186166084890152925190941660a48701525160c48601525190911660e4840152925161010483015260cc61012483015260cf6101448301529060009081908190819073853cC5f4780D81e4e5C3649C2d1ad968338517da9063d342af74906101640160806040518083038186803b1580156129d657600080fd5b505af41580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e919061544e565b93509350935093507fa217999b1c125c2a996f712c5f26a28addad7167bd8a67d5bd5b2a751148abb08282604051612a50929190918252602082015260400190565b60405180910390a1612a6183613af0565b6001600160681b03831660f85560d180546001600160a01b0319166001600160a01b0386161790556000612a9742610384613f34565b905063ffffffff811115612aed5760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e526561647900000000000000006044820152606401611210565b60d2805463ffffffff60a01b1916600160a01b63ffffffff841602179055611ce087614465565b6065546001600160a01b03163314612b3e5760405162461bcd60e51b815260040161121090615950565b6001600160a01b038116612ba35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611210565b612bac81613ee2565b50565b600054610100900460ff1680612bc8575060005460ff16155b612be45760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015612c06576000805461ffff19166101011790555b612ccb612c16602085018561538f565b612c26604086016020870161538f565b612c36606087016040880161538f565b60608701356080880135612c4d60a08a018a6159dd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c8f9250505060c08b018b6159dd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506145db915050565b6000612cde610100850160e0860161538f565b6001600160a01b03161415612d2e5760405162461bcd60e51b815260206004820152601660248201527510afb7b83a34b7b739a83932b6b4bab6a83934b1b2b960511b6044820152606401611210565b6000612d426101208501610100860161538f565b6001600160a01b03161415612d8d5760405162461bcd60e51b815260206004820152601160248201527010afb9ba3934b5b2a9b2b632b1ba34b7b760791b6044820152606401611210565b6000612da161014085016101208601615651565b63ffffffff16118015612dd55750612dbb600a6064615b4c565b612dcd61014085016101208601615651565b63ffffffff16105b612e155760405162461bcd60e51b81526020600482015260116024820152700857dc1c995b5a5d5b511a5cd8dbdd5b9d607a1b6044820152606401611210565b610e108361014001351015612e605760405162461bcd60e51b815260206004820152601160248201527010afb0bab1ba34b7b7223ab930ba34b7b760791b6044820152606401611210565b612e71610100840160e0850161538f565b60f580546001600160a01b0319166001600160a01b0392909216919091179055612ea36101208401610100850161538f565b60f680546001600160a01b0319166001600160a01b0392909216919091179055612ed561014084016101208501615651565b63ffffffff1660f75561014083013560fb55612ef96101808401610160850161548c565b60fe805460ff1916911515919091179055612f1c6101808401610160850161548c565b15612f7957612f37612f326101808501856159dd565b613f8a565b612f5d5760405162461bcd60e51b81526020600482015260006024820152604401611210565b612f6b6101808401846159dd565b612f779160ff9161525c565b505b8015612f8b576000805461ff00191690555b505050565b60026001541415612fb35760405162461bcd60e51b8152600401611210906159a6565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166201000090920416146130245760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b6044820152606401611210565b6000341161305d5760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401611210565b6130673433613751565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130c257600080fd5b505af1158015612503573d6000803e3d6000fd5b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b031691810191909152829160011115613158575050506001600160a01b031660009081526097602052604081205491565b60cf54815161ffff908116600090815260ca602052604081205460cc54919361318e93869391169190610100900460ff1661481a565b90506131af856001600160a01b031660009081526097602052604090205490565b9590945092505050565b600260015414156131dc5760405162461bcd60e51b8152600401611210906159a6565b600260015560006131eb61488b565b60fd549091506131fb90826135e4565b6001600160801b031660fd555060018055565b6065546001600160a01b031633146132385760405162461bcd60e51b815260040161121090615950565b613246620f42406064615b4c565b811061328d5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b6044820152606401611210565b60006132aa63031ba3096132a484620f4240614a48565b90614a54565b60d65460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160d65550565b6001600160a01b0383166133515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611210565b6001600160a01b0382166133b25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611210565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166134785760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611210565b6001600160a01b0382166134da5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611210565b6001600160a01b038316600090815260976020526040902054818110156135525760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401611210565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613589908490615a29565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516135d591815260200190565b60405180910390a35b50505050565b600061122c8284615b6b565b60cc546001600160a01b03620100009091048116907f00000000000000000000000000000000000000000000000000000000000000001681141561373d57604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561369057600080fd5b505af11580156136a4573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146136f5576040519150601f19603f3d011682016040523d82523d6000602084013e6136fa565b606091505b50509050806135de5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401611210565b612f8b6001600160a01b0382168484614a60565b60cf5461ffff16600061376c8461376661207e565b90613f34565b60ce549091506001600160681b03168111156137b75760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b6044820152606401611210565b60cd54600160a01b900466ffffffffffffff168110156138105760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401611210565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc549192916138cf918491879190610100900460ff1661481a565b8251909150869061ffff168514156139005760208301516000906138fc906001600160681b031689613f34565b9150505b61390981613af0565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560d0546139af911689613f34565b90506139ba81613f40565b60d080546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526135de9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a90565b600080613a5c83600a615aa4565b905060008611613a6c5780613a84565b613a84866132a4613a7d88886135e4565b8490614a48565b9695505050505050565b600060018311613ad85760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611210565b61157d613ae683600a615aa4565b6132a48686614a48565b6001600160681b03811115612bac5760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401611210565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260f85480613bb45760405162461bcd60e51b81526020600482015260156024820152742163757272656e744f746f6b656e5072656d69756d60581b6044820152606401611210565b60fe5460d2546001600160a01b0390811684527f000000000000000000000000000000000000000000000000000000000000000016602084015260ff1680613c0d5760cc546201000090046001600160a01b0316613c2f565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b0316604084015280613c525760cc54610100900460ff16613c55565b60065b60ff16606084019081526080840183815260fb5460a0860190815260408051633baf17fd60e21b815287516001600160a01b03908116600483015260208901518116602483015291880151909116604482015292516064840152905160848301525160a482015273853cC5f4780D81e4e5C3649C2d1ad968338517da9063eebc5ff49060c40160206040518083038186803b158015613cf357600080fd5b505af4158015613d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d2b91906154c4565b60fc55505050565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cf5491865260ca9094529184205460cc5491949290931692613dae9185918591610100900460ff1661481a565b905083613dbb5784613dbd565b805b945084613dcb575050505050565b80851115613e0f5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401611210565b825161ffff16821115613e3c5733600090815260c960205260409020805462010000600160781b03191690555b613e4585613f40565b613e4f81866135e4565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92991613ec89189825261ffff16602082015260400190565b60405180910390a2613edb303387613414565b5050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061122c8284615a29565b6001600160801b03811115612bac5760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401611210565b60cc5460405163055a2bef60e41b81526000917314D4aE61f7143E4b48ffb8b6eF39a3dC31F0007F916355a2bef09161401d91879187917f0000000000000000000000000000000000000000000000000000000000000000916201000090046001600160a01b0316907f000000000000000000000000000000000000000000000000000000000000000090600401615881565b60206040518083038186803b15801561403557600080fd5b505af4158015614049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c91906154a8565b60d25460009081908190600160a01b900463ffffffff164210156140bc5760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b6044820152606401611210565b60d1546001600160a01b03169250826141055760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b6044820152606401611210565b60d3546040805160c08101825260cc54610100810460ff16825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373853cC5f4780D81e4e5C3649C2d1ad968338517da9363633c14269360cf939092602084019262010000900416906370a082319060240160206040518083038186803b15801561419557600080fd5b505afa1580156141a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141cd91906154c4565b81526020016141db60995490565b815260208082018f905260d55460408084019190915260d65460609384015280516001600160e01b031960e088901b16815260048101959095528351602486015290830151604485015282015160648401528101516084830152608081015160a483015260a0015160c482015260e40160c06040518083038186803b15801561426357600080fd5b505af4158015614277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061429b9190615608565b809750819850829950839650849b50859c505050505050508760d160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060cf60000160009054906101000a900461ffff1661ffff1690508160ca600083815260200190815260200160002081905550856001600160a01b03167f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c00685858460405161438a939291909283526020830191909152604082015260600190565b60405180910390a260d080546001600160801b03191690556143ad816001615a29565b60cf805461ffff191661ffff92909216919091179055506143d090503084614b62565b80156143e0576143e084826135f0565b505050509193909250565b604051632e99361160e01b8152600481018290526001600160a01b03831690632e99361190602401602060405180830381600087803b15801561442d57600080fd5b505af1158015614441573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b91906154c4565b60cf546201000090046001600160681b03166001600160a01b038216156144b15760cf80546cffffffffffffffffffffffffff60781b1916600160781b6001600160681b038416021790555b60cf805462010000600160781b031916905560d280546001600160a01b03191690556001600160a01b038216156145d757604051636c6fe87f60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073853cC5f4780D81e4e5C3649C2d1ad968338517da9063d8dfd0fe9060240160206040518083038186803b15801561455857600080fd5b505af415801561456c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061459091906154c4565b9050336001600160a01b0316836001600160a01b03167f7e830f7c1771deb1bdb35c4a7e6051bbac32b376f7f4e4976b8618b0b11997f78360405161340791815260200190565b5050565b600054610100900460ff16806145f4575060005460ff16155b6146105760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614632576000805461ffff19166101011790555b60405163c72733f760e01b815273853cC5f4780D81e4e5C3649C2d1ad968338517da9063c72733f790614677908c908c908c908b908d908c908c908c906004016156bd565b60006040518083038186803b15801561468f57600080fd5b505af41580156146a3573d6000803e3d6000fd5b505050506146af614c41565b6146b98484614cb4565b6146c1614d1d565b6146ca89612b14565b60d480546001600160a01b03808b166001600160a01b03199283161790925560d38054928a169290911691909117905560d585905561471463031ba3096132a488620f4240614a48565b60d6558160cc6147248282615c41565b505060cc546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a082319060240160206040518083038186803b15801561477057600080fd5b505afa158015614784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a891906154c4565b90506147b381613af0565b60cf805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff0000909216919091176001179055801561480f576000805461ff00191690555b505050505050505050565b835160009061ffff16158015906148355750845161ffff1684115b1561487757600061485486602001516001600160681b03168585614d84565b604087015190915061486f906001600160801b031682613f34565b91505061157d565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff16816148ed5760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b6044820152606401611210565b60cf5461ffff1681106149355760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b6044820152606401611210565b33600090815260cb60205260409020805462010000600160901b031916905560d05461497190600160801b90046001600160801b0316836135e4565b60d080546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc546149b491859160ff61010090910416613a8e565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26149fc3084614de7565b60008111614a3e5760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b6044820152606401611210565b61157d33826135f0565b600061122c8284615b4c565b600061122c8284615a41565b6040516001600160a01b038316602482015260448101829052612f8b90849063a9059cbb60e01b90606401613a17565b6000614ae5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f359092919063ffffffff16565b805190915015612f8b5780806020019051810190614b0391906154a8565b612f8b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611210565b6001600160a01b038216614bb85760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611210565b8060996000828254614bca9190615a29565b90915550506001600160a01b03821660009081526097602052604081208054839290614bf7908490615a29565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff1680614c5a575060005460ff16155b614c765760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614c98576000805461ffff19166101011790555b614ca0614f44565b8015612bac576000805461ff001916905550565b600054610100900460ff1680614ccd575060005460ff16155b614ce95760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614d0b576000805461ffff19166101011790555b614d13614fb3565b612f79838361501d565b600054610100900460ff1680614d36575060005460ff16155b614d525760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614d74576000805461ffff19166101011790555b614d7c614fb3565b614ca061509b565b600060018311614dce5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611210565b61157d836132a4614de085600a615aa4565b8790614a48565b6001600160a01b038216614e475760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401611210565b6001600160a01b03821660009081526097602052604090205481811015614ebb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401611210565b6001600160a01b0383166000908152609760205260408120838303905560998054849290614eea908490615b6b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606061157d84846000856150fb565b600054610100900460ff1680614f5d575060005460ff16155b614f795760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614f9b576000805461ffff19166101011790555b600180558015612bac576000805461ff001916905550565b600054610100900460ff1680614fcc575060005460ff16155b614fe85760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614ca0576000805461ffff19166101011790558015612bac576000805461ff001916905550565b600054610100900460ff1680615036575060005460ff16155b6150525760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015615074576000805461ffff19166101011790555b825161508790609a9060208601906152e0565b508151612f7790609b9060208501906152e0565b600054610100900460ff16806150b4575060005460ff16155b6150d05760405162461bcd60e51b815260040161121090615902565b600054610100900460ff161580156150f2576000805461ffff19166101011790555b614ca033613ee2565b60608247101561515c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611210565b843b6151aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611210565b600080866001600160a01b031685876040516151c691906156a1565b60006040518083038185875af1925050503d8060008114615203576040519150601f19603f3d011682016040523d82523d6000602084013e615208565b606091505b5091509150615218828286615223565b979650505050505050565b6060831561523257508161122c565b8251156152425782518084602001fd5b8160405162461bcd60e51b815260040161121091906158ce565b82805461526890615bae565b90600052602060002090601f01602090048101928261528a57600085556152d0565b82601f106152a35782800160ff198235161785556152d0565b828001600101855582156152d0579182015b828111156152d05782358255916020019190600101906152b5565b506152dc929150615354565b5090565b8280546152ec90615bae565b90600052602060002090601f01602090048101928261530e57600085556152d0565b82601f1061532757805160ff19168380011785556152d0565b828001600101855582156152d0579182015b828111156152d0578251825591602001919060010190615339565b5b808211156152dc5760008155600101615355565b803561537481615d52565b919050565b803561537481615d75565b803561537481615d8a565b6000602082840312156153a0578081fd5b813561122c81615d52565b600080604083850312156153bd578081fd5b82356153c881615d52565b915060208301356153d881615d52565b809150509250929050565b6000806000606084860312156153f7578081fd5b833561540281615d52565b9250602084013561541281615d52565b929592945050506040919091013590565b60008060408385031215615435578182fd5b823561544081615d52565b946020939093013593505050565b60008060008060808587031215615463578081fd5b845161546e81615d52565b60208601516040870151606090970151919890975090945092505050565b60006020828403121561549d578081fd5b813561122c81615d67565b6000602082840312156154b9578081fd5b815161122c81615d67565b6000602082840312156154d5578081fd5b5051919050565b600080602083850312156154ee578182fd5b823567ffffffffffffffff80821115615505578384fd5b818501915085601f830112615518578384fd5b813581811115615526578485fd5b866020828501011115615537578485fd5b60209290920196919550909350505050565b60008082840360e081121561555c578283fd5b833567ffffffffffffffff811115615572578384fd5b84016101a08187031215615584578384fd5b925060c0601f1982011215615597578182fd5b506020830190509250929050565b6000602082840312156155b6578081fd5b81356001600160801b038116811461122c578182fd5b6000602082840312156155dd578081fd5b5035919050565b600080604083850312156155f6578182fd5b8235915060208301356153d881615d52565b60008060008060008060c08789031215615620578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600060208284031215615662578081fd5b813563ffffffff8116811461122c578182fd5b6000815180845261568d816020860160208601615b82565b601f01601f19169290920160200192915050565b600082516156b3818460208701615b82565b9190910192915050565b60006101a060018060a01b03808c168452808b166020850152808a1660408501528860608501528760808501528160a08501526156fc82850188615675565b915083820360c08501526157108287615675565b92508435915061571f82615d67565b90151560e084015260208401359061573682615d9f565b60ff82166101008501526040850135915061575082615d52565b1661012083015261576360608401615369565b6001600160a01b031661014083015261577e60808401615384565b66ffffffffffffff1661016083015261579960a08401615379565b6001600160681b038116610180840152509998505050505050505050565b6001600160a01b038581168252602080830186905290841660408301526080606083015282546000918291600181811c90828116806157f757607f831692505b84831081141561581557634e487b7160e01b87526022600452602487fd5b6080880183905260a0880181801561583457600181146158455761586f565b60ff1986168252868201975061586f565b60008b815260209020895b8681101561586957815484820152908501908801615850565b83019850505b50959c9b505050505050505050505050565b60808152846080820152848660a0830137600060a08683018101919091526001600160a01b039485166020830152928416604082015292166060830152601f909201601f19160101919050565b60208152600061122c6020830184615675565b60208082526007908201526610b5b2b2b832b960c91b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e198436030181126159f3578283fd5b83018035915067ffffffffffffffff821115615a0d578283fd5b602001915036819003821315615a2257600080fd5b9250929050565b60008219821115615a3c57615a3c615c04565b500190565b600082615a5c57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115615a9c578160001904821115615a8257615a82615c04565b80851615615a8f57918102915b93841c9390800290615a66565b509250929050565b600061122c8383600082615aba5750600161117c565b81615ac75750600061117c565b8160018114615add5760028114615ae757615b03565b600191505061117c565b60ff841115615af857615af8615c04565b50506001821b61117c565b5060208310610133831016604e8410600b8410161715615b26575081810a61117c565b615b308383615a61565b8060001904821115615b4457615b44615c04565b029392505050565b6000816000190483118215151615615b6657615b66615c04565b500290565b600082821015615b7d57615b7d615c04565b500390565b60005b83811015615b9d578181015183820152602001615b85565b838111156135de5750506000910152565b600181811c90821680615bc257607f821691505b60208210811415615be357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615bfd57615bfd615c04565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6000813561117c81615d52565b6000813561117c81615d75565b6000813561117c81615d8a565b8135615c4c81615d67565b815460ff19811691151560ff1691821783556020840135615c6c81615d9f565b61ff008160081b169050808361ffff198416171784556040850135615c9081615d52565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b031617815560018101615ce8615ccb60608501615c1a565b82546001600160a01b0319166001600160a01b0391909116178255565b615d21615cf760808501615c34565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b506145d7615d3160a08401615c27565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b0381168114612bac57600080fd5b8015158114612bac57600080fd5b6001600160681b0381168114612bac57600080fd5b66ffffffffffffff81168114612bac57600080fd5b60ff81168114612bac57600080fdfea2646970667358221220191cf23e872f57039c8ad0e4a090693bee1a4089ef21672ab2047ce9567186ce64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061047e5760003560e01c806395d89b4111610255578063c74c0fac11610144578063df5af13f116100c1578063f60f764511610085578063f60f764514611027578063f6326fb314611047578063f656ba511461104f578063f756fa2114611084578063f957a06714611099578063fe56e232146110b957600080fd5b8063df5af13f14610fa7578063e73c63d514610fbc578063e74b981b14610fd2578063ea00b1ca14610ff2578063f2fde38b1461100757600080fd5b8063d826492011610108578063d826492014610ebf578063db006a7514610ef3578063db43e86214610f13578063dc4e9bef14610f47578063dd62ed3e14610f6157600080fd5b8063c74c0fac14610e15578063ce7c2ac214610e49578063d13f1b3e14610e69578063d164cc1514610e89578063d5f2638214610ea957600080fd5b8063a6f7f5d6116101d2578063afa6626411610196578063afa6626414610d89578063b4d1d79514610da9578063b6b55f2514610dc0578063b9f8092b14610de0578063be9d7d5714610df557600080fd5b8063a6f7f5d614610cea578063a9059cbb14610d00578063aced166114610d20578063ad5c464814610d40578063ad7a672f14610d7457600080fd5b8063a083ff1711610219578063a083ff1714610c07578063a285c9e814610c6a578063a2db9d8314610c8c578063a457c2d714610caa578063a497e67414610cca57600080fd5b806395d89b4114610af1578063980db6f414610b0657806399530b0614610b265780639be43daa14610b3b5780639fcc2d7514610b5b57600080fd5b8063503c70aa1161037157806370a08231116102ee57806387153eb1116102b257806387153eb114610a3e5780638778878214610a6b57806389a3027114610a815780638b10cc7c14610ab55780638da5cb5b14610ad357600080fd5b806370a0823114610959578063715018a61461098f5780637a9262a2146109a45780637e108d5214610a0857806383536ff314610a2857600080fd5b806369b411701161033557806369b41170146108c55780636b64c769146108db5780636c10f66c146108f05780636f31ab341461092457806370897b231461093957600080fd5b8063503c70aa146107c257806355489bb2146107d8578063600a2cfb146107f8578063650cce8a1461080d5780636719b2ee1461084157600080fd5b8063355274ea116103ff5780633f90916a116103c35780633f90916a1461072e578063432833a61461074c5780634603c0aa14610762578063469048401461078257806347786d37146107a257600080fd5b8063355274ea1461068257806336efd16f146106a057806339509351146106c05780633ec143d3146106e05780633f23bb731461070e57600080fd5b806323b872dd1161044657806323b872dd146105635780632728f333146105835780632775d01c1461061657806330630da414610638578063313ce5671461065857600080fd5b806306fdde0314610483578063095ea7b3146104ae5780630cbf54c8146104de57806318160ddd146105025780631a92f6c214610517575b600080fd5b34801561048f57600080fd5b506104986110d9565b6040516104a591906158ce565b60405180910390f35b3480156104ba57600080fd5b506104ce6104c9366004615423565b61116b565b60405190151581526020016104a5565b3480156104ea57600080fd5b506104f460fb5481565b6040519081526020016104a5565b34801561050e57600080fd5b506099546104f4565b34801561052357600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016104a5565b34801561056f57600080fd5b506104ce61057e3660046153e3565b611182565b34801561058f57600080fd5b5060cf5460d0546105d19161ffff8116916001600160681b03620100008304811692600160781b900416906001600160801b0380821691600160801b90041685565b6040805161ffff90961686526001600160681b03948516602087015293909216928401929092526001600160801b03918216606084015216608082015260a0016104a5565b34801561062257600080fd5b506106366106313660046155cc565b611233565b005b34801561064457600080fd5b5061063661065336600461538f565b6113d6565b34801561066457600080fd5b5060cc54610100900460ff1660405160ff90911681526020016104a5565b34801561068e57600080fd5b5060ce546001600160681b03166104f4565b3480156106ac57600080fd5b506106366106bb3660046155e4565b61146e565b3480156106cc57600080fd5b506104ce6106db366004615423565b6114f6565b3480156106ec57600080fd5b5060f9546106fb9061ffff1681565b60405161ffff90911681526020016104a5565b34801561071a57600080fd5b506104f461072936600461538f565b611532565b34801561073a57600080fd5b5060d0546001600160801b03166104f4565b34801561075857600080fd5b506104f460fc5481565b34801561076e57600080fd5b5061063661077d36600461538f565b611585565b34801561078e57600080fd5b5060d35461054b906001600160a01b031681565b3480156107ae57600080fd5b506106366107bd3660046155cc565b611627565b3480156107ce57600080fd5b506104f460fd5481565b3480156107e457600080fd5b506106366107f33660046155a5565b611702565b34801561080457600080fd5b506106366117c3565b34801561081957600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561084d57600080fd5b5061089461085c36600461538f565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b0316908201526060016104a5565b3480156108d157600080fd5b506104f461038481565b3480156108e757600080fd5b5061063661191e565b3480156108fc57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561093057600080fd5b5061063661197e565b34801561094557600080fd5b506106366109543660046155cc565b6119b5565b34801561096557600080fd5b506104f461097436600461538f565b6001600160a01b031660009081526097602052604090205490565b34801561099b57600080fd5b50610636611a7c565b3480156109b057600080fd5b506109e66109bf36600461538f565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b039091166020830152016104a5565b348015610a1457600080fd5b50610636610a233660046155cc565b611ab2565b348015610a3457600080fd5b506104f460f75481565b348015610a4a57600080fd5b506104f4610a593660046155cc565b60ca6020526000908152604090205481565b348015610a7757600080fd5b506104f460d55481565b348015610a8d57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610ac157600080fd5b5060d2546001600160a01b031661054b565b348015610adf57600080fd5b506065546001600160a01b031661054b565b348015610afd57600080fd5b50610498611ced565b348015610b1257600080fd5b50610636610b213660046154dc565b611cfc565b348015610b3257600080fd5b506104f4611df0565b348015610b4757600080fd5b50610636610b563660046155cc565b611e2a565b348015610b6757600080fd5b5060cc5460cd5460ce54610bb79260ff808216936101008304909116926001600160a01b036201000090930483169282169166ffffffffffffff600160a01b90910416906001600160681b031686565b60408051961515875260ff90951660208701526001600160a01b03938416948601949094529116606084015266ffffffffffffff1660808301526001600160681b031660a082015260c0016104a5565b348015610c1357600080fd5b5060d15460d254610c3e916001600160a01b039081169190811690600160a01b900463ffffffff1683565b604080516001600160a01b03948516815293909216602084015263ffffffff16908201526060016104a5565b348015610c7657600080fd5b5060d254600160a01b900463ffffffff166104f4565b348015610c9857600080fd5b5060d1546001600160a01b031661054b565b348015610cb657600080fd5b506104ce610cc5366004615423565b611f1b565b348015610cd657600080fd5b50610636610ce53660046155cc565b611fb4565b348015610cf657600080fd5b506104f460d65481565b348015610d0c57600080fd5b506104ce610d1b366004615423565b612071565b348015610d2c57600080fd5b5060d45461054b906001600160a01b031681565b348015610d4c57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610d8057600080fd5b506104f461207e565b348015610d9557600080fd5b5060f55461054b906001600160a01b031681565b348015610db557600080fd5b506104f462093a8081565b348015610dcc57600080fd5b50610636610ddb3660046155cc565b61211d565b348015610dec57600080fd5b50610636612191565b348015610e0157600080fd5b50610636610e103660046155cc565b612358565b348015610e2157600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610e5557600080fd5b506104f4610e6436600461538f565b61250e565b348015610e7557600080fd5b50610636610e843660046155cc565b61252b565b348015610e9557600080fd5b50610636610ea436600461538f565b6125ef565b348015610eb557600080fd5b506104f460f85481565b348015610ecb57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610eff57600080fd5b50610636610f0e3660046155cc565b61267e565b348015610f1f57600080fd5b5061054b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610f5357600080fd5b5060fe546104ce9060ff1681565b348015610f6d57600080fd5b506104f4610f7c3660046153ab565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b348015610fb357600080fd5b506104986126eb565b348015610fc857600080fd5b506104f460fa5481565b348015610fde57600080fd5b50610636610fed36600461538f565b612779565b348015610ffe57600080fd5b5061063661286c565b34801561101357600080fd5b5061063661102236600461538f565b612b14565b34801561103357600080fd5b50610636611042366004615549565b612baf565b610636612f90565b34801561105b57600080fd5b5061106f61106a36600461538f565b6130d6565b604080519283526020830191909152016104a5565b34801561109057600080fd5b506106366131b9565b3480156110a557600080fd5b5060f65461054b906001600160a01b031681565b3480156110c557600080fd5b506106366110d43660046155cc565b61320e565b6060609a80546110e890615bae565b80601f016020809104026020016040519081016040528092919081815260200182805461111490615bae565b80156111615780601f1061113657610100808354040283529160200191611161565b820191906000526020600020905b81548152906001019060200180831161114457829003601f168201915b5050505050905090565b60006111783384846132ef565b5060015b92915050565b600061118f848484613414565b6001600160a01b0384166000908152609860209081526040808320338452909152902054828110156112195760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61122685338584036132ef565b60019150505b9392505050565b600260015414156112565760405162461bcd60e51b8152600401611210906159a6565b600260015533600090815260c96020526040902060cf5461ffff168261128e5760405162461bcd60e51b815260040161121090615985565b815461ffff1681146112d25760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b6044820152606401611210565b81546201000090046001600160681b0316838110156113235760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b6044820152606401611210565b61132d81856135e4565b83546001600160681b0391909116620100000262010000600160781b031990911617835560d054611367906001600160801b0316856135e4565b60d080546001600160801b0319166001600160801b0392909216919091179055604080518581526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a26113cc33856135f0565b5050600180555050565b6065546001600160a01b031633146114005760405162461bcd60e51b815260040161121090615950565b6001600160a01b03811661144c5760405162461bcd60e51b815260206004820152601360248201527210b732bba9ba3934b5b2a9b2b632b1ba34b7b760691b6044820152606401611210565b60f680546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156114915760405162461bcd60e51b8152600401611210906159a6565b6002600155816114b35760405162461bcd60e51b815260040161121090615985565b6001600160a01b0381166114c657600080fd5b6114d08282613751565b60cc546114ee906201000090046001600160a01b03163330856139e3565b505060018055565b3360008181526098602090815260408083206001600160a01b0387168452909152812054909161117891859061152d908690615a29565b6132ef565b60cc5460009060ff610100909104168161156861154e60995490565b61155661207e565b60d0546001600160801b031685613a4e565b905061157d6115768561250e565b8284613a8e565b949350505050565b6065546001600160a01b031633146115af5760405162461bcd60e51b815260040161121090615950565b6001600160a01b0381166116055760405162461bcd60e51b815260206004820152601860248201527f216e65774f7074696f6e735072656d69756d50726963657200000000000000006044820152606401611210565b60f580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146116515760405162461bcd60e51b815260040161121090615950565b6000811161168b5760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b6044820152606401611210565b61169481613af0565b60ce54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160ce80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b6065546001600160a01b0316331461172c5760405162461bcd60e51b815260040161121090615950565b6002600154141561174f5760405162461bcd60e51b8152600401611210906159a6565b60026001556001600160801b0381166117995760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b6044820152606401611210565b6001600160801b031660fa5560cf5460f9805461ffff191661ffff90921691909117905560018055565b60d4546001600160a01b031633146117ed5760405162461bcd60e51b8152600401611210906158e1565b600260015414156118105760405162461bcd60e51b8152600401611210906159a6565b600260015560d2546040516358ffbb3d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116602482015260009073__$c4f279750f4bbb575ac7775e752dc00849$__906358ffbb3d9060440160206040518083038186803b15801561189757600080fd5b505af41580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf91906154c4565b60cf549091506118ee906201000090046001600160681b0316826135e4565b60cf80546001600160681b0392909216620100000262010000600160781b03199092169190911790555060018055565b60d4546001600160a01b031633146119485760405162461bcd60e51b8152600401611210906158e1565b6002600154141561196b5760405162461bcd60e51b8152600401611210906159a6565b6002600155611978613b3a565b60018055565b600260015414156119a15760405162461bcd60e51b8152600401611210906159a6565b600260018190555061197860006001613d33565b6065546001600160a01b031633146119df5760405162461bcd60e51b815260040161121090615950565b6119ed620f42406064615b4c565b8110611a3b5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e6365206665650000000000000000006044820152606401611210565b60d55460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160d555565b6065546001600160a01b03163314611aa65760405162461bcd60e51b815260040161121090615950565b611ab06000613ee2565b565b60026001541415611ad55760405162461bcd60e51b8152600401611210906159a6565b600260015580611b145760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611210565b33600090815260c960205260409020546201000090046001600160681b0316151580611b5e575033600090815260c96020526040902054600160781b90046001600160801b031615155b15611b6f57611b6f60006001613d33565b60cf5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b031660008215611bf857611bf18287613f34565b9050611c5b565b8115611c3a5760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b6044820152606401611210565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b611c6481613f40565b33600090815260cb6020526040812080546001600160801b03808516620100000262010000600160901b03199092169190911790915560d054611cb091600160801b9091041688613f34565b9050611cbb81613f40565b60d080546001600160801b03808416600160801b029116179055611ce0333089613414565b5050600180555050505050565b6060609b80546110e890615bae565b6065546001600160a01b03163314611d265760405162461bcd60e51b815260040161121090615950565b60026001541415611d495760405162461bcd60e51b8152600401611210906159a6565b600260015560fe5460ff16611d915760405162461bcd60e51b815260206004820152600e60248201526d10b4b9aab9b231a0bab1ba34b7b760911b6044820152606401611210565b611d9b8282613f8a565b611ddb5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e6eec2e040e0c2e8d607b1b6044820152606401611210565b611de760ff838361525c565b50506001805550565b6000611e25611dfe60995490565b611e0661207e565b60d05460cc546001600160801b0390911690610100900460ff16613a4e565b905090565b60026001541415611e4d5760405162461bcd60e51b8152600401611210906159a6565b600260015580611e8c5760405162461bcd60e51b815260206004820152600a602482015269216e756d526f756e647360b01b6044820152606401611210565b60cf5461ffff1660005b82811015611de7576000611eaa8284615a29565b600081815260ca602052604090205490915015611ef75760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b6044820152606401611210565b600090815260ca602052604090206001905580611f1381615be9565b915050611e96565b3360009081526098602090815260408083206001600160a01b038616845290915281205482811015611f9d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401611210565b611faa33858584036132ef565b5060019392505050565b6065546001600160a01b03163314611fde5760405162461bcd60e51b815260040161121090615950565b610e108110156120305760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e206475726174696f6e00000000000000006044820152606401611210565b60fb5460408051918252602082018390527f5acd982e2240ed224a69aa03dab039d3797c108e4b5f288cd7dd6ca181b275f3910160405180910390a160fb55565b6000611178338484613414565b60cc546040516370a0823160e01b8152306004820152600091611e2591620100009091046001600160a01b0316906370a082319060240160206040518083038186803b1580156120cd57600080fd5b505afa1580156120e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210591906154c4565b60cf546201000090046001600160681b031690613f34565b600260015414156121405760405162461bcd60e51b8152600401611210906159a6565b6002600155806121625760405162461bcd60e51b815260040161121090615985565b61216c8133613751565b60cc5461218a906201000090046001600160a01b03163330846139e3565b5060018055565b60d4546001600160a01b031633146121bb5760405162461bcd60e51b8152600401611210906158e1565b600260015414156121de5760405162461bcd60e51b8152600401611210906159a6565b600260018190555060008060006121f660fd5461406d565b60fd8190559194509250905061220b82613af0565b60cf805462010000600160781b031916620100006001600160681b0385160217905560405182815233906001600160a01b038516907f045c558fdce4714c5816d53820d27420f4cd860892df203fe636384d8d19aa019060200160405180910390a3604051632904c23960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152841660448201526064810183905273__$c4f279750f4bbb575ac7775e752dc00849$__90632904c2399060840160206040518083038186803b15801561231757600080fd5b505af415801561232b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234f91906154c4565b50611de7613b3a565b60d4546001600160a01b031633146123825760405162461bcd60e51b8152600401611210906158e1565b600260015414156123a55760405162461bcd60e51b8152600401611210906159a6565b600260015560fe5460ff166123ed5760405162461bcd60e51b815260206004820152600e60248201526d10b4b9aab9b231a0bab1ba34b7b760911b6044820152606401611210565b6000811161242d5760405162461bcd60e51b815260206004820152600d60248201526c085b5a5b905b5bdd5b9d13dd5d609a1b6044820152606401611210565b6124597f000000000000000000000000000000000000000000000000000000000000000060fc546143eb565b604051637f0f41d760e01b815273__$c4f279750f4bbb575ac7775e752dc00849$__90637f0f41d7906124d7907f00000000000000000000000000000000000000000000000000000000000000009085907f00000000000000000000000000000000000000000000000000000000000000009060ff906004016157b7565b60006040518083038186803b1580156124ef57600080fd5b505af4158015612503573d6000803e3d6000fd5b505060018055505050565b600080600061251c846130d6565b909250905061157d8282613f34565b6065546001600160a01b031633146125555760405162461bcd60e51b815260040161121090615950565b60008111801561256f575061256c600a6064615b4c565b81105b6125ae5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908191a5cd8dbdd5b9d60821b6044820152606401611210565b60f75460408051918252602082018390527f4cd657fde404967d63a338fb06c5c98751a9df57dfae6dc333a432faf8a5f656910160405180910390a160f755565b6065546001600160a01b031633146126195760405162461bcd60e51b815260040161121090615950565b6001600160a01b03811661265c5760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401611210565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156126a15760405162461bcd60e51b8152600401611210906159a6565b6002600155806126e05760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401611210565b61218a816000613d33565b60ff80546126f890615bae565b80601f016020809104026020016040519081016040528092919081815260200182805461272490615bae565b80156127715780601f1061274657610100808354040283529160200191612771565b820191906000526020600020905b81548152906001019060200180831161275457829003601f168201915b505050505081565b6065546001600160a01b031633146127a35760405162461bcd60e51b815260040161121090615950565b6001600160a01b0381166127ec5760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b6044820152606401611210565b60d3546001600160a01b038281169116141561284a5760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e7400000000000000006044820152606401611210565b60d380546001600160a01b0319166001600160a01b0392909216919091179055565b6002600154141561288f5760405162461bcd60e51b8152600401611210906159a6565b600260015560d2546040805160c0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000008116602083019081529381168284018181526103846060850190815260f95461ffff9081166080870190815260fa5460a0880190815260f65460f55460f7549a516334d0abdd60e21b815291891660048301528816602482015260448101999099528751871660648a0152985186166084890152925190941660a48701525160c48601525190911660e4840152925161010483015260cc61012483015260cf6101448301529060009081908190819073__$c4f279750f4bbb575ac7775e752dc00849$__9063d342af74906101640160806040518083038186803b1580156129d657600080fd5b505af41580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e919061544e565b93509350935093507fa217999b1c125c2a996f712c5f26a28addad7167bd8a67d5bd5b2a751148abb08282604051612a50929190918252602082015260400190565b60405180910390a1612a6183613af0565b6001600160681b03831660f85560d180546001600160a01b0319166001600160a01b0386161790556000612a9742610384613f34565b905063ffffffff811115612aed5760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e526561647900000000000000006044820152606401611210565b60d2805463ffffffff60a01b1916600160a01b63ffffffff841602179055611ce087614465565b6065546001600160a01b03163314612b3e5760405162461bcd60e51b815260040161121090615950565b6001600160a01b038116612ba35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611210565b612bac81613ee2565b50565b600054610100900460ff1680612bc8575060005460ff16155b612be45760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015612c06576000805461ffff19166101011790555b612ccb612c16602085018561538f565b612c26604086016020870161538f565b612c36606087016040880161538f565b60608701356080880135612c4d60a08a018a6159dd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c8f9250505060c08b018b6159dd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506145db915050565b6000612cde610100850160e0860161538f565b6001600160a01b03161415612d2e5760405162461bcd60e51b815260206004820152601660248201527510afb7b83a34b7b739a83932b6b4bab6a83934b1b2b960511b6044820152606401611210565b6000612d426101208501610100860161538f565b6001600160a01b03161415612d8d5760405162461bcd60e51b815260206004820152601160248201527010afb9ba3934b5b2a9b2b632b1ba34b7b760791b6044820152606401611210565b6000612da161014085016101208601615651565b63ffffffff16118015612dd55750612dbb600a6064615b4c565b612dcd61014085016101208601615651565b63ffffffff16105b612e155760405162461bcd60e51b81526020600482015260116024820152700857dc1c995b5a5d5b511a5cd8dbdd5b9d607a1b6044820152606401611210565b610e108361014001351015612e605760405162461bcd60e51b815260206004820152601160248201527010afb0bab1ba34b7b7223ab930ba34b7b760791b6044820152606401611210565b612e71610100840160e0850161538f565b60f580546001600160a01b0319166001600160a01b0392909216919091179055612ea36101208401610100850161538f565b60f680546001600160a01b0319166001600160a01b0392909216919091179055612ed561014084016101208501615651565b63ffffffff1660f75561014083013560fb55612ef96101808401610160850161548c565b60fe805460ff1916911515919091179055612f1c6101808401610160850161548c565b15612f7957612f37612f326101808501856159dd565b613f8a565b612f5d5760405162461bcd60e51b81526020600482015260006024820152604401611210565b612f6b6101808401846159dd565b612f779160ff9161525c565b505b8015612f8b576000805461ff00191690555b505050565b60026001541415612fb35760405162461bcd60e51b8152600401611210906159a6565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166201000090920416146130245760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b6044820152606401611210565b6000341161305d5760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401611210565b6130673433613751565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130c257600080fd5b505af1158015612503573d6000803e3d6000fd5b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b031691810191909152829160011115613158575050506001600160a01b031660009081526097602052604081205491565b60cf54815161ffff908116600090815260ca602052604081205460cc54919361318e93869391169190610100900460ff1661481a565b90506131af856001600160a01b031660009081526097602052604090205490565b9590945092505050565b600260015414156131dc5760405162461bcd60e51b8152600401611210906159a6565b600260015560006131eb61488b565b60fd549091506131fb90826135e4565b6001600160801b031660fd555060018055565b6065546001600160a01b031633146132385760405162461bcd60e51b815260040161121090615950565b613246620f42406064615b4c565b811061328d5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b6044820152606401611210565b60006132aa63031ba3096132a484620f4240614a48565b90614a54565b60d65460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160d65550565b6001600160a01b0383166133515760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611210565b6001600160a01b0382166133b25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611210565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166134785760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611210565b6001600160a01b0382166134da5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611210565b6001600160a01b038316600090815260976020526040902054818110156135525760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401611210565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613589908490615a29565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516135d591815260200190565b60405180910390a35b50505050565b600061122c8284615b6b565b60cc546001600160a01b03620100009091048116907f00000000000000000000000000000000000000000000000000000000000000001681141561373d57604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561369057600080fd5b505af11580156136a4573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146136f5576040519150601f19603f3d011682016040523d82523d6000602084013e6136fa565b606091505b50509050806135de5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401611210565b612f8b6001600160a01b0382168484614a60565b60cf5461ffff16600061376c8461376661207e565b90613f34565b60ce549091506001600160681b03168111156137b75760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b6044820152606401611210565b60cd54600160a01b900466ffffffffffffff168110156138105760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401611210565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc549192916138cf918491879190610100900460ff1661481a565b8251909150869061ffff168514156139005760208301516000906138fc906001600160681b031689613f34565b9150505b61390981613af0565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560d0546139af911689613f34565b90506139ba81613f40565b60d080546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526135de9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a90565b600080613a5c83600a615aa4565b905060008611613a6c5780613a84565b613a84866132a4613a7d88886135e4565b8490614a48565b9695505050505050565b600060018311613ad85760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611210565b61157d613ae683600a615aa4565b6132a48686614a48565b6001600160681b03811115612bac5760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401611210565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260f85480613bb45760405162461bcd60e51b81526020600482015260156024820152742163757272656e744f746f6b656e5072656d69756d60581b6044820152606401611210565b60fe5460d2546001600160a01b0390811684527f000000000000000000000000000000000000000000000000000000000000000016602084015260ff1680613c0d5760cc546201000090046001600160a01b0316613c2f565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b0316604084015280613c525760cc54610100900460ff16613c55565b60065b60ff16606084019081526080840183815260fb5460a0860190815260408051633baf17fd60e21b815287516001600160a01b03908116600483015260208901518116602483015291880151909116604482015292516064840152905160848301525160a482015273__$c4f279750f4bbb575ac7775e752dc00849$__9063eebc5ff49060c40160206040518083038186803b158015613cf357600080fd5b505af4158015613d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d2b91906154c4565b60fc55505050565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cf5491865260ca9094529184205460cc5491949290931692613dae9185918591610100900460ff1661481a565b905083613dbb5784613dbd565b805b945084613dcb575050505050565b80851115613e0f5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401611210565b825161ffff16821115613e3c5733600090815260c960205260409020805462010000600160781b03191690555b613e4585613f40565b613e4f81866135e4565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92991613ec89189825261ffff16602082015260400190565b60405180910390a2613edb303387613414565b5050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061122c8284615a29565b6001600160801b03811115612bac5760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401611210565b60cc5460405163055a2bef60e41b815260009173__$fcc63677a24fb26599947a072d6b43d8c2$__916355a2bef09161401d91879187917f0000000000000000000000000000000000000000000000000000000000000000916201000090046001600160a01b0316907f000000000000000000000000000000000000000000000000000000000000000090600401615881565b60206040518083038186803b15801561403557600080fd5b505af4158015614049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c91906154a8565b60d25460009081908190600160a01b900463ffffffff164210156140bc5760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b6044820152606401611210565b60d1546001600160a01b03169250826141055760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b6044820152606401611210565b60d3546040805160c08101825260cc54610100810460ff16825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373__$c4f279750f4bbb575ac7775e752dc00849$__9363633c14269360cf939092602084019262010000900416906370a082319060240160206040518083038186803b15801561419557600080fd5b505afa1580156141a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141cd91906154c4565b81526020016141db60995490565b815260208082018f905260d55460408084019190915260d65460609384015280516001600160e01b031960e088901b16815260048101959095528351602486015290830151604485015282015160648401528101516084830152608081015160a483015260a0015160c482015260e40160c06040518083038186803b15801561426357600080fd5b505af4158015614277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061429b9190615608565b809750819850829950839650849b50859c505050505050508760d160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060cf60000160009054906101000a900461ffff1661ffff1690508160ca600083815260200190815260200160002081905550856001600160a01b03167f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c00685858460405161438a939291909283526020830191909152604082015260600190565b60405180910390a260d080546001600160801b03191690556143ad816001615a29565b60cf805461ffff191661ffff92909216919091179055506143d090503084614b62565b80156143e0576143e084826135f0565b505050509193909250565b604051632e99361160e01b8152600481018290526001600160a01b03831690632e99361190602401602060405180830381600087803b15801561442d57600080fd5b505af1158015614441573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b91906154c4565b60cf546201000090046001600160681b03166001600160a01b038216156144b15760cf80546cffffffffffffffffffffffffff60781b1916600160781b6001600160681b038416021790555b60cf805462010000600160781b031916905560d280546001600160a01b03191690556001600160a01b038216156145d757604051636c6fe87f60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073__$c4f279750f4bbb575ac7775e752dc00849$__9063d8dfd0fe9060240160206040518083038186803b15801561455857600080fd5b505af415801561456c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061459091906154c4565b9050336001600160a01b0316836001600160a01b03167f7e830f7c1771deb1bdb35c4a7e6051bbac32b376f7f4e4976b8618b0b11997f78360405161340791815260200190565b5050565b600054610100900460ff16806145f4575060005460ff16155b6146105760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614632576000805461ffff19166101011790555b60405163c72733f760e01b815273__$c4f279750f4bbb575ac7775e752dc00849$__9063c72733f790614677908c908c908c908b908d908c908c908c906004016156bd565b60006040518083038186803b15801561468f57600080fd5b505af41580156146a3573d6000803e3d6000fd5b505050506146af614c41565b6146b98484614cb4565b6146c1614d1d565b6146ca89612b14565b60d480546001600160a01b03808b166001600160a01b03199283161790925560d38054928a169290911691909117905560d585905561471463031ba3096132a488620f4240614a48565b60d6558160cc6147248282615c41565b505060cc546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a082319060240160206040518083038186803b15801561477057600080fd5b505afa158015614784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a891906154c4565b90506147b381613af0565b60cf805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff0000909216919091176001179055801561480f576000805461ff00191690555b505050505050505050565b835160009061ffff16158015906148355750845161ffff1684115b1561487757600061485486602001516001600160681b03168585614d84565b604087015190915061486f906001600160801b031682613f34565b91505061157d565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff16816148ed5760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b6044820152606401611210565b60cf5461ffff1681106149355760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b6044820152606401611210565b33600090815260cb60205260409020805462010000600160901b031916905560d05461497190600160801b90046001600160801b0316836135e4565b60d080546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc546149b491859160ff61010090910416613a8e565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26149fc3084614de7565b60008111614a3e5760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b6044820152606401611210565b61157d33826135f0565b600061122c8284615b4c565b600061122c8284615a41565b6040516001600160a01b038316602482015260448101829052612f8b90849063a9059cbb60e01b90606401613a17565b6000614ae5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f359092919063ffffffff16565b805190915015612f8b5780806020019051810190614b0391906154a8565b612f8b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611210565b6001600160a01b038216614bb85760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611210565b8060996000828254614bca9190615a29565b90915550506001600160a01b03821660009081526097602052604081208054839290614bf7908490615a29565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff1680614c5a575060005460ff16155b614c765760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614c98576000805461ffff19166101011790555b614ca0614f44565b8015612bac576000805461ff001916905550565b600054610100900460ff1680614ccd575060005460ff16155b614ce95760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614d0b576000805461ffff19166101011790555b614d13614fb3565b612f79838361501d565b600054610100900460ff1680614d36575060005460ff16155b614d525760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614d74576000805461ffff19166101011790555b614d7c614fb3565b614ca061509b565b600060018311614dce5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401611210565b61157d836132a4614de085600a615aa4565b8790614a48565b6001600160a01b038216614e475760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401611210565b6001600160a01b03821660009081526097602052604090205481811015614ebb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401611210565b6001600160a01b0383166000908152609760205260408120838303905560998054849290614eea908490615b6b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606061157d84846000856150fb565b600054610100900460ff1680614f5d575060005460ff16155b614f795760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614f9b576000805461ffff19166101011790555b600180558015612bac576000805461ff001916905550565b600054610100900460ff1680614fcc575060005460ff16155b614fe85760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015614ca0576000805461ffff19166101011790558015612bac576000805461ff001916905550565b600054610100900460ff1680615036575060005460ff16155b6150525760405162461bcd60e51b815260040161121090615902565b600054610100900460ff16158015615074576000805461ffff19166101011790555b825161508790609a9060208601906152e0565b508151612f7790609b9060208501906152e0565b600054610100900460ff16806150b4575060005460ff16155b6150d05760405162461bcd60e51b815260040161121090615902565b600054610100900460ff161580156150f2576000805461ffff19166101011790555b614ca033613ee2565b60608247101561515c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611210565b843b6151aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611210565b600080866001600160a01b031685876040516151c691906156a1565b60006040518083038185875af1925050503d8060008114615203576040519150601f19603f3d011682016040523d82523d6000602084013e615208565b606091505b5091509150615218828286615223565b979650505050505050565b6060831561523257508161122c565b8251156152425782518084602001fd5b8160405162461bcd60e51b815260040161121091906158ce565b82805461526890615bae565b90600052602060002090601f01602090048101928261528a57600085556152d0565b82601f106152a35782800160ff198235161785556152d0565b828001600101855582156152d0579182015b828111156152d05782358255916020019190600101906152b5565b506152dc929150615354565b5090565b8280546152ec90615bae565b90600052602060002090601f01602090048101928261530e57600085556152d0565b82601f1061532757805160ff19168380011785556152d0565b828001600101855582156152d0579182015b828111156152d0578251825591602001919060010190615339565b5b808211156152dc5760008155600101615355565b803561537481615d52565b919050565b803561537481615d75565b803561537481615d8a565b6000602082840312156153a0578081fd5b813561122c81615d52565b600080604083850312156153bd578081fd5b82356153c881615d52565b915060208301356153d881615d52565b809150509250929050565b6000806000606084860312156153f7578081fd5b833561540281615d52565b9250602084013561541281615d52565b929592945050506040919091013590565b60008060408385031215615435578182fd5b823561544081615d52565b946020939093013593505050565b60008060008060808587031215615463578081fd5b845161546e81615d52565b60208601516040870151606090970151919890975090945092505050565b60006020828403121561549d578081fd5b813561122c81615d67565b6000602082840312156154b9578081fd5b815161122c81615d67565b6000602082840312156154d5578081fd5b5051919050565b600080602083850312156154ee578182fd5b823567ffffffffffffffff80821115615505578384fd5b818501915085601f830112615518578384fd5b813581811115615526578485fd5b866020828501011115615537578485fd5b60209290920196919550909350505050565b60008082840360e081121561555c578283fd5b833567ffffffffffffffff811115615572578384fd5b84016101a08187031215615584578384fd5b925060c0601f1982011215615597578182fd5b506020830190509250929050565b6000602082840312156155b6578081fd5b81356001600160801b038116811461122c578182fd5b6000602082840312156155dd578081fd5b5035919050565b600080604083850312156155f6578182fd5b8235915060208301356153d881615d52565b60008060008060008060c08789031215615620578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600060208284031215615662578081fd5b813563ffffffff8116811461122c578182fd5b6000815180845261568d816020860160208601615b82565b601f01601f19169290920160200192915050565b600082516156b3818460208701615b82565b9190910192915050565b60006101a060018060a01b03808c168452808b166020850152808a1660408501528860608501528760808501528160a08501526156fc82850188615675565b915083820360c08501526157108287615675565b92508435915061571f82615d67565b90151560e084015260208401359061573682615d9f565b60ff82166101008501526040850135915061575082615d52565b1661012083015261576360608401615369565b6001600160a01b031661014083015261577e60808401615384565b66ffffffffffffff1661016083015261579960a08401615379565b6001600160681b038116610180840152509998505050505050505050565b6001600160a01b038581168252602080830186905290841660408301526080606083015282546000918291600181811c90828116806157f757607f831692505b84831081141561581557634e487b7160e01b87526022600452602487fd5b6080880183905260a0880181801561583457600181146158455761586f565b60ff1986168252868201975061586f565b60008b815260209020895b8681101561586957815484820152908501908801615850565b83019850505b50959c9b505050505050505050505050565b60808152846080820152848660a0830137600060a08683018101919091526001600160a01b039485166020830152928416604082015292166060830152601f909201601f19160101919050565b60208152600061122c6020830184615675565b60208082526007908201526610b5b2b2b832b960c91b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000808335601e198436030181126159f3578283fd5b83018035915067ffffffffffffffff821115615a0d578283fd5b602001915036819003821315615a2257600080fd5b9250929050565b60008219821115615a3c57615a3c615c04565b500190565b600082615a5c57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115615a9c578160001904821115615a8257615a82615c04565b80851615615a8f57918102915b93841c9390800290615a66565b509250929050565b600061122c8383600082615aba5750600161117c565b81615ac75750600061117c565b8160018114615add5760028114615ae757615b03565b600191505061117c565b60ff841115615af857615af8615c04565b50506001821b61117c565b5060208310610133831016604e8410600b8410161715615b26575081810a61117c565b615b308383615a61565b8060001904821115615b4457615b44615c04565b029392505050565b6000816000190483118215151615615b6657615b66615c04565b500290565b600082821015615b7d57615b7d615c04565b500390565b60005b83811015615b9d578181015183820152602001615b85565b838111156135de5750506000910152565b600181811c90821680615bc257607f821691505b60208210811415615be357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615bfd57615bfd615c04565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6000813561117c81615d52565b6000813561117c81615d75565b6000813561117c81615d8a565b8135615c4c81615d67565b815460ff19811691151560ff1691821783556020840135615c6c81615d9f565b61ff008160081b169050808361ffff198416171784556040850135615c9081615d52565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b031617815560018101615ce8615ccb60608501615c1a565b82546001600160a01b0319166001600160a01b0391909116178255565b615d21615cf760808501615c34565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b506145d7615d3160a08401615c27565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b0381168114612bac57600080fd5b8015158114612bac57600080fd5b6001600160681b0381168114612bac57600080fd5b66ffffffffffffff81168114612bac57600080fd5b60ff81168114612bac57600080fdfea2646970667358221220191cf23e872f57039c8ad0e4a090693bee1a4089ef21672ab2047ce9567186ce64736f6c63430008040033",
  "libraries": {
    "VaultLifecycle": "0x853cC5f4780D81e4e5C3649C2d1ad968338517da",
    "UniswapRouter": "0x14D4aE61f7143E4b48ffb8b6eF39a3dC31F0007F"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_gammaController": "is the contract address for opyn actions",
          "_gnosisEasyAuction": "is the contract address that facilitates gnosis auctions",
          "_marginPool": "is the contract address for providing collateral to opyn",
          "_oTokenFactory": "is the contract address for minting new opyn option types (strikes, asset, expiry)",
          "_uniswapFactory": "is the contract address of UniswapV3 factory containing",
          "_uniswapRouter": "is the contract address of UniswapV3 router that handles swaps",
          "_usdc": "is the USDC contract",
          "_weth": "is the Wrapped Ether contract"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "is the amount of `asset` to deposit"
        }
      },
      "depositFor(uint256,address)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "creditor": "is the address that can claim/withdraw deposited amount"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,bool,bytes),(bool,uint8,address,address,uint56,uint104))": {
        "params": {
          "_initParams": "is the struct with vault initialization parameters",
          "_vaultParams": "is the struct with vault general data"
        }
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAuctionDuration(uint256)": {
        "params": {
          "newAuctionDuration": "is the auction duration"
        }
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "newKeeper": "is the address of the new keeper"
        }
      },
      "setOptionsPremiumPricer(address)": {
        "params": {
          "newOptionsPremiumPricer": "is the address of the new strike selection contract"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "setPremiumDiscount(uint256)": {
        "params": {
          "newPremiumDiscount": "is the premium discount"
        }
      },
      "setStrikePrice(uint128)": {
        "params": {
          "strikePrice": "is the strike price of the new oTokens (decimals = 8)"
        }
      },
      "setStrikeSelection(address)": {
        "params": {
          "newStrikeSelection": "is the address of the new strike selection contract"
        }
      },
      "setSwapPath(bytes)": {
        "params": {
          "newSwapPath": "is the new path"
        }
      },
      "settleAuctionAndSwap(uint256)": {
        "params": {
          "minAmountOut": "is the minimum amount of underlying acceptable for the swap"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawInstantly(uint256)": {
        "params": {
          "amount": "is the amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELAY()": {
        "notice": "15 minute timelock between commitAndClose and rollToNexOption."
      },
      "OTOKEN_FACTORY()": {
        "notice": "oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens."
      },
      "PERIOD()": {
        "notice": "7 day period between each options sale."
      },
      "USDC()": {
        "notice": "USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "WETH()": {
        "notice": "WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "burnRemainingOTokens()": {
        "notice": "Burn the remaining oTokens left over from gnosis auction."
      },
      "commitAndClose()": {
        "notice": "Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious."
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "constructor": {
        "notice": "Initializes the contract with immutable variables"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "deposit(uint256)": {
        "notice": "Deposits the `asset` from msg.sender."
      },
      "depositETH()": {
        "notice": "Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH."
      },
      "depositFor(uint256,address)": {
        "notice": "Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf"
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,bool,bytes),(bool,uint8,address,address,uint56,uint104))": {
        "notice": "Initializes the OptionVault contract with storage variables."
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "keeper()": {
        "notice": "role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss."
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "optionState()": {
        "notice": "Vault's state of the options sold and the timelocked option"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss."
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "rollToNextOption()": {
        "notice": "Rolls the vault's funds into a new short position."
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "setAuctionDuration(uint256)": {
        "notice": "Sets the new auction duration"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      },
      "setOptionsPremiumPricer(address)": {
        "notice": "Sets the new options premium pricer contract"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "setPremiumDiscount(uint256)": {
        "notice": "Sets the new discount on premiums for options we are selling"
      },
      "setStrikePrice(uint128)": {
        "notice": "Optionality to set strike price manually"
      },
      "setStrikeSelection(address)": {
        "notice": "Sets the new strike selection contract"
      },
      "setSwapPath(bytes)": {
        "notice": "Sets a new path for swaps"
      },
      "settleAuctionAndSwap(uint256)": {
        "notice": "Settle USDC auction and swap the proceeds to underlying asset"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "startAuction()": {
        "notice": "Initiate the gnosis auction."
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts locked into a short position"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawInstantly(uint256)": {
        "notice": "Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "notice": "UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage. RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 184,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 947,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 255,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 257,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10803,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)4933_storage)"
      },
      {
        "astId": 10808,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10814,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "withdrawals",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Withdrawal)4938_storage)"
      },
      {
        "astId": 10818,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "vaultParams",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(VaultParams)4908_storage"
      },
      {
        "astId": 10822,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "vaultState",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(VaultState)4926_storage"
      },
      {
        "astId": 10826,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "optionState",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(OptionState)4915_storage"
      },
      {
        "astId": 10829,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "211",
        "type": "t_address"
      },
      {
        "astId": 10832,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "keeper",
        "offset": 0,
        "slot": "212",
        "type": "t_address"
      },
      {
        "astId": 10835,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 10838,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 10842,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "____gap",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_uint256)30_storage"
      },
      {
        "astId": 8300,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "optionsPremiumPricer",
        "offset": 0,
        "slot": "245",
        "type": "t_address"
      },
      {
        "astId": 8302,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "strikeSelection",
        "offset": 0,
        "slot": "246",
        "type": "t_address"
      },
      {
        "astId": 8304,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "premiumDiscount",
        "offset": 0,
        "slot": "247",
        "type": "t_uint256"
      },
      {
        "astId": 8306,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "currentOtokenPremium",
        "offset": 0,
        "slot": "248",
        "type": "t_uint256"
      },
      {
        "astId": 8308,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "lastStrikeOverrideRound",
        "offset": 0,
        "slot": "249",
        "type": "t_uint16"
      },
      {
        "astId": 8310,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "overriddenStrikePrice",
        "offset": 0,
        "slot": "250",
        "type": "t_uint256"
      },
      {
        "astId": 8312,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "auctionDuration",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 8314,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "optionAuctionID",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 8317,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 8320,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "isUsdcAuction",
        "offset": 0,
        "slot": "254",
        "type": "t_bool"
      },
      {
        "astId": 8322,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "swapPath",
        "offset": 0,
        "slot": "255",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)4933_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)4933_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)4938_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)4938_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositReceipt)4933_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 4928,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4930,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 4932,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)4915_storage": {
        "encoding": "inplace",
        "label": "struct Vault.OptionState",
        "members": [
          {
            "astId": 4910,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "nextOption",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4912,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "currentOption",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4914,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "nextOptionReadyAt",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultParams)4908_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 4897,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "isPut",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4899,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "decimals",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4901,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "asset",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4903,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4905,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "minimumSupply",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          },
          {
            "astId": 4907,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "cap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VaultState)4926_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 4917,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4919,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 4921,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 4923,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4925,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Withdrawal)4938_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 4935,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4937,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}