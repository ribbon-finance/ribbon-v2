{
  "address": "0x551C441D05E81E5A43CFD5afa7e9589039D67625",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gammaController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marginPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisEasyAuction",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CloseLong",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InstantWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOptionAllocation",
          "type": "uint256"
        }
      ],
      "name": "NewOptionAllocationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "OpenLong",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "auctioningToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "PlaceAuctionBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAMMA_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GNOSIS_EASY_AUCTION",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSellOrder",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceBeforePremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAuctionOtokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitAndClose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterpartyThetaVault",
      "outputs": [
        {
          "internalType": "contract IRibbonThetaVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numRounds",
          "type": "uint256"
        }
      ],
      "name": "initRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_managementFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_counterpartyThetaVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_optionAllocation",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOptionReadyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionState",
      "outputs": [
        {
          "internalType": "address",
          "name": "nextOption",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOption",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nextOptionReadyAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "optionPremium",
          "type": "uint256"
        }
      ],
      "name": "rollToNextOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newOptionAllocation",
          "type": "uint16"
        }
      ],
      "name": "setOptionAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint56",
          "name": "minimumSupply",
          "type": "uint56"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "withdrawInstantly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb452ca170213c8ae7cc7f1b795ccb83b71a81c4a63d15173fc39614daa7bb2f9",
  "receipt": {
    "to": null,
    "from": "0xd4816D144C005B29dF24C8eb1865fB8A1e79FdDE",
    "contractAddress": "0x551C441D05E81E5A43CFD5afa7e9589039D67625",
    "transactionIndex": 10,
    "gasUsed": "4676343",
    "logsBloom": "0x
    "blockHash": "0xfb33b32de2d8b1eb66e4a5c9a6508d596847aecac3774e53db6ba42674e1817c",
    "transactionHash": "0xb452ca170213c8ae7cc7f1b795ccb83b71a81c4a63d15173fc39614daa7bb2f9",
    "logs": [],
    "blockNumber": 7809894,
    "cumulativeGasUsed": "6589749",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
    "0x9e3b94819aaF6de606C4Aa844E3215725b997064",
    "0xCCF6629aEaB734E621Cc59EBb0297196774fDb9D",
    "0xb5D00F83680ea5E078e911995c64b43Fbfd1eE61",
    "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10"
  ],
  "solcInputHash": "97273a7349aad427441e82743fac622c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gammaController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisEasyAuction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CloseLong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InstantWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOptionAllocation\",\"type\":\"uint256\"}],\"name\":\"NewOptionAllocationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"OpenLong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"PlaceAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMMA_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNOSIS_EASY_AUCTION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSellOrder\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBeforePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAuctionOtokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitAndClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartyThetaVault\",\"outputs\":[{\"internalType\":\"contract IRibbonThetaVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numRounds\",\"type\":\"uint256\"}],\"name\":\"initRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_counterpartyThetaVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optionAllocation\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOptionReadyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nextOption\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOption\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionReadyAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionPremium\",\"type\":\"uint256\"}],\"name\":\"rollToNextOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newOptionAllocation\",\"type\":\"uint16\"}],\"name\":\"setOptionAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_gammaController\":\"is the contract address for opyn actions\",\"_gnosisEasyAuction\":\"is the contract address that facilitates gnosis auctions\",\"_marginPool\":\"is the contract address for providing collateral to opyn\",\"_uniswapFactory\":\"is the contract address of UniswapV3 factory containing pools information\",\"_uniswapRouter\":\"is the contract address of UniswapV3 router that handles swaps\",\"_usdc\":\"is the USDC contract\",\"_weth\":\"is the Wrapped Ether contract\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\"}},\"depositFor(uint256,address)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"creditor\":\"is the address that can claim/withdraw deposited amount\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,address,uint256,uint256,string,string,address,uint256,(bool,uint8,address,address,uint56,uint104))\":{\"params\":{\"_counterpartyThetaVault\":\"is the address of the counterparty theta vault of this delta vault\",\"_feeRecipient\":\"is the address to recieve vault performance and management fees\",\"_managementFee\":\"is the management fee pct.\",\"_optionAllocation\":\"is the pct of the funds to allocate towards the weekly option\",\"_owner\":\"is the owner of the vault with critical permissions\",\"_performanceFee\":\"is the perfomance fee pct.\",\"_tokenName\":\"is the name of the token\",\"_tokenSymbol\":\"is the symbol of the token\",\"_vaultParams\":\"is the struct with vault general data\"}},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rollToNextOption(uint256)\":{\"params\":{\"optionPremium\":\"is the premium per token to pay in `asset`. Same decimals as `asset` (ex: 1 * 10 ** 8 means 1 WBTC per oToken)\"}},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setNewKeeper(address)\":{\"params\":{\"newKeeper\":\"is the address of the new keeper\"}},\"setOptionAllocation(uint16)\":{\"params\":{\"newOptionAllocation\":\"is the option % allocation\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawInstantly(uint256)\":{\"params\":{\"share\":\"is the amount of shares to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELAY()\":{\"notice\":\"15 minute timelock between commitAndClose and rollToNexOption.\"},\"PERIOD()\":{\"notice\":\"7 day period between each options sale.\"},\"USDC()\":{\"notice\":\"USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"},\"WETH()\":{\"notice\":\"WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"},\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"claimAuctionOtokens()\":{\"notice\":\"Claims the delta vault's oTokens from latest auction\"},\"commitAndClose()\":{\"notice\":\"Closes the existing long position for the vault.         This allows all the users to withdraw if the next option is malicious.\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"constructor\":{\"notice\":\"Initializes the contract with immutable variables\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"deposit(uint256)\":{\"notice\":\"Deposits the `asset` from msg.sender.\"},\"depositETH()\":{\"notice\":\"Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\"},\"depositFor(uint256,address)\":{\"notice\":\"Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initialize(address,address,address,uint256,uint256,string,string,address,uint256,(bool,uint8,address,address,uint56,uint104))\":{\"notice\":\"Initializes the OptionVault contract with storage variables.\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"keeper()\":{\"notice\":\"role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"optionState()\":{\"notice\":\"Vault's state of the options sold and the timelocked option\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"rollToNextOption(uint256)\":{\"notice\":\"Rolls the vault's funds into a new long position.\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"},\"setOptionAllocation(uint16)\":{\"notice\":\"Sets the new % allocation of funds towards options purchases (2 decimals. ex: 10 * 10**2 is 10%) 0 < newOptionAllocation < 1000. 1000 = 10%.\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts locked into a short position\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawInstantly(uint256)\":{\"notice\":\"Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"notice\":\"UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonDeltaVaultStorage. RibbonDeltaVault should not inherit from any other contract aside from RibbonVault, RibbonDeltaVaultStorage\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/BaseVaults/RibbonDeltaVault.sol\":\"RibbonDeltaVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41ed736eb79c71ea59fadcc23cfbc4ff1ccb802458ede6bd69b18e5abdcefdce\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x226639ee48018ec78891a829816799c9b9f6bbec7e84c4ca43cdc7dc8a07628f\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf2dcc40727ef8d8723ee3193cefdeffa3c2b5a56b0a444d233eafceee0d6f298\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaca9a37c1f43c85c81c799997e75193df1980191bd6ce9b5f7b980d97e565dbf\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.4;\\npragma abicoder v2;\\n\\n/// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x7b367d72a3142c31fe6dc809205b2e95212079a11593deccfb0411c3e0abc609\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\\npragma solidity =0.8.4;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n}\\n\",\"keccak256\":\"0x835bf8872f3689f25e420cc99ba7c70d0877c746312356df9ff0ec792e4fd7ff\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x027f79659aea02845423eb96cfc4f926efb2214745463e3cbcfe4e4c24a065d9\",\"license\":\"MIT\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity =0.8.4;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(\\n                        add(tempBytes, lengthmod),\\n                        mul(0x20, iszero(lengthmod))\\n                    )\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(\\n                            add(\\n                                add(_bytes, lengthmod),\\n                                mul(0x20, iszero(lengthmod))\\n                            ),\\n                            _start\\n                        )\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint24)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xbc69a9dd251991910e68cef3a97810e4154de96c0dcf3931609882f58d7f9d7a\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 oTokenPremium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocation;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\n\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            DSMath\\n                .wmul(\\n                oTokenSellAmount.mul(10**10),\\n                auctionDetails\\n                    .oTokenPremium\\n            )\\n                .div(10**(uint256(18).sub(auctionDetails.assetDecimals)));\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of oToken we minted and are selling\\n            auctionDetails.oTokenAddress,\\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\\n            auctionDetails.asset,\\n            // orders can be cancelled at any time during the auction\\n            auctionEnd,\\n            // order will last for `duration`\\n            auctionEnd,\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.oTokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            .mul(bidDetails.optionAllocation)\\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\\n            .div(bidDetails.optionPremium)\\n            .div(10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.oTokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n\\n        return (sellAmount, buyAmount, userId);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address oTokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but otokens will be transferred to gnosis.\\n        uint256 oTokenSellAmount =\\n            IERC20(oTokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        return oTokenSellAmount;\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        uint256 optionPremium =\\n            premiumPricer.getPremium(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x135c9d8faacd784cae610486c10f95b263ca8e9178524c026ce00c036b663122\",\"license\":\"MIT\"},\"contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\\npragma solidity =0.8.4;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH =\\n        POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x6a41d695705efc4116fece0e2986437d8f033cf8278744b5e673a94f33b4933d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x90bc4b56ee48f314d1e326903bdb2926bed143fa4e6867a7d44975503106bf56\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/UniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISwapRouter} from \\\"../interfaces/ISwapRouter.sol\\\";\\nimport {IUniswapV3Factory} from \\\"../interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"./Path.sol\\\";\\n\\nlibrary UniswapRouter {\\n    using Path for bytes;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Check if the path set for swap is valid\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @param validTokenIn is the contract address of the correct tokenIn\\n     * @param validTokenOut is the contract address of the correct tokenOut\\n     * @param uniswapFactory is the contract address of UniswapV3 factory\\n     * @return isValidPath is whether the path is valid\\n     */\\n    function checkPath(\\n        bytes memory swapPath,\\n        address validTokenIn,\\n        address validTokenOut,\\n        address uniswapFactory\\n    ) internal view returns (bool isValidPath) {\\n        // Function checks if the tokenIn and tokenOut in the swapPath\\n        // matches the validTokenIn and validTokenOut specified.\\n        address tokenIn;\\n        address tokenOut;\\n        address tempTokenIn;\\n        uint24 fee;\\n        IUniswapV3Factory factory = IUniswapV3Factory(uniswapFactory);\\n\\n        // Return early if swapPath is below the bare minimum (43)\\n        require(swapPath.length >= 43, \\\"Path too short\\\");\\n        // Return early if swapPath is above the max (66)\\n        // At worst we have 2 hops e.g. USDC > WETH > asset\\n        require(swapPath.length <= 66, \\\"Path too long\\\");\\n\\n        // Decode the first pool in path\\n        (tokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\\n\\n        // Check to factory if pool exists\\n        require(\\n            factory.getPool(tokenIn, tokenOut, fee) != address(0),\\n            \\\"Pool does not exist\\\"\\n        );\\n\\n        // Check next pool if multiple pools\\n        while (swapPath.hasMultiplePools()) {\\n            // Remove the first pool from path\\n            swapPath = swapPath.skipToken();\\n            // Check the next pool and update tokenOut\\n            (tempTokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\\n\\n            require(\\n                factory.getPool(tokenIn, tokenOut, fee) != address(0),\\n                \\\"Pool does not exist\\\"\\n            );\\n        }\\n\\n        return tokenIn == validTokenIn && tokenOut == validTokenOut;\\n    }\\n\\n    /**\\n     * @notice Swaps assets by calling UniswapV3 router\\n     * @param recipient is the address of recipient of the tokenOut\\n     * @param tokenIn is the address of the token given to the router\\n     * @param amountIn is the amount of tokenIn given to the router\\n     * @param minAmountOut is the minimum acceptable amount of tokenOut received from swap\\n     * @param router is the contract address of UniswapV3 router\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @return amountOut is the amount of tokenOut received from the swap\\n     */\\n    function swap(\\n        address recipient,\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address router,\\n        bytes calldata swapPath\\n    ) internal returns (uint256 amountOut) {\\n        // Approve router to spend tokenIn\\n        IERC20(tokenIn).safeApprove(router, amountIn);\\n\\n        // Swap assets using UniswapV3 router\\n        ISwapRouter.ExactInputParams memory swapParams =\\n            ISwapRouter.ExactInputParams({\\n                recipient: recipient,\\n                path: swapPath,\\n                deadline: block.timestamp.add(10 minutes),\\n                amountIn: amountIn,\\n                amountOutMinimum: minAmountOut\\n            });\\n\\n        amountOut = ISwapRouter(router).exactInput(swapParams);\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0x47c58968ad7fce1c5893ed0faa3ee8f8c03c088e31d6f633ed5c49cc66d3713e\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x462aa30f83c322d3129ded8da0d5f8430425a04c8c2d87787f33d7d5c41c1571\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\nimport {UniswapRouter} from \\\"./UniswapRouter.sol\\\";\\n\\nlibrary VaultLifecycle {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverrideRound;\\n        uint256 overriddenStrikePrice;\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param strikeSelection is the address of the contract with strike selection logic\\n     * @param optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param premiumDiscount is the vault's discount applied to the premium\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        address strikeSelection,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry;\\n\\n        // uninitialized state\\n        if (closeParams.currentOption == address(0)) {\\n            expiry = getNextFriday(block.timestamp);\\n        } else {\\n            expiry = getNextFriday(\\n                IOtoken(closeParams.currentOption).expiryTimestamp()\\n            );\\n        }\\n\\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        // get the black scholes premium of the option\\n        premium = GnosisAuction.getOTokenPremium(\\n            otokenAddress,\\n            optionsPremiumPricer,\\n            premiumDiscount\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param asset is the address of the vault's asset\\n     * @param decimals is the decimals of the asset\\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        uint256 balanceForVaultFees;\\n        {\\n            uint256 pricePerShareBeforeFee =\\n                ShareMath.pricePerShare(\\n                    params.currentShareSupply,\\n                    currentBalance,\\n                    pendingAmount,\\n                    params.decimals\\n                );\\n\\n            uint256 queuedWithdrawBeforeFee =\\n                params.currentShareSupply > 0\\n                    ? ShareMath.sharesToAsset(\\n                        queuedWithdrawShares,\\n                        pricePerShareBeforeFee,\\n                        params.decimals\\n                    )\\n                    : 0;\\n\\n            // Deduct the difference between the newly scheduled withdrawals\\n            // and the older withdrawals\\n            // so we can charge them fees before they leave\\n            uint256 withdrawAmountDiff =\\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\\n                    ? queuedWithdrawBeforeFee.sub(\\n                        params.lastQueuedWithdrawAmount\\n                    )\\n                    : 0;\\n\\n            balanceForVaultFees = currentBalance\\n                .sub(queuedWithdrawBeforeFee)\\n                .add(withdrawAmountDiff);\\n        }\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycle\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance.sub(totalVaultFee);\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply,\\n                currentBalance,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n\\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\\n\\n            queuedWithdrawAmount = newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    queuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                )\\n                : 0;\\n        }\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\n                .mul(10**18) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n\\n            if (collateralDecimals > 8) {\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n                if (mintAmount > scaleBy) {\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                }\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param oldOption is the address of the old option\\n     * @param asset is the address of the vault's asset\\n     * @return amount of asset received by exercising the option\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param currentOption is the address of the current option\\n     * @return amount of collateral redeemed by burning otokens\\n     */\\n    function burnOtokens(address gammaController, address currentOption)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 numOTokensToBurn =\\n            IERC20(currentOption).balanceOf(address(this));\\n\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\n\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning `amount` of oTokens from the ribbon vault,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            numOTokensToBurn, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\n                vault.shortAmounts[0]\\n            ), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance.sub(pendingAmount)\\n                : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? lockedBalanceSansPending\\n                    .sub(lastLockedAmount)\\n                    .mul(performanceFeePercent)\\n                    .div(100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\\n                    100 * Vault.FEE_MULTIPLIER\\n                )\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrice is the strike price of the option\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return the address of the option\\n     */\\n    function getOrDeployOtoken(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(\\n            otoken,\\n            vaultParams,\\n            collateralAsset,\\n            closeParams.USDC,\\n            closeParams.delay\\n        );\\n\\n        return otoken;\\n    }\\n\\n    /**\\n     * @notice Starts the gnosis auction\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\n     * @return the auction id of the newly created auction\\n     */\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Settles the gnosis auction\\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\\n     * @param auctionID is the auction ID of the gnosis easy auction\\n     */\\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\\n        internal\\n    {\\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\\n    }\\n\\n    /**\\n     * @notice Swaps tokens using UniswapV3 router\\n     * @param tokenIn is the token address to swap\\n     * @param minAmountOut is the minimum acceptable amount of tokenOut received from swap\\n     * @param router is the contract address of UniswapV3 router\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     */\\n    function swap(\\n        address tokenIn,\\n        uint256 minAmountOut,\\n        address router,\\n        bytes calldata swapPath\\n    ) external {\\n        uint256 balance = IERC20(tokenIn).balanceOf(address(this));\\n\\n        if (balance > 0) {\\n            UniswapRouter.swap(\\n                address(this),\\n                tokenIn,\\n                balance,\\n                minAmountOut,\\n                router,\\n                swapPath\\n            );\\n        }\\n    }\\n\\n    function checkPath(\\n        bytes calldata swapPath,\\n        address validTokenIn,\\n        address validTokenOut,\\n        address uniswapFactory\\n    ) external view returns (bool isValidPath) {\\n        return\\n            UniswapRouter.checkPath(\\n                swapPath,\\n                validTokenIn,\\n                validTokenOut,\\n                uniswapFactory\\n            );\\n    }\\n\\n    /**\\n     * @notice Places a bid in an auction\\n     * @param bidDetails is the struct with all the details of the\\n      bid including the auction's id and how much to bid\\n     */\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\n        external\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        return GnosisAuction.placeBid(bidDetails);\\n    }\\n\\n    /**\\n     * @notice Claims the oTokens belonging to the vault\\n     * @param auctionSellOrder is the sell order of the bid\\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\\n     holding custody to the funds\\n     * @param counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     */\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) external {\\n        GnosisAuction.claimAuctionOtokens(\\n            auctionSellOrder,\\n            gnosisEasyAuction,\\n            counterpartyThetaVault\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param owner is the owner of the vault with critical permissions\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        address owner,\\n        address keeper,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param currentExpiry is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 currentExpiry)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((currentExpiry / 1 days) + 4) % 7;\\n        uint256 nextFriday = currentExpiry + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed currentExpiry is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (currentExpiry >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n}\\n\",\"keccak256\":\"0x7b66073a016770b88017b7617f8ba945542ca6a68b1879364f950d88467b131e\",\"license\":\"MIT\"},\"contracts/storage/RibbonDeltaVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\nabstract contract RibbonDeltaVaultStorageV1 {\\n    // Ribbon counterparty theta vault\\n    IRibbonThetaVault public counterpartyThetaVault;\\n    // % of funds to be used for weekly option purchase\\n    uint256 public optionAllocation;\\n    // Delta vault equivalent of lockedAmount\\n    uint256 public balanceBeforePremium;\\n    // User Id of delta vault in latest gnosis auction\\n    Vault.AuctionSellOrder public auctionSellOrder;\\n}\\n\\nabstract contract RibbonDeltaVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint128 public lastQueuedWithdrawAmount;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonDeltaVaultStorage\\n// e.g. RibbonDeltaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonDeltaVaultStorage is RibbonDeltaVaultStorageV1, RibbonDeltaVaultStorageV2\\nabstract contract RibbonDeltaVaultStorage is\\n    RibbonDeltaVaultStorageV1,\\n    RibbonDeltaVaultStorageV2\\n{\\n\\n}\\n\",\"keccak256\":\"0xaa207428eb8dfe2fb9e3d51694e69d677befd079801c7bff05ed587bc393caf6\",\"license\":\"MIT\"},\"contracts/vaults/BaseVaults/RibbonDeltaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {\\n    RibbonDeltaVaultStorage\\n} from \\\"../../storage/RibbonDeltaVaultStorage.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../../interfaces/IRibbonThetaVault.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonDeltaVaultStorage.\\n * RibbonDeltaVault should not inherit from any other contract aside from RibbonVault, RibbonDeltaVaultStorage\\n */\\ncontract RibbonDeltaVault is RibbonVault, RibbonDeltaVaultStorage {\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenLong(\\n        address indexed options,\\n        uint256 purchaseAmount,\\n        uint256 premium,\\n        address indexed manager\\n    );\\n\\n    event CloseLong(\\n        address indexed options,\\n        uint256 profitAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionAllocationSet(\\n        uint256 optionAllocation,\\n        uint256 newOptionAllocation\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 share,\\n        uint256 round\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _uniswapRouter is the contract address of UniswapV3 router that handles swaps\\n     * @param _uniswapFactory is the contract address of UniswapV3 factory containing\\n     pools information\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _uniswapRouter,\\n        address _uniswapFactory\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction,\\n            _uniswapRouter,\\n            _uniswapFactory\\n        )\\n    {}\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     * @param _optionAllocation is the pct of the funds to allocate towards the weekly option\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _counterpartyThetaVault,\\n        uint256 _optionAllocation,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _managementFee,\\n            _performanceFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n        require(\\n            _counterpartyThetaVault != address(0),\\n            \\\"!_counterpartyThetaVault\\\"\\n        );\\n        require(\\n            IRibbonThetaVault(_counterpartyThetaVault).vaultParams().asset ==\\n                vaultParams.asset,\\n            \\\"!_counterpartyThetaVault: asset\\\"\\n        );\\n        // 1000 = 10%. Needs to be less than 10% of the funds allocated to option.\\n        require(\\n            _optionAllocation > 0 &&\\n                _optionAllocation < 10 * Vault.OPTION_ALLOCATION_MULTIPLIER,\\n            \\\"!_optionAllocation\\\"\\n        );\\n        counterpartyThetaVault = IRibbonThetaVault(_counterpartyThetaVault);\\n        optionAllocation = _optionAllocation;\\n    }\\n\\n    /**\\n     * @notice Updates the price per share of the current round. The current round\\n     * pps will change right after call rollToNextOption as the gnosis auction contract\\n     * takes custody of a % of `asset` tokens, and right after we claim the tokens from\\n     * the action as we may recieve some of `asset` tokens back alongside the oToken,\\n     * depending on the gnosis auction outcome. Finally it will change at the end of the week\\n     * if the oTokens are ITM\\n     */\\n    function updatePPS(bool isWithdraw) internal {\\n        uint256 currentRound = vaultState.round;\\n        if (\\n            !isWithdraw ||\\n            roundPricePerShare[currentRound] <= ShareMath.PLACEHOLDER_UINT\\n        ) {\\n            roundPricePerShare[currentRound] = ShareMath.pricePerShare(\\n                totalSupply(),\\n                IERC20(vaultParams.asset).balanceOf(address(this)),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n        }\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new % allocation of funds towards options purchases (2 decimals. ex: 10 * 10**2 is 10%)\\n     * 0 < newOptionAllocation < 1000. 1000 = 10%.\\n     * @param newOptionAllocation is the option % allocation\\n     */\\n    function setOptionAllocation(uint16 newOptionAllocation)\\n        external\\n        onlyOwner\\n    {\\n        // Needs to be less than 10%\\n        require(\\n            newOptionAllocation > 0 &&\\n                newOptionAllocation < 10 * Vault.OPTION_ALLOCATION_MULTIPLIER,\\n            \\\"Invalid allocation\\\"\\n        );\\n\\n        emit NewOptionAllocationSet(optionAllocation, newOptionAllocation);\\n\\n        optionAllocation = newOptionAllocation;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param share is the amount of shares to withdraw\\n     */\\n    function withdrawInstantly(uint256 share) external nonReentrant {\\n        require(share > 0, \\\"!numShares\\\");\\n\\n        updatePPS(true);\\n\\n        (uint256 sharesToWithdrawFromPending, uint256 sharesLeftForWithdrawal) =\\n            _withdrawFromNewDeposit(share);\\n\\n        // Withdraw shares from pending amount\\n        if (sharesToWithdrawFromPending > 0) {\\n            vaultState.totalPending = uint128(\\n                uint256(vaultState.totalPending).sub(\\n                    sharesToWithdrawFromPending\\n                )\\n            );\\n        }\\n        uint256 currentRound = vaultState.round;\\n\\n        // If we need to withdraw beyond current round deposit\\n        if (sharesLeftForWithdrawal > 0) {\\n            (uint256 heldByAccount, uint256 heldByVault) =\\n                shareBalances(msg.sender);\\n\\n            require(\\n                sharesLeftForWithdrawal <= heldByAccount.add(heldByVault),\\n                \\\"Insufficient balance\\\"\\n            );\\n\\n            if (heldByAccount < sharesLeftForWithdrawal) {\\n                // Redeem all shares custodied by vault to user\\n                _redeem(0, true);\\n            }\\n\\n            // Burn shares\\n            _burn(msg.sender, sharesLeftForWithdrawal);\\n        }\\n\\n        emit InstantWithdraw(msg.sender, share, currentRound);\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                share,\\n                roundPricePerShare[currentRound],\\n                vaultParams.decimals\\n            );\\n        transferAsset(msg.sender, withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Closes the existing long position for the vault.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        address counterpartyNextOption =\\n            counterpartyThetaVault.optionState().nextOption;\\n        require(counterpartyNextOption != address(0), \\\"!thetavaultclosed\\\");\\n\\n        updatePPS(true);\\n\\n        optionState.nextOption = counterpartyNextOption;\\n\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        optionState.currentOption = address(0);\\n        vaultState.lastLockedAmount = uint104(balanceBeforePremium);\\n\\n        // redeem\\n        if (oldOption != address(0)) {\\n            uint256 profitAmount =\\n                VaultLifecycle.settleLong(\\n                    GAMMA_CONTROLLER,\\n                    oldOption,\\n                    vaultParams.asset\\n                );\\n            emit CloseLong(oldOption, profitAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new long position.\\n     * @param optionPremium is the premium per token to pay in `asset`.\\n       Same decimals as `asset` (ex: 1 * 10 ** 8 means 1 WBTC per oToken)\\n     */\\n    function rollToNextOption(uint256 optionPremium)\\n        external\\n        onlyKeeper\\n        nonReentrant\\n    {\\n        (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        ) = _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = uint128(queuedWithdrawAmount);\\n\\n        balanceBeforePremium = lockedBalance;\\n\\n        GnosisAuction.BidDetails memory bidDetails;\\n\\n        bidDetails.auctionId = counterpartyThetaVault.optionAuctionID();\\n        bidDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        bidDetails.oTokenAddress = newOption;\\n        bidDetails.asset = vaultParams.asset;\\n        bidDetails.assetDecimals = vaultParams.decimals;\\n        bidDetails.lockedBalance = lockedBalance;\\n        bidDetails.optionAllocation = optionAllocation;\\n        bidDetails.optionPremium = optionPremium;\\n        bidDetails.bidder = msg.sender;\\n\\n        // place bid\\n        (uint256 sellAmount, uint256 buyAmount, uint64 userId) =\\n            VaultLifecycle.placeBid(bidDetails);\\n\\n        auctionSellOrder.sellAmount = uint96(sellAmount);\\n        auctionSellOrder.buyAmount = uint96(buyAmount);\\n        auctionSellOrder.userId = userId;\\n\\n        updatePPS(false);\\n\\n        emit OpenLong(newOption, buyAmount, sellAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Claims the delta vault's oTokens from latest auction\\n     */\\n    function claimAuctionOtokens() external nonReentrant {\\n        VaultLifecycle.claimAuctionOtokens(\\n            auctionSellOrder,\\n            GNOSIS_EASY_AUCTION,\\n            address(counterpartyThetaVault)\\n        );\\n        updatePPS(false);\\n    }\\n\\n    /**\\n     * @notice Withdraws from the most recent deposit which has not been processed\\n     * @param share is how many shares to withdraw in total\\n     * @return the shares to remove from pending\\n     * @return the shares left to withdraw\\n     */\\n    function _withdrawFromNewDeposit(uint256 share)\\n        private\\n        returns (uint256, uint256)\\n    {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // Immediately get what is in the pending deposits, without need for checking pps\\n        if (\\n            depositReceipt.round == vaultState.round &&\\n            depositReceipt.amount > 0\\n        ) {\\n            uint256 receiptShares =\\n                ShareMath.assetToShares(\\n                    depositReceipt.amount,\\n                    roundPricePerShare[depositReceipt.round],\\n                    vaultParams.decimals\\n                );\\n            uint256 sharesWithdrawn = Math.min(receiptShares, share);\\n            // Subtraction underflow checks already ensure it is smaller than uint104\\n            depositReceipt.amount = uint104(\\n                ShareMath.sharesToAsset(\\n                    uint256(receiptShares).sub(sharesWithdrawn),\\n                    roundPricePerShare[depositReceipt.round],\\n                    vaultParams.decimals\\n                )\\n            );\\n            return (sharesWithdrawn, share.sub(sharesWithdrawn));\\n        }\\n\\n        return (0, share);\\n    }\\n}\\n\",\"keccak256\":\"0xf56fb27ee19d87c065dd9ac35234a75b8e6cd4f4f2c169330c37f45ee78a9455\",\"license\":\"MIT\"},\"contracts/vaults/BaseVaults/base/RibbonVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {Vault} from \\\"../../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../../libraries/ShareMath.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\ncontract RibbonVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n    uint256[30] private ____gap;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 15 minutes;\\n\\n    /// @notice 7 day period between each options sale.\\n    uint256 public constant PERIOD = 7 days;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    // UNISWAP_ROUTER is the contract address of UniswapV3 Router which handles swaps\\n    // https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\n    address public immutable UNISWAP_ROUTER;\\n\\n    // UNISWAP_FACTORY is the contract address of UniswapV3 Factory which stores pool information\\n    // https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\\n    address public immutable UNISWAP_FACTORY;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _uniswapRouter is the contract address for UniswapV3 router which handles swaps\\n     * @param _uniswapFactory is the contract address for UniswapV3 factory\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _uniswapRouter,\\n        address _uniswapFactory\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_uniswapRouter != address(0), \\\"!_uniswapRouter\\\");\\n        require(_uniswapFactory != address(0), \\\"!_uniswapFactory\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n        UNISWAP_ROUTER = _uniswapRouter;\\n        UNISWAP_FACTORY = _uniswapFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function baseInitialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) internal initializer {\\n        VaultLifecycle.verifyInitializerParams(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _performanceFee,\\n            _managementFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        keeper = _keeper;\\n\\n        feeRecipient = _feeRecipient;\\n        performanceFee = _performanceFee;\\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\\n            WEEKS_PER_YEAR\\n        );\\n        vaultParams = _vaultParams;\\n\\n        uint256 assetBalance =\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\\n     */\\n    function depositETH() external payable nonReentrant {\\n        require(vaultParams.asset == WETH, \\\"!WETH\\\");\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        _depositFor(msg.value, msg.sender);\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param amount is the amount of `asset` to deposit\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(uint256 amount, address creditor)\\n        external\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"!amount\\\");\\n        require(creditor != address(0));\\n\\n        _depositFor(amount, creditor);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n        transferAsset(msg.sender, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /*\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /*\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @return newOption is the new option address\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n     */\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\n        internal\\n        returns (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        )\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        address recipient = feeRecipient;\\n        uint256 mintShares;\\n        uint256 performanceFeeInAsset;\\n        uint256 totalVaultFee;\\n        {\\n            uint256 newPricePerShare;\\n            (\\n                lockedBalance,\\n                queuedWithdrawAmount,\\n                newPricePerShare,\\n                mintShares,\\n                performanceFeeInAsset,\\n                totalVaultFee\\n            ) = VaultLifecycle.rollover(\\n                vaultState,\\n                VaultLifecycle.RolloverParams(\\n                    vaultParams.decimals,\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee\\n                )\\n            );\\n\\n            optionState.currentOption = newOption;\\n            optionState.nextOption = address(0);\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                recipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n        }\\n\\n        _mint(address(this), mintShares);\\n\\n        if (totalVaultFee > 0) {\\n            transferAsset(payable(recipient), totalVaultFee);\\n        }\\n\\n        return (newOption, lockedBalance, queuedWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) internal {\\n        address asset = vaultParams.asset;\\n        if (asset == WETH) {\\n            IWETH(WETH).withdraw(amount);\\n            (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            return;\\n        }\\n        IERC20(asset).safeTransfer(recipient, amount);\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        return\\n            uint256(vaultState.lockedAmount).add(\\n                IERC20(vaultParams.asset).balanceOf(address(this))\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Helper to check whether swap path goes from stables (USDC) to vault's underlying asset\\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\\n     * @return boolean whether the path is valid\\n     */\\n    function _checkPath(bytes calldata swapPath) internal view returns (bool) {\\n        return\\n            VaultLifecycle.checkPath(\\n                swapPath,\\n                USDC,\\n                vaultParams.asset,\\n                UNISWAP_FACTORY\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa0d83adec4c3ae8f5be91a8aa2279e16d94b65639543544c174281da6d399515\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162005748380380620057488339810160408190526200003591620002b0565b868686868686866001600160a01b038716620000815760405162461bcd60e51b8152602060048201526006602482015265042beeecae8d60d31b60448201526064015b60405180910390fd5b6001600160a01b038616620000c25760405162461bcd60e51b8152602060048201526006602482015265215f7573646360d01b604482015260640162000078565b6001600160a01b0383166200011a5760405162461bcd60e51b815260206004820152601360248201527f215f676e6f7369734561737941756374696f6e00000000000000000000000000604482015260640162000078565b6001600160a01b038516620001665760405162461bcd60e51b815260206004820152601160248201527010afb3b0b6b6b0a1b7b73a3937b63632b960791b604482015260640162000078565b6001600160a01b038416620001ad5760405162461bcd60e51b815260206004820152600c60248201526b0857db585c99da5b941bdbdb60a21b604482015260640162000078565b6001600160a01b038216620001f75760405162461bcd60e51b815260206004820152600f60248201526e10afbab734b9bbb0b82937baba32b960891b604482015260640162000078565b6001600160a01b038116620002425760405162461bcd60e51b815260206004820152601060248201526f215f756e6973776170466163746f727960801b604482015260640162000078565b6001600160601b0319606097881b811660805295871b861660a05293861b851660c05291851b841660e052841b831661010052831b82166101205290911b1661014052506200034495505050505050565b80516001600160a01b0381168114620002ab57600080fd5b919050565b600080600080600080600060e0888a031215620002cb578283fd5b620002d68862000293565b9650620002e66020890162000293565b9550620002f66040890162000293565b9450620003066060890162000293565b9350620003166080890162000293565b92506200032660a0890162000293565b91506200033660c0890162000293565b905092959891949750929550565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c615363620003e56000396000610d0501526000610d8f0152600081816107fc0152818161114f015261232f0152600061072e01526000818161048f01526125bd01526000610977015260008181610bf60152818161278d01528181612839015281816136b201526136ef01526153636000f3fe6080604052600436106103e45760003560e01c80638da5cb5b11610208578063b70a293911610118578063dd62ed3e116100ab578063f2fde38b1161007a578063f2fde38b14610e81578063f6326fb314610ea1578063f656ba5114610ea9578063f756fa2114610ede578063fe56e23214610ef357600080fd5b8063dd62ed3e14610df1578063e74b981b14610e37578063e7b6951014610e57578063ea00b1ca14610e6c57600080fd5b8063d164cc15116100e7578063d164cc1514610d5d578063d826492014610d7d578063da7c306b14610db1578063db006a7514610dd157600080fd5b8063b70a293914610cd3578063c74c0fac14610cf3578063c9f369c214610d27578063ce7c2ac214610d3d57600080fd5b8063a457c2d71161019b578063ad5c46481161016a578063ad5c464814610be4578063ad7a672f14610c18578063ae94c7cd14610c2d578063b4d1d79514610c9c578063b6b55f2514610cb357600080fd5b8063a457c2d714610b6e578063a6f7f5d614610b8e578063a9059cbb14610ba4578063aced166114610bc457600080fd5b80639fcc2d75116101d75780639fcc2d7514610a1f578063a083ff1714610acb578063a285c9e814610b2e578063a2db9d8314610b5057600080fd5b80638da5cb5b146109b757806395d89b41146109d557806399530b06146109ea5780639be43daa146109ff57600080fd5b8063469048401161030357806370897b23116102965780637e108d52116102655780637e108d521461090257806387153eb114610922578063877887821461094f57806389a30271146109655780638b10cc7c1461099957600080fd5b806370897b231461083357806370a0823114610853578063715018a6146108895780637a9262a21461089e57600080fd5b80636719b2ee116102d25780636719b2ee1461075057806369b41170146107d45780636c10f66c146107ea5780636f31ab341461081e57600080fd5b806346904840146106a457806347786d37146106c4578063503c70aa146106e4578063650cce8a1461071c57600080fd5b80632775d01c1161037b57806336efd16f1161034a57806336efd16f1461062657806339509351146106465780633f23bb73146106665780633f90916a1461068657600080fd5b80632775d01c1461059e57806328004837146105be578063313ce567146105de578063355274ea1461060857600080fd5b80631a92f6c2116103b75780631a92f6c21461047d5780631b60612a146104c957806323b872dd146104eb5780632728f3331461050b57600080fd5b806306fdde03146103e9578063095ea7b314610414578063150d3ec21461044457806318160ddd14610468575b600080fd5b3480156103f557600080fd5b506103fe610f13565b60405161040b9190614e09565b60405180910390f35b34801561042057600080fd5b5061043461042f366004614a5a565b610fa5565b604051901515815260200161040b565b34801561045057600080fd5b5061045a60f75481565b60405190815260200161040b565b34801561047457600080fd5b5060995461045a565b34801561048957600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161040b565b3480156104d557600080fd5b506104e96104e4366004614be6565b610fbc565b005b3480156104f757600080fd5b50610434610506366004614a1a565b6112f6565b34801561051757600080fd5b5060cf5460d0546105599161ffff8116916001600160681b03620100008304811692600160781b900416906001600160801b0380821691600160801b90041685565b6040805161ffff90961686526001600160681b03948516602087015293909216928401929092526001600160801b03918216606084015216608082015260a00161040b565b3480156105aa57600080fd5b506104e96105b9366004614be6565b6113a2565b3480156105ca57600080fd5b5060f5546104b1906001600160a01b031681565b3480156105ea57600080fd5b5060cc54610100900460ff1660405160ff909116815260200161040b565b34801561061457600080fd5b5060ce546001600160681b031661045a565b34801561063257600080fd5b506104e9610641366004614c16565b611545565b34801561065257600080fd5b50610434610661366004614a5a565b6115e7565b34801561067257600080fd5b5061045a6106813660046148f2565b611623565b34801561069257600080fd5b5060d0546001600160801b031661045a565b3480156106b057600080fd5b5060d3546104b1906001600160a01b031681565b3480156106d057600080fd5b506104e96106df366004614be6565b611676565b3480156106f057600080fd5b5060f954610704906001600160801b031681565b6040516001600160801b03909116815260200161040b565b34801561072857600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561075c57600080fd5b506107a361076b3660046148f2565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b03169082015260600161040b565b3480156107e057600080fd5b5061045a61038481565b3480156107f657600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561082a57600080fd5b506104e9611751565b34801561083f57600080fd5b506104e961084e366004614be6565b61178e565b34801561085f57600080fd5b5061045a61086e3660046148f2565b6001600160a01b031660009081526097602052604090205490565b34801561089557600080fd5b506104e9611855565b3480156108aa57600080fd5b506108e06108b93660046148f2565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b0390911660208301520161040b565b34801561090e57600080fd5b506104e961091d366004614be6565b61188b565b34801561092e57600080fd5b5061045a61093d366004614be6565b60ca6020526000908152604090205481565b34801561095b57600080fd5b5061045a60d55481565b34801561097157600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b3480156109a557600080fd5b5060d2546001600160a01b03166104b1565b3480156109c357600080fd5b506065546001600160a01b03166104b1565b3480156109e157600080fd5b506103fe611aa9565b3480156109f657600080fd5b5061045a611ab8565b348015610a0b57600080fd5b506104e9610a1a366004614be6565b611af2565b348015610a2b57600080fd5b5060cc5460cd5460ce54610a7b9260ff808216936101008304909116926001600160a01b036201000090930483169282169166ffffffffffffff600160a01b90910416906001600160681b031686565b60408051961515875260ff90951660208701526001600160a01b03938416948601949094529116606084015266ffffffffffffff1660808301526001600160681b031660a082015260c00161040b565b348015610ad757600080fd5b5060d15460d254610b02916001600160a01b039081169190811690600160a01b900463ffffffff1683565b604080516001600160a01b03948516815293909216602084015263ffffffff169082015260600161040b565b348015610b3a57600080fd5b5060d254600160a01b900463ffffffff1661045a565b348015610b5c57600080fd5b5060d1546001600160a01b03166104b1565b348015610b7a57600080fd5b50610434610b89366004614a5a565b611bec565b348015610b9a57600080fd5b5061045a60d65481565b348015610bb057600080fd5b50610434610bbf366004614a5a565b611c85565b348015610bd057600080fd5b5060d4546104b1906001600160a01b031681565b348015610bf057600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610c2457600080fd5b5061045a611c92565b348015610c3957600080fd5b5060f854610c6c906001600160601b0380821691600160601b810490911690600160c01b900467ffffffffffffffff1683565b604080516001600160601b03948516815293909216602084015267ffffffffffffffff169082015260600161040b565b348015610ca857600080fd5b5061045a62093a8081565b348015610cbf57600080fd5b506104e9610cce366004614be6565b611d31565b348015610cdf57600080fd5b506104e9610cee366004614bc4565b611dbf565b348015610cff57600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610d3357600080fd5b5061045a60f65481565b348015610d4957600080fd5b5061045a610d583660046148f2565b611e94565b348015610d6957600080fd5b506104e9610d783660046148f2565b611eb1565b348015610d8957600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610dbd57600080fd5b506104e9610dcc366004614946565b611f40565b348015610ddd57600080fd5b506104e9610dec366004614be6565b612184565b348015610dfd57600080fd5b5061045a610e0c36600461490e565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b348015610e4357600080fd5b506104e9610e523660046148f2565b6121d4565b348015610e6357600080fd5b506104e96122c7565b348015610e7857600080fd5b506104e96123b6565b348015610e8d57600080fd5b506104e9610e9c3660046148f2565b6126c5565b6104e9612760565b348015610eb557600080fd5b50610ec9610ec43660046148f2565b6128a6565b6040805192835260208301919091520161040b565b348015610eea57600080fd5b506104e9612989565b348015610eff57600080fd5b506104e9610f0e366004614be6565b6129fb565b6060609a8054610f229061511d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4e9061511d565b8015610f9b5780601f10610f7057610100808354040283529160200191610f9b565b820191906000526020600020905b815481529060010190602001808311610f7e57829003601f168201915b5050505050905090565b6000610fb2338484612adc565b5060015b92915050565b60d4546001600160a01b031633146110055760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b60448201526064015b60405180910390fd5b600260015414156110285760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560f95460009081908190611049906001600160801b0316612c01565b60f980546001600160801b0319166001600160801b03831617905560f78290556040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152929550909350915060f560009054906101000a90046001600160a01b03166001600160a01b031663432833a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561110857600080fd5b505afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111409190614bfe565b60808201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166020830152848116825260cc5462010000810490911660408084019190915260ff6101009283900416606084015260a0830185905260f65460c084015260e083018790523391830191909152516395a170d760e01b81526000908190819073e0854DDD162ffE4E2fF1DB6E62b544521cB9223e906395a170d7906111f8908790600401614efa565b60606040518083038186803b15801561121057600080fd5b505af4158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190614c83565b60f8805467ffffffffffffffff8316600160c01b026001600160c01b036001600160601b03808716600160601b026001600160c01b0319909416908816179290921791909116179055919450925090506112a26000612f7f565b604080518381526020810185905233916001600160a01b038a16917f64844de7240afb5062e92a77a2a2fcf334f4f109ce576b1c0de1c82f659eca11910160405180910390a3505060018055505050505050565b6000611303848484613047565b6001600160a01b0384166000908152609860209081526040808320338452909152902054828110156113885760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610ffc565b6113958533858403612adc565b60019150505b9392505050565b600260015414156113c55760405162461bcd60e51b8152600401610ffc90614ec3565b6002600155806113e75760405162461bcd60e51b8152600401610ffc90614e1c565b6113f16001612f7f565b6000806113fd83613217565b9092509050811561143f5760d05461141e906001600160801b031683613321565b60d080546001600160801b0319166001600160801b03929092169190911790555b60cf5461ffff1681156114ce57600080611458336128a6565b9092509050611467828261332d565b8411156114ad5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610ffc565b838210156114c1576114c160006001613339565b6114cb33856134ee565b50505b604080518581526020810183905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a2600081815260ca602052604081205460cc5461152e918791610100900460ff16613639565b905061153a338261369b565b505060018055505050565b600260015414156115685760405162461bcd60e51b8152600401610ffc90614ec3565b6002600155816115a45760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610ffc565b6001600160a01b0381166115b757600080fd5b6115c182826137fc565b60cc546115df906201000090046001600160a01b0316333085613a8e565b505060018055565b3360008181526098602090815260408083206001600160a01b03871684529091528120549091610fb291859061161e908690614f98565b612adc565b60cc5460009060ff610100909104168161165961163f60995490565b611647611c92565b60d0546001600160801b031685613af9565b905061166e61166785611e94565b8284613639565b949350505050565b6065546001600160a01b031633146116a05760405162461bcd60e51b8152600401610ffc90614e8e565b600081116116da5760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b6044820152606401610ffc565b6116e381613b39565b60ce54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160ce80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b600260015414156117745760405162461bcd60e51b8152600401610ffc90614ec3565b600260018190555061178860006001613339565b60018055565b6065546001600160a01b031633146117b85760405162461bcd60e51b8152600401610ffc90614e8e565b6117c6620f424060646150bb565b81106118145760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e6365206665650000000000000000006044820152606401610ffc565b60d55460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160d555565b6065546001600160a01b0316331461187f5760405162461bcd60e51b8152600401610ffc90614e8e565b6118896000613b83565b565b600260015414156118ae5760405162461bcd60e51b8152600401610ffc90614ec3565b6002600155806118d05760405162461bcd60e51b8152600401610ffc90614e1c565b33600090815260c960205260409020546201000090046001600160681b031615158061191a575033600090815260c96020526040902054600160781b90046001600160801b031615155b1561192b5761192b60006001613339565b60cf5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b0316600082156119b4576119ad828761332d565b9050611a17565b81156119f65760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b6044820152606401610ffc565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b611a2081613bd5565b33600090815260cb6020526040812080546001600160801b03808516620100000262010000600160901b03199092169190911790915560d054611a6c91600160801b909104168861332d565b9050611a7781613bd5565b60d080546001600160801b03808416600160801b029116179055611a9c333089613047565b5050600180555050505050565b6060609b8054610f229061511d565b6000611aed611ac660995490565b611ace611c92565b60d05460cc546001600160801b0390911690610100900460ff16613af9565b905090565b60026001541415611b155760405162461bcd60e51b8152600401610ffc90614ec3565b600260015580611b545760405162461bcd60e51b815260206004820152600a602482015269216e756d526f756e647360b01b6044820152606401610ffc565b60cf5461ffff1660005b82811015611be3576000611b728284614f98565b600081815260ca602052604090205490915015611bbf5760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b6044820152606401610ffc565b600090815260ca602052604090206001905580611bdb81615152565b915050611b5e565b50506001805550565b3360009081526098602090815260408083206001600160a01b038616845290915281205482811015611c6e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610ffc565b611c7b3385858403612adc565b5060019392505050565b6000610fb2338484613047565b60cc546040516370a0823160e01b8152306004820152600091611aed91620100009091046001600160a01b0316906370a082319060240160206040518083038186803b158015611ce157600080fd5b505afa158015611cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d199190614bfe565b60cf546201000090046001600160681b03169061332d565b60026001541415611d545760405162461bcd60e51b8152600401610ffc90614ec3565b600260015580611d905760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610ffc565b611d9a81336137fc565b60cc54611db8906201000090046001600160a01b0316333084613a8e565b5060018055565b6065546001600160a01b03163314611de95760405162461bcd60e51b8152600401610ffc90614e8e565b60008161ffff16118015611e0b5750611e046064600a6150bb565b8161ffff16105b611e4c5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21030b63637b1b0ba34b7b760711b6044820152606401610ffc565b60f6546040805191825261ffff831660208301527f7b7f7a8590418227574bbbbf9b7f3a6ac2e590f0613ded320769210d39b4b283910160405180910390a161ffff1660f655565b6000806000611ea2846128a6565b909250905061166e828261332d565b6065546001600160a01b03163314611edb5760405162461bcd60e51b8152600401610ffc90614e8e565b6001600160a01b038116611f1e5760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401610ffc565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611f59575060005460ff16155b611f755760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015611f97576000805461ffff19166101011790555b611fa78b8b8b8b8b8b8b89613c1f565b6001600160a01b038416611ffd5760405162461bcd60e51b815260206004820152601860248201527f215f636f756e746572706172747954686574615661756c7400000000000000006044820152606401610ffc565b60cc60000160029054906101000a90046001600160a01b03166001600160a01b0316846001600160a01b0316639fcc2d756040518163ffffffff1660e01b815260040160c06040518083038186803b15801561205857600080fd5b505afa15801561206c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120909190614b1a565b604001516001600160a01b0316146120ea5760405162461bcd60e51b815260206004820152601f60248201527f215f636f756e746572706172747954686574615661756c743a206173736574006044820152606401610ffc565b60008311801561210457506121016064600a6150bb565b83105b6121455760405162461bcd60e51b815260206004820152601260248201527110afb7b83a34b7b720b63637b1b0ba34b7b760711b6044820152606401610ffc565b60f580546001600160a01b0319166001600160a01b03861617905560f68390558015612177576000805461ff00191690555b5050505050505050505050565b600260015414156121a75760405162461bcd60e51b8152600401610ffc90614ec3565b6002600155806121c95760405162461bcd60e51b8152600401610ffc90614e1c565b611db8816000613339565b6065546001600160a01b031633146121fe5760405162461bcd60e51b8152600401610ffc90614e8e565b6001600160a01b0381166122475760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b6044820152606401610ffc565b60d3546001600160a01b03828116911614156122a55760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e7400000000000000006044820152606401610ffc565b60d380546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156122ea5760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560f5546040516307cc423960e01b815260f8546001600160601b038082166004840152606082901c16602483015260c01c60448201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152909116608482015273e0854DDD162ffE4E2fF1DB6E62b544521cB9223e906307cc42399060a40160006040518083038186803b15801561239457600080fd5b505af41580156123a8573d6000803e3d6000fd5b505050506117886000612f7f565b600260015414156123d95760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560d25460f5546040805163a083ff1760e01b815290516001600160a01b0393841693600093169163a083ff17916004808301926060929190829003018186803b15801561242a57600080fd5b505afa15801561243e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124629190614aa1565b5190506001600160a01b0381166124af5760405162461bcd60e51b8152602060048201526011602482015270085d1a195d185d985d5b1d18db1bdcd959607a1b6044820152606401610ffc565b6124b96001612f7f565b60d180546001600160a01b0319166001600160a01b03831617905560006124e24261038461332d565b905063ffffffff8111156125385760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e526561647900000000000000006044820152606401610ffc565b60d280546001600160c01b031916600160a01b63ffffffff8416026001600160a01b03191617905560f75460cf80546cffffffffffffffffffffffffff60781b1916600160781b6001600160681b03909316929092029190911790556001600160a01b03831615611be35760cc54604051631bd1c68360e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152808616602483015262010000909204909116604482015260009073e0854DDD162ffE4E2fF1DB6E62b544521cB9223e9063de8e34189060640160206040518083038186803b15801561263457600080fd5b505af4158015612648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266c9190614bfe565b9050336001600160a01b0316846001600160a01b03167fbbdc6ffe3a5302a25b4ef9afc416a1b2b7c720da5eee6dc669eda4d9c63d82b9836040516126b391815260200190565b60405180910390a35050506001805550565b6065546001600160a01b031633146126ef5760405162461bcd60e51b8152600401610ffc90614e8e565b6001600160a01b0381166127545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ffc565b61275d81613b83565b50565b600260015414156127835760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166201000090920416146127f45760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b6044820152606401610ffc565b6000341161282d5760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610ffc565b61283734336137fc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561289257600080fd5b505af115801561153a573d6000803e3d6000fd5b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b031691810191909152829160011115612928575050506001600160a01b031660009081526097602052604081205491565b60cf54815161ffff908116600090815260ca602052604081205460cc54919361295e93869391169190610100900460ff16613e5e565b905061297f856001600160a01b031660009081526097602052604090205490565b9590945092505050565b600260015414156129ac5760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560006129bb613ecf565b60f9549091506129d4906001600160801b031682613321565b60f980546001600160801b0319166001600160801b03929092169190911790555060018055565b6065546001600160a01b03163314612a255760405162461bcd60e51b8152600401610ffc90614e8e565b612a33620f424060646150bb565b8110612a7a5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b6044820152606401610ffc565b6000612a9763031ba309612a9184620f424061408c565b90614098565b60d65460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160d65550565b6001600160a01b038316612b3e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ffc565b6001600160a01b038216612b9f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ffc565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60d25460009081908190600160a01b900463ffffffff16421015612c505760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b6044820152606401610ffc565b60d1546001600160a01b0316925082612c995760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b6044820152606401610ffc565b60d3546040805160c08101825260cc54610100810460ff16825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373e0854DDD162ffE4E2fF1DB6E62b544521cB9223e9363633c14269360cf939092602084019262010000900416906370a082319060240160206040518083038186803b158015612d2957600080fd5b505afa158015612d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d619190614bfe565b8152602001612d6f60995490565b815260208082018f905260d55460408084019190915260d65460609384015280516001600160e01b031960e088901b16815260048101959095528351602486015290830151604485015282015160648401528101516084830152608081015160a483015260a0015160c482015260e40160c06040518083038186803b158015612df757600080fd5b505af4158015612e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2f9190614c3a565b809750819850829950839650849b50859c505050505050508760d160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060cf60000160009054906101000a900461ffff1661ffff1690508160ca600083815260200190815260200160002081905550856001600160a01b03167f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c006858584604051612f1e939291909283526020830191909152604082015260600190565b60405180910390a260d080546001600160801b0319169055612f41816001614f98565b60cf805461ffff191661ffff9290921691909117905550612f64905030846140a4565b8015612f7457612f74848261369b565b505050509193909250565b60cf5461ffff16811580612fa25750600081815260ca6020526040902054600110155b1561304357613033612fb360995490565b60cc546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a082319060240160206040518083038186803b158015612ffb57600080fd5b505afa15801561300f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ace9190614bfe565b600082815260ca60205260409020555b5050565b6001600160a01b0383166130ab5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ffc565b6001600160a01b03821661310d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ffc565b6001600160a01b038316600090815260976020526040902054818110156131855760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ffc565b6001600160a01b038085166000908152609760205260408082208585039055918516815290812080548492906131bc908490614f98565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161320891815260200190565b60405180910390a35b50505050565b33600090815260c96020526040812060cf54815483929161ffff9182169116148015613252575080546201000090046001600160681b031615155b1561331857805461ffff8116600090815260ca602052604081205460cc54919261329592620100009091046001600160681b03169190610100900460ff16614183565b905060006132a382876141e6565b90506132d76132b28383613321565b845461ffff16600090815260ca602052604090205460cc54610100900460ff16613639565b83546001600160681b039190911662010000026effffffffffffffffffffffffff0000199091161783558061330c8782613321565b94509450505050915091565b50600093915050565b600061139b82846150da565b600061139b8284614f98565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cf5491865260ca9094529184205460cc54919492909316926133b49185918591610100900460ff16613e5e565b9050836133c157846133c3565b805b9450846133d1575050505050565b808511156134155760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610ffc565b825161ffff168211156134485733600090815260c96020526040902080546effffffffffffffffffffffffff0000191690555b61345185613bd5565b61345b8186613321565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929916134d49189825261ffff16602082015260400190565b60405180910390a26134e7303387613047565b5050505050565b6001600160a01b03821661354e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ffc565b6001600160a01b038216600090815260976020526040902054818110156135c25760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ffc565b6001600160a01b03831660009081526097602052604081208383039055609980548492906135f19084906150da565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612bf4565b505050565b6000600183116136835760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610ffc565b61166e61369183600a615013565b612a91868661408c565b60cc546001600160a01b03620100009091048116907f0000000000000000000000000000000000000000000000000000000000000000168114156137e857604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561373b57600080fd5b505af115801561374f573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146137a0576040519150601f19603f3d011682016040523d82523d6000602084013e6137a5565b606091505b50509050806132115760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610ffc565b6136346001600160a01b03821684846141fc565b60cf5461ffff16600061381784613811611c92565b9061332d565b60ce549091506001600160681b03168111156138625760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b6044820152606401610ffc565b60cd54600160a01b900466ffffffffffffff168110156138bb5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610ffc565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc5491929161397a918491879190610100900460ff16613e5e565b8251909150869061ffff168514156139ab5760208301516000906139a7906001600160681b03168961332d565b9150505b6139b481613b39565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560d054613a5a91168961332d565b9050613a6581613bd5565b60d080546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526132119085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261422c565b600080613b0783600a615013565b905060008611613b175780613b2f565b613b2f86612a91613b288888613321565b849061408c565b9695505050505050565b6001600160681b0381111561275d5760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401610ffc565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160801b0381111561275d5760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401610ffc565b600054610100900460ff1680613c38575060005460ff16155b613c545760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015613c76576000805461ffff19166101011790555b60405163c72733f760e01b815273e0854DDD162ffE4E2fF1DB6E62b544521cB9223e9063c72733f790613cbb908c908c908c908b908d908c908c908c90600401614d0f565b60006040518083038186803b158015613cd357600080fd5b505af4158015613ce7573d6000803e3d6000fd5b50505050613cf36142fe565b613cfd8484614371565b613d056143f0565b613d0e896126c5565b60d480546001600160a01b03808b166001600160a01b03199283161790925560d38054928a169290911691909117905560d5859055613d5863031ba309612a9188620f424061408c565b60d6558160cc613d6882826151c0565b505060cc546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a082319060240160206040518083038186803b158015613db457600080fd5b505afa158015613dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dec9190614bfe565b9050613df781613b39565b60cf805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015613e53576000805461ff00191690555b505050505050505050565b835160009061ffff1615801590613e795750845161ffff1684115b15613ebb576000613e9886602001516001600160681b03168585614183565b6040870151909150613eb3906001600160801b03168261332d565b91505061166e565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff1681613f315760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b6044820152606401610ffc565b60cf5461ffff168110613f795760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b6044820152606401610ffc565b33600090815260cb60205260409020805462010000600160901b031916905560d054613fb590600160801b90046001600160801b031683613321565b60d080546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc54613ff891859160ff61010090910416613639565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a261404030846134ee565b600081116140825760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b6044820152606401610ffc565b61166e338261369b565b600061139b82846150bb565b600061139b8284614fb0565b6001600160a01b0382166140fa5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ffc565b806099600082825461410c9190614f98565b90915550506001600160a01b03821660009081526097602052604081208054839290614139908490614f98565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000600183116141cd5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610ffc565b61166e83612a916141df85600a615013565b879061408c565b60008183106141f5578161139b565b5090919050565b6040516001600160a01b03831660248201526044810182905261363490849063a9059cbb60e01b90606401613ac2565b6000614281826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144579092919063ffffffff16565b805190915015613634578080602001905181019061429f9190614a85565b6136345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ffc565b600054610100900460ff1680614317575060005460ff16155b6143335760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015614355576000805461ffff19166101011790555b61435d614466565b801561275d576000805461ff001916905550565b600054610100900460ff168061438a575060005460ff16155b6143a65760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff161580156143c8576000805461ffff19166101011790555b6143d06144d5565b6143da838361453f565b8015613634576000805461ff0019169055505050565b600054610100900460ff1680614409575060005460ff16155b6144255760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015614447576000805461ffff19166101011790555b61444f6144d5565b61435d6145d4565b606061166e8484600085614634565b600054610100900460ff168061447f575060005460ff16155b61449b5760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff161580156144bd576000805461ffff19166101011790555b60018055801561275d576000805461ff001916905550565b600054610100900460ff16806144ee575060005460ff16155b61450a5760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff1615801561435d576000805461ffff1916610101179055801561275d576000805461ff001916905550565b600054610100900460ff1680614558575060005460ff16155b6145745760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015614596576000805461ffff19166101011790555b82516145a990609a906020860190614795565b5081516145bd90609b906020850190614795565b508015613634576000805461ff0019169055505050565b600054610100900460ff16806145ed575060005460ff16155b6146095760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff1615801561462b576000805461ffff19166101011790555b61435d33613b83565b6060824710156146955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ffc565b843b6146e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ffc565b600080866001600160a01b031685876040516146ff9190614cf3565b60006040518083038185875af1925050503d806000811461473c576040519150601f19603f3d011682016040523d82523d6000602084013e614741565b606091505b509150915061475182828661475c565b979650505050505050565b6060831561476b57508161139b565b82511561477b5782518084602001fd5b8160405162461bcd60e51b8152600401610ffc9190614e09565b8280546147a19061511d565b90600052602060002090601f0160209004810192826147c35760008555614809565b82601f106147dc57805160ff1916838001178555614809565b82800160010185558215614809579182015b828111156148095782518255916020019190600101906147ee565b50614815929150614819565b5090565b5b80821115614815576000815560010161481a565b8035614839816152d1565b919050565b600082601f83011261484e578081fd5b813567ffffffffffffffff8082111561486957614869615183565b604051601f8301601f19908116603f0116810190828211818310171561489157614891615183565b816040528381528660208588010111156148a9578485fd5b8360208701602083013792830160200193909352509392505050565b600060c082840312156148d6578081fd5b50919050565b8035614839816152f4565b803561483981615309565b600060208284031215614903578081fd5b813561139b816152d1565b60008060408385031215614920578081fd5b823561492b816152d1565b9150602083013561493b816152d1565b809150509250929050565b6000806000806000806000806000806101e08b8d031215614965578586fd5b61496e8b61482e565b995061497c60208c0161482e565b985061498a60408c0161482e565b975060608b0135965060808b0135955060a08b013567ffffffffffffffff808211156149b4578687fd5b6149c08e838f0161483e565b965060c08d01359150808211156149d5578586fd5b506149e28d828e0161483e565b9450506149f160e08c0161482e565b92506101008b01359150614a098c6101208d016148c5565b90509295989b9194979a5092959850565b600080600060608486031215614a2e578283fd5b8335614a39816152d1565b92506020840135614a49816152d1565b929592945050506040919091013590565b60008060408385031215614a6c578182fd5b8235614a77816152d1565b946020939093013593505050565b600060208284031215614a96578081fd5b815161139b816152e6565b600060608284031215614ab2578081fd5b6040516060810181811067ffffffffffffffff82111715614ad557614ad5615183565b6040528251614ae3816152d1565b81526020830151614af3816152d1565b6020820152604083015163ffffffff81168114614b0e578283fd5b60408201529392505050565b600060c08284031215614b2b578081fd5b60405160c0810181811067ffffffffffffffff82111715614b4e57614b4e615183565b6040528251614b5c816152e6565b81526020830151614b6c8161531e565b60208201526040830151614b7f816152d1565b60408201526060830151614b92816152d1565b60608201526080830151614ba581615309565b608082015260a0830151614bb8816152f4565b60a08201529392505050565b600060208284031215614bd5578081fd5b813561ffff8116811461139b578182fd5b600060208284031215614bf7578081fd5b5035919050565b600060208284031215614c0f578081fd5b5051919050565b60008060408385031215614c28578182fd5b82359150602083013561493b816152d1565b60008060008060008060c08789031215614c52578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600060608486031215614c97578081fd5b8351925060208401519150604084015167ffffffffffffffff81168114614cbc578182fd5b809150509250925092565b60008151808452614cdf8160208601602086016150f1565b601f01601f19169290920160200192915050565b60008251614d058184602087016150f1565b9190910192915050565b60006101a060018060a01b03808c168452808b166020850152808a1660408501528860608501528760808501528160a0850152614d4e82850188614cc7565b915083820360c0850152614d628287614cc7565b925084359150614d71826152e6565b90151560e0840152602084013590614d888261531e565b60ff821661010085015260408501359150614da2826152d1565b16610120830152614db56060840161482e565b6001600160a01b0316610140830152614dd0608084016148e7565b66ffffffffffffff16610160830152614deb60a084016148dc565b6001600160681b038116610180840152509998505050505050505050565b60208152600061139b6020830184614cc7565b6020808252600a9082015269216e756d53686172657360b01b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81516001600160a01b03168152602080830151610120830191614f27908401826001600160a01b03169052565b506040830151614f4260408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151614f90828501826001600160a01b03169052565b505092915050565b60008219821115614fab57614fab61516d565b500190565b600082614fcb57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561500b578160001904821115614ff157614ff161516d565b80851615614ffe57918102915b93841c9390800290614fd5565b509250929050565b600061139b838360008261502957506001610fb6565b8161503657506000610fb6565b816001811461504c576002811461505657615072565b6001915050610fb6565b60ff8411156150675761506761516d565b50506001821b610fb6565b5060208310610133831016604e8410600b8410161715615095575081810a610fb6565b61509f8383614fd0565b80600019048211156150b3576150b361516d565b029392505050565b60008160001904831182151516156150d5576150d561516d565b500290565b6000828210156150ec576150ec61516d565b500390565b60005b8381101561510c5781810151838201526020016150f4565b838111156132115750506000910152565b600181811c9082168061513157607f821691505b602082108114156148d657634e487b7160e01b600052602260045260246000fd5b60006000198214156151665761516661516d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008135610fb6816152d1565b60008135610fb6816152f4565b60008135610fb681615309565b81356151cb816152e6565b815460ff19811691151560ff16918217835560208401356151eb8161531e565b61ff008160081b169050808361ffff19841617178455604085013561520f816152d1565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b03161781556001810161526761524a60608501615199565b82546001600160a01b0319166001600160a01b0391909116178255565b6152a0615276608085016151b3565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b506130436152b060a084016151a6565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b038116811461275d57600080fd5b801515811461275d57600080fd5b6001600160681b038116811461275d57600080fd5b66ffffffffffffff8116811461275d57600080fd5b60ff8116811461275d57600080fdfea264697066735822122095257ae56316e82579d1a51f7f5adb5fc4c97d49fc3d66c87b241f1761e629ed64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106103e45760003560e01c80638da5cb5b11610208578063b70a293911610118578063dd62ed3e116100ab578063f2fde38b1161007a578063f2fde38b14610e81578063f6326fb314610ea1578063f656ba5114610ea9578063f756fa2114610ede578063fe56e23214610ef357600080fd5b8063dd62ed3e14610df1578063e74b981b14610e37578063e7b6951014610e57578063ea00b1ca14610e6c57600080fd5b8063d164cc15116100e7578063d164cc1514610d5d578063d826492014610d7d578063da7c306b14610db1578063db006a7514610dd157600080fd5b8063b70a293914610cd3578063c74c0fac14610cf3578063c9f369c214610d27578063ce7c2ac214610d3d57600080fd5b8063a457c2d71161019b578063ad5c46481161016a578063ad5c464814610be4578063ad7a672f14610c18578063ae94c7cd14610c2d578063b4d1d79514610c9c578063b6b55f2514610cb357600080fd5b8063a457c2d714610b6e578063a6f7f5d614610b8e578063a9059cbb14610ba4578063aced166114610bc457600080fd5b80639fcc2d75116101d75780639fcc2d7514610a1f578063a083ff1714610acb578063a285c9e814610b2e578063a2db9d8314610b5057600080fd5b80638da5cb5b146109b757806395d89b41146109d557806399530b06146109ea5780639be43daa146109ff57600080fd5b8063469048401161030357806370897b23116102965780637e108d52116102655780637e108d521461090257806387153eb114610922578063877887821461094f57806389a30271146109655780638b10cc7c1461099957600080fd5b806370897b231461083357806370a0823114610853578063715018a6146108895780637a9262a21461089e57600080fd5b80636719b2ee116102d25780636719b2ee1461075057806369b41170146107d45780636c10f66c146107ea5780636f31ab341461081e57600080fd5b806346904840146106a457806347786d37146106c4578063503c70aa146106e4578063650cce8a1461071c57600080fd5b80632775d01c1161037b57806336efd16f1161034a57806336efd16f1461062657806339509351146106465780633f23bb73146106665780633f90916a1461068657600080fd5b80632775d01c1461059e57806328004837146105be578063313ce567146105de578063355274ea1461060857600080fd5b80631a92f6c2116103b75780631a92f6c21461047d5780631b60612a146104c957806323b872dd146104eb5780632728f3331461050b57600080fd5b806306fdde03146103e9578063095ea7b314610414578063150d3ec21461044457806318160ddd14610468575b600080fd5b3480156103f557600080fd5b506103fe610f13565b60405161040b9190614e09565b60405180910390f35b34801561042057600080fd5b5061043461042f366004614a5a565b610fa5565b604051901515815260200161040b565b34801561045057600080fd5b5061045a60f75481565b60405190815260200161040b565b34801561047457600080fd5b5060995461045a565b34801561048957600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161040b565b3480156104d557600080fd5b506104e96104e4366004614be6565b610fbc565b005b3480156104f757600080fd5b50610434610506366004614a1a565b6112f6565b34801561051757600080fd5b5060cf5460d0546105599161ffff8116916001600160681b03620100008304811692600160781b900416906001600160801b0380821691600160801b90041685565b6040805161ffff90961686526001600160681b03948516602087015293909216928401929092526001600160801b03918216606084015216608082015260a00161040b565b3480156105aa57600080fd5b506104e96105b9366004614be6565b6113a2565b3480156105ca57600080fd5b5060f5546104b1906001600160a01b031681565b3480156105ea57600080fd5b5060cc54610100900460ff1660405160ff909116815260200161040b565b34801561061457600080fd5b5060ce546001600160681b031661045a565b34801561063257600080fd5b506104e9610641366004614c16565b611545565b34801561065257600080fd5b50610434610661366004614a5a565b6115e7565b34801561067257600080fd5b5061045a6106813660046148f2565b611623565b34801561069257600080fd5b5060d0546001600160801b031661045a565b3480156106b057600080fd5b5060d3546104b1906001600160a01b031681565b3480156106d057600080fd5b506104e96106df366004614be6565b611676565b3480156106f057600080fd5b5060f954610704906001600160801b031681565b6040516001600160801b03909116815260200161040b565b34801561072857600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561075c57600080fd5b506107a361076b3660046148f2565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b03169082015260600161040b565b3480156107e057600080fd5b5061045a61038481565b3480156107f657600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561082a57600080fd5b506104e9611751565b34801561083f57600080fd5b506104e961084e366004614be6565b61178e565b34801561085f57600080fd5b5061045a61086e3660046148f2565b6001600160a01b031660009081526097602052604090205490565b34801561089557600080fd5b506104e9611855565b3480156108aa57600080fd5b506108e06108b93660046148f2565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b0390911660208301520161040b565b34801561090e57600080fd5b506104e961091d366004614be6565b61188b565b34801561092e57600080fd5b5061045a61093d366004614be6565b60ca6020526000908152604090205481565b34801561095b57600080fd5b5061045a60d55481565b34801561097157600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b3480156109a557600080fd5b5060d2546001600160a01b03166104b1565b3480156109c357600080fd5b506065546001600160a01b03166104b1565b3480156109e157600080fd5b506103fe611aa9565b3480156109f657600080fd5b5061045a611ab8565b348015610a0b57600080fd5b506104e9610a1a366004614be6565b611af2565b348015610a2b57600080fd5b5060cc5460cd5460ce54610a7b9260ff808216936101008304909116926001600160a01b036201000090930483169282169166ffffffffffffff600160a01b90910416906001600160681b031686565b60408051961515875260ff90951660208701526001600160a01b03938416948601949094529116606084015266ffffffffffffff1660808301526001600160681b031660a082015260c00161040b565b348015610ad757600080fd5b5060d15460d254610b02916001600160a01b039081169190811690600160a01b900463ffffffff1683565b604080516001600160a01b03948516815293909216602084015263ffffffff169082015260600161040b565b348015610b3a57600080fd5b5060d254600160a01b900463ffffffff1661045a565b348015610b5c57600080fd5b5060d1546001600160a01b03166104b1565b348015610b7a57600080fd5b50610434610b89366004614a5a565b611bec565b348015610b9a57600080fd5b5061045a60d65481565b348015610bb057600080fd5b50610434610bbf366004614a5a565b611c85565b348015610bd057600080fd5b5060d4546104b1906001600160a01b031681565b348015610bf057600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610c2457600080fd5b5061045a611c92565b348015610c3957600080fd5b5060f854610c6c906001600160601b0380821691600160601b810490911690600160c01b900467ffffffffffffffff1683565b604080516001600160601b03948516815293909216602084015267ffffffffffffffff169082015260600161040b565b348015610ca857600080fd5b5061045a62093a8081565b348015610cbf57600080fd5b506104e9610cce366004614be6565b611d31565b348015610cdf57600080fd5b506104e9610cee366004614bc4565b611dbf565b348015610cff57600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610d3357600080fd5b5061045a60f65481565b348015610d4957600080fd5b5061045a610d583660046148f2565b611e94565b348015610d6957600080fd5b506104e9610d783660046148f2565b611eb1565b348015610d8957600080fd5b506104b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610dbd57600080fd5b506104e9610dcc366004614946565b611f40565b348015610ddd57600080fd5b506104e9610dec366004614be6565b612184565b348015610dfd57600080fd5b5061045a610e0c36600461490e565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b348015610e4357600080fd5b506104e9610e523660046148f2565b6121d4565b348015610e6357600080fd5b506104e96122c7565b348015610e7857600080fd5b506104e96123b6565b348015610e8d57600080fd5b506104e9610e9c3660046148f2565b6126c5565b6104e9612760565b348015610eb557600080fd5b50610ec9610ec43660046148f2565b6128a6565b6040805192835260208301919091520161040b565b348015610eea57600080fd5b506104e9612989565b348015610eff57600080fd5b506104e9610f0e366004614be6565b6129fb565b6060609a8054610f229061511d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4e9061511d565b8015610f9b5780601f10610f7057610100808354040283529160200191610f9b565b820191906000526020600020905b815481529060010190602001808311610f7e57829003601f168201915b5050505050905090565b6000610fb2338484612adc565b5060015b92915050565b60d4546001600160a01b031633146110055760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b60448201526064015b60405180910390fd5b600260015414156110285760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560f95460009081908190611049906001600160801b0316612c01565b60f980546001600160801b0319166001600160801b03831617905560f78290556040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152929550909350915060f560009054906101000a90046001600160a01b03166001600160a01b031663432833a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561110857600080fd5b505afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111409190614bfe565b60808201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166020830152848116825260cc5462010000810490911660408084019190915260ff6101009283900416606084015260a0830185905260f65460c084015260e083018790523391830191909152516395a170d760e01b81526000908190819073__$c4f279750f4bbb575ac7775e752dc00849$$c4f279750f4bbb575ac7775e752dc00849$__906307cc42399060a40160006040518083038186803b15801561239457600080fd5b505af41580156123a8573d6000803e3d6000fd5b505050506117886000612f7f565b600260015414156123d95760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560d25460f5546040805163a083ff1760e01b815290516001600160a01b0393841693600093169163a083ff17916004808301926060929190829003018186803b15801561242a57600080fd5b505afa15801561243e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124629190614aa1565b5190506001600160a01b0381166124af5760405162461bcd60e51b8152602060048201526011602482015270085d1a195d185d985d5b1d18db1bdcd959607a1b6044820152606401610ffc565b6124b96001612f7f565b60d180546001600160a01b0319166001600160a01b03831617905560006124e24261038461332d565b905063ffffffff8111156125385760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e526561647900000000000000006044820152606401610ffc565b60d280546001600160c01b031916600160a01b63ffffffff8416026001600160a01b03191617905560f75460cf80546cffffffffffffffffffffffffff60781b1916600160781b6001600160681b03909316929092029190911790556001600160a01b03831615611be35760cc54604051631bd1c68360e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152808616602483015262010000909204909116604482015260009073__$c4f279750f4bbb575ac7775e752dc00849$__9063de8e34189060640160206040518083038186803b15801561263457600080fd5b505af4158015612648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266c9190614bfe565b9050336001600160a01b0316846001600160a01b03167fbbdc6ffe3a5302a25b4ef9afc416a1b2b7c720da5eee6dc669eda4d9c63d82b9836040516126b391815260200190565b60405180910390a35050506001805550565b6065546001600160a01b031633146126ef5760405162461bcd60e51b8152600401610ffc90614e8e565b6001600160a01b0381166127545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ffc565b61275d81613b83565b50565b600260015414156127835760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166201000090920416146127f45760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b6044820152606401610ffc565b6000341161282d5760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b6044820152606401610ffc565b61283734336137fc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561289257600080fd5b505af115801561153a573d6000803e3d6000fd5b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b031691810191909152829160011115612928575050506001600160a01b031660009081526097602052604081205491565b60cf54815161ffff908116600090815260ca602052604081205460cc54919361295e93869391169190610100900460ff16613e5e565b905061297f856001600160a01b031660009081526097602052604090205490565b9590945092505050565b600260015414156129ac5760405162461bcd60e51b8152600401610ffc90614ec3565b600260015560006129bb613ecf565b60f9549091506129d4906001600160801b031682613321565b60f980546001600160801b0319166001600160801b03929092169190911790555060018055565b6065546001600160a01b03163314612a255760405162461bcd60e51b8152600401610ffc90614e8e565b612a33620f424060646150bb565b8110612a7a5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b6044820152606401610ffc565b6000612a9763031ba309612a9184620f424061408c565b90614098565b60d65460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160d65550565b6001600160a01b038316612b3e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610ffc565b6001600160a01b038216612b9f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610ffc565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60d25460009081908190600160a01b900463ffffffff16421015612c505760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b6044820152606401610ffc565b60d1546001600160a01b0316925082612c995760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b6044820152606401610ffc565b60d3546040805160c08101825260cc54610100810460ff16825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373__$c4f279750f4bbb575ac7775e752dc00849$__9363633c14269360cf939092602084019262010000900416906370a082319060240160206040518083038186803b158015612d2957600080fd5b505afa158015612d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d619190614bfe565b8152602001612d6f60995490565b815260208082018f905260d55460408084019190915260d65460609384015280516001600160e01b031960e088901b16815260048101959095528351602486015290830151604485015282015160648401528101516084830152608081015160a483015260a0015160c482015260e40160c06040518083038186803b158015612df757600080fd5b505af4158015612e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2f9190614c3a565b809750819850829950839650849b50859c505050505050508760d160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060cf60000160009054906101000a900461ffff1661ffff1690508160ca600083815260200190815260200160002081905550856001600160a01b03167f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c006858584604051612f1e939291909283526020830191909152604082015260600190565b60405180910390a260d080546001600160801b0319169055612f41816001614f98565b60cf805461ffff191661ffff9290921691909117905550612f64905030846140a4565b8015612f7457612f74848261369b565b505050509193909250565b60cf5461ffff16811580612fa25750600081815260ca6020526040902054600110155b1561304357613033612fb360995490565b60cc546040516370a0823160e01b8152306004820152620100009091046001600160a01b0316906370a082319060240160206040518083038186803b158015612ffb57600080fd5b505afa15801561300f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ace9190614bfe565b600082815260ca60205260409020555b5050565b6001600160a01b0383166130ab5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610ffc565b6001600160a01b03821661310d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610ffc565b6001600160a01b038316600090815260976020526040902054818110156131855760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610ffc565b6001600160a01b038085166000908152609760205260408082208585039055918516815290812080548492906131bc908490614f98565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161320891815260200190565b60405180910390a35b50505050565b33600090815260c96020526040812060cf54815483929161ffff9182169116148015613252575080546201000090046001600160681b031615155b1561331857805461ffff8116600090815260ca602052604081205460cc54919261329592620100009091046001600160681b03169190610100900460ff16614183565b905060006132a382876141e6565b90506132d76132b28383613321565b845461ffff16600090815260ca602052604090205460cc54610100900460ff16613639565b83546001600160681b039190911662010000026effffffffffffffffffffffffff0000199091161783558061330c8782613321565b94509450505050915091565b50600093915050565b600061139b82846150da565b600061139b8284614f98565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cf5491865260ca9094529184205460cc54919492909316926133b49185918591610100900460ff16613e5e565b9050836133c157846133c3565b805b9450846133d1575050505050565b808511156134155760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610ffc565b825161ffff168211156134485733600090815260c96020526040902080546effffffffffffffffffffffffff0000191690555b61345185613bd5565b61345b8186613321565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929916134d49189825261ffff16602082015260400190565b60405180910390a26134e7303387613047565b5050505050565b6001600160a01b03821661354e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610ffc565b6001600160a01b038216600090815260976020526040902054818110156135c25760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610ffc565b6001600160a01b03831660009081526097602052604081208383039055609980548492906135f19084906150da565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612bf4565b505050565b6000600183116136835760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610ffc565b61166e61369183600a615013565b612a91868661408c565b60cc546001600160a01b03620100009091048116907f0000000000000000000000000000000000000000000000000000000000000000168114156137e857604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561373b57600080fd5b505af115801561374f573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146137a0576040519150601f19603f3d011682016040523d82523d6000602084013e6137a5565b606091505b50509050806132115760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610ffc565b6136346001600160a01b03821684846141fc565b60cf5461ffff16600061381784613811611c92565b9061332d565b60ce549091506001600160681b03168111156138625760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b6044820152606401610ffc565b60cd54600160a01b900466ffffffffffffff168110156138bb5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610ffc565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc5491929161397a918491879190610100900460ff16613e5e565b8251909150869061ffff168514156139ab5760208301516000906139a7906001600160681b03168961332d565b9150505b6139b481613b39565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560d054613a5a91168961332d565b9050613a6581613bd5565b60d080546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526132119085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261422c565b600080613b0783600a615013565b905060008611613b175780613b2f565b613b2f86612a91613b288888613321565b849061408c565b9695505050505050565b6001600160681b0381111561275d5760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401610ffc565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160801b0381111561275d5760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401610ffc565b600054610100900460ff1680613c38575060005460ff16155b613c545760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015613c76576000805461ffff19166101011790555b60405163c72733f760e01b815273__$c4f279750f4bbb575ac7775e752dc00849$__9063c72733f790613cbb908c908c908c908b908d908c908c908c90600401614d0f565b60006040518083038186803b158015613cd357600080fd5b505af4158015613ce7573d6000803e3d6000fd5b50505050613cf36142fe565b613cfd8484614371565b613d056143f0565b613d0e896126c5565b60d480546001600160a01b03808b166001600160a01b03199283161790925560d38054928a169290911691909117905560d5859055613d5863031ba309612a9188620f424061408c565b60d6558160cc613d6882826151c0565b505060cc546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a082319060240160206040518083038186803b158015613db457600080fd5b505afa158015613dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dec9190614bfe565b9050613df781613b39565b60cf805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015613e53576000805461ff00191690555b505050505050505050565b835160009061ffff1615801590613e795750845161ffff1684115b15613ebb576000613e9886602001516001600160681b03168585614183565b6040870151909150613eb3906001600160801b03168261332d565b91505061166e565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff1681613f315760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b6044820152606401610ffc565b60cf5461ffff168110613f795760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b6044820152606401610ffc565b33600090815260cb60205260409020805462010000600160901b031916905560d054613fb590600160801b90046001600160801b031683613321565b60d080546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc54613ff891859160ff61010090910416613639565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a261404030846134ee565b600081116140825760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b6044820152606401610ffc565b61166e338261369b565b600061139b82846150bb565b600061139b8284614fb0565b6001600160a01b0382166140fa5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ffc565b806099600082825461410c9190614f98565b90915550506001600160a01b03821660009081526097602052604081208054839290614139908490614f98565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000600183116141cd5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610ffc565b61166e83612a916141df85600a615013565b879061408c565b60008183106141f5578161139b565b5090919050565b6040516001600160a01b03831660248201526044810182905261363490849063a9059cbb60e01b90606401613ac2565b6000614281826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144579092919063ffffffff16565b805190915015613634578080602001905181019061429f9190614a85565b6136345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ffc565b600054610100900460ff1680614317575060005460ff16155b6143335760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015614355576000805461ffff19166101011790555b61435d614466565b801561275d576000805461ff001916905550565b600054610100900460ff168061438a575060005460ff16155b6143a65760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff161580156143c8576000805461ffff19166101011790555b6143d06144d5565b6143da838361453f565b8015613634576000805461ff0019169055505050565b600054610100900460ff1680614409575060005460ff16155b6144255760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015614447576000805461ffff19166101011790555b61444f6144d5565b61435d6145d4565b606061166e8484600085614634565b600054610100900460ff168061447f575060005460ff16155b61449b5760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff161580156144bd576000805461ffff19166101011790555b60018055801561275d576000805461ff001916905550565b600054610100900460ff16806144ee575060005460ff16155b61450a5760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff1615801561435d576000805461ffff1916610101179055801561275d576000805461ff001916905550565b600054610100900460ff1680614558575060005460ff16155b6145745760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff16158015614596576000805461ffff19166101011790555b82516145a990609a906020860190614795565b5081516145bd90609b906020850190614795565b508015613634576000805461ff0019169055505050565b600054610100900460ff16806145ed575060005460ff16155b6146095760405162461bcd60e51b8152600401610ffc90614e40565b600054610100900460ff1615801561462b576000805461ffff19166101011790555b61435d33613b83565b6060824710156146955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ffc565b843b6146e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ffc565b600080866001600160a01b031685876040516146ff9190614cf3565b60006040518083038185875af1925050503d806000811461473c576040519150601f19603f3d011682016040523d82523d6000602084013e614741565b606091505b509150915061475182828661475c565b979650505050505050565b6060831561476b57508161139b565b82511561477b5782518084602001fd5b8160405162461bcd60e51b8152600401610ffc9190614e09565b8280546147a19061511d565b90600052602060002090601f0160209004810192826147c35760008555614809565b82601f106147dc57805160ff1916838001178555614809565b82800160010185558215614809579182015b828111156148095782518255916020019190600101906147ee565b50614815929150614819565b5090565b5b80821115614815576000815560010161481a565b8035614839816152d1565b919050565b600082601f83011261484e578081fd5b813567ffffffffffffffff8082111561486957614869615183565b604051601f8301601f19908116603f0116810190828211818310171561489157614891615183565b816040528381528660208588010111156148a9578485fd5b8360208701602083013792830160200193909352509392505050565b600060c082840312156148d6578081fd5b50919050565b8035614839816152f4565b803561483981615309565b600060208284031215614903578081fd5b813561139b816152d1565b60008060408385031215614920578081fd5b823561492b816152d1565b9150602083013561493b816152d1565b809150509250929050565b6000806000806000806000806000806101e08b8d031215614965578586fd5b61496e8b61482e565b995061497c60208c0161482e565b985061498a60408c0161482e565b975060608b0135965060808b0135955060a08b013567ffffffffffffffff808211156149b4578687fd5b6149c08e838f0161483e565b965060c08d01359150808211156149d5578586fd5b506149e28d828e0161483e565b9450506149f160e08c0161482e565b92506101008b01359150614a098c6101208d016148c5565b90509295989b9194979a5092959850565b600080600060608486031215614a2e578283fd5b8335614a39816152d1565b92506020840135614a49816152d1565b929592945050506040919091013590565b60008060408385031215614a6c578182fd5b8235614a77816152d1565b946020939093013593505050565b600060208284031215614a96578081fd5b815161139b816152e6565b600060608284031215614ab2578081fd5b6040516060810181811067ffffffffffffffff82111715614ad557614ad5615183565b6040528251614ae3816152d1565b81526020830151614af3816152d1565b6020820152604083015163ffffffff81168114614b0e578283fd5b60408201529392505050565b600060c08284031215614b2b578081fd5b60405160c0810181811067ffffffffffffffff82111715614b4e57614b4e615183565b6040528251614b5c816152e6565b81526020830151614b6c8161531e565b60208201526040830151614b7f816152d1565b60408201526060830151614b92816152d1565b60608201526080830151614ba581615309565b608082015260a0830151614bb8816152f4565b60a08201529392505050565b600060208284031215614bd5578081fd5b813561ffff8116811461139b578182fd5b600060208284031215614bf7578081fd5b5035919050565b600060208284031215614c0f578081fd5b5051919050565b60008060408385031215614c28578182fd5b82359150602083013561493b816152d1565b60008060008060008060c08789031215614c52578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600060608486031215614c97578081fd5b8351925060208401519150604084015167ffffffffffffffff81168114614cbc578182fd5b809150509250925092565b60008151808452614cdf8160208601602086016150f1565b601f01601f19169290920160200192915050565b60008251614d058184602087016150f1565b9190910192915050565b60006101a060018060a01b03808c168452808b166020850152808a1660408501528860608501528760808501528160a0850152614d4e82850188614cc7565b915083820360c0850152614d628287614cc7565b925084359150614d71826152e6565b90151560e0840152602084013590614d888261531e565b60ff821661010085015260408501359150614da2826152d1565b16610120830152614db56060840161482e565b6001600160a01b0316610140830152614dd0608084016148e7565b66ffffffffffffff16610160830152614deb60a084016148dc565b6001600160681b038116610180840152509998505050505050505050565b60208152600061139b6020830184614cc7565b6020808252600a9082015269216e756d53686172657360b01b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81516001600160a01b03168152602080830151610120830191614f27908401826001600160a01b03169052565b506040830151614f4260408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151614f90828501826001600160a01b03169052565b505092915050565b60008219821115614fab57614fab61516d565b500190565b600082614fcb57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561500b578160001904821115614ff157614ff161516d565b80851615614ffe57918102915b93841c9390800290614fd5565b509250929050565b600061139b838360008261502957506001610fb6565b8161503657506000610fb6565b816001811461504c576002811461505657615072565b6001915050610fb6565b60ff8411156150675761506761516d565b50506001821b610fb6565b5060208310610133831016604e8410600b8410161715615095575081810a610fb6565b61509f8383614fd0565b80600019048211156150b3576150b361516d565b029392505050565b60008160001904831182151516156150d5576150d561516d565b500290565b6000828210156150ec576150ec61516d565b500390565b60005b8381101561510c5781810151838201526020016150f4565b838111156132115750506000910152565b600181811c9082168061513157607f821691505b602082108114156148d657634e487b7160e01b600052602260045260246000fd5b60006000198214156151665761516661516d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008135610fb6816152d1565b60008135610fb6816152f4565b60008135610fb681615309565b81356151cb816152e6565b815460ff19811691151560ff16918217835560208401356151eb8161531e565b61ff008160081b169050808361ffff19841617178455604085013561520f816152d1565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b03161781556001810161526761524a60608501615199565b82546001600160a01b0319166001600160a01b0391909116178255565b6152a0615276608085016151b3565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b506130436152b060a084016151a6565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b038116811461275d57600080fd5b801515811461275d57600080fd5b6001600160681b038116811461275d57600080fd5b66ffffffffffffff8116811461275d57600080fd5b60ff8116811461275d57600080fdfea264697066735822122095257ae56316e82579d1a51f7f5adb5fc4c97d49fc3d66c87b241f1761e629ed64736f6c63430008040033",
  "libraries": {
    "VaultLifecycle": "0xe0854DDD162ffE4E2fF1DB6E62b544521cB9223e"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_gammaController": "is the contract address for opyn actions",
          "_gnosisEasyAuction": "is the contract address that facilitates gnosis auctions",
          "_marginPool": "is the contract address for providing collateral to opyn",
          "_uniswapFactory": "is the contract address of UniswapV3 factory containing pools information",
          "_uniswapRouter": "is the contract address of UniswapV3 router that handles swaps",
          "_usdc": "is the USDC contract",
          "_weth": "is the Wrapped Ether contract"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "is the amount of `asset` to deposit"
        }
      },
      "depositFor(uint256,address)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "creditor": "is the address that can claim/withdraw deposited amount"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,address,uint256,uint256,string,string,address,uint256,(bool,uint8,address,address,uint56,uint104))": {
        "params": {
          "_counterpartyThetaVault": "is the address of the counterparty theta vault of this delta vault",
          "_feeRecipient": "is the address to recieve vault performance and management fees",
          "_managementFee": "is the management fee pct.",
          "_optionAllocation": "is the pct of the funds to allocate towards the weekly option",
          "_owner": "is the owner of the vault with critical permissions",
          "_performanceFee": "is the perfomance fee pct.",
          "_tokenName": "is the name of the token",
          "_tokenSymbol": "is the symbol of the token",
          "_vaultParams": "is the struct with vault general data"
        }
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rollToNextOption(uint256)": {
        "params": {
          "optionPremium": "is the premium per token to pay in `asset`. Same decimals as `asset` (ex: 1 * 10 ** 8 means 1 WBTC per oToken)"
        }
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "newKeeper": "is the address of the new keeper"
        }
      },
      "setOptionAllocation(uint16)": {
        "params": {
          "newOptionAllocation": "is the option % allocation"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawInstantly(uint256)": {
        "params": {
          "share": "is the amount of shares to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELAY()": {
        "notice": "15 minute timelock between commitAndClose and rollToNexOption."
      },
      "PERIOD()": {
        "notice": "7 day period between each options sale."
      },
      "USDC()": {
        "notice": "USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "WETH()": {
        "notice": "WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "claimAuctionOtokens()": {
        "notice": "Claims the delta vault's oTokens from latest auction"
      },
      "commitAndClose()": {
        "notice": "Closes the existing long position for the vault.         This allows all the users to withdraw if the next option is malicious."
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "constructor": {
        "notice": "Initializes the contract with immutable variables"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "deposit(uint256)": {
        "notice": "Deposits the `asset` from msg.sender."
      },
      "depositETH()": {
        "notice": "Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH."
      },
      "depositFor(uint256,address)": {
        "notice": "Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf"
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initialize(address,address,address,uint256,uint256,string,string,address,uint256,(bool,uint8,address,address,uint56,uint104))": {
        "notice": "Initializes the OptionVault contract with storage variables."
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "keeper()": {
        "notice": "role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss."
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "optionState()": {
        "notice": "Vault's state of the options sold and the timelocked option"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss."
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "rollToNextOption(uint256)": {
        "notice": "Rolls the vault's funds into a new long position."
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      },
      "setOptionAllocation(uint16)": {
        "notice": "Sets the new % allocation of funds towards options purchases (2 decimals. ex: 10 * 10**2 is 10%) 0 < newOptionAllocation < 1000. 1000 = 10%."
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts locked into a short position"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawInstantly(uint256)": {
        "notice": "Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "notice": "UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonDeltaVaultStorage. RibbonDeltaVault should not inherit from any other contract aside from RibbonVault, RibbonDeltaVaultStorage",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 184,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 947,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 255,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 257,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10821,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)4933_storage)"
      },
      {
        "astId": 10826,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10832,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "withdrawals",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Withdrawal)4938_storage)"
      },
      {
        "astId": 10836,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "vaultParams",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(VaultParams)4908_storage"
      },
      {
        "astId": 10840,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "vaultState",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(VaultState)4926_storage"
      },
      {
        "astId": 10844,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "optionState",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(OptionState)4915_storage"
      },
      {
        "astId": 10847,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "211",
        "type": "t_address"
      },
      {
        "astId": 10850,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "keeper",
        "offset": 0,
        "slot": "212",
        "type": "t_address"
      },
      {
        "astId": 10853,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 10856,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 10860,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "____gap",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_uint256)30_storage"
      },
      {
        "astId": 8275,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "counterpartyThetaVault",
        "offset": 0,
        "slot": "245",
        "type": "t_contract(IRibbonThetaVault)3196"
      },
      {
        "astId": 8277,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "optionAllocation",
        "offset": 0,
        "slot": "246",
        "type": "t_uint256"
      },
      {
        "astId": 8279,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "balanceBeforePremium",
        "offset": 0,
        "slot": "247",
        "type": "t_uint256"
      },
      {
        "astId": 8282,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "auctionSellOrder",
        "offset": 0,
        "slot": "248",
        "type": "t_struct(AuctionSellOrder)4945_storage"
      },
      {
        "astId": 8285,
        "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "249",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRibbonThetaVault)3196": {
        "encoding": "inplace",
        "label": "contract IRibbonThetaVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)4933_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)4933_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)4938_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)4938_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AuctionSellOrder)4945_storage": {
        "encoding": "inplace",
        "label": "struct Vault.AuctionSellOrder",
        "members": [
          {
            "astId": 4940,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "sellAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 4942,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "buyAmount",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 4944,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "userId",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DepositReceipt)4933_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 4928,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4930,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 4932,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)4915_storage": {
        "encoding": "inplace",
        "label": "struct Vault.OptionState",
        "members": [
          {
            "astId": 4910,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "nextOption",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4912,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "currentOption",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4914,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "nextOptionReadyAt",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultParams)4908_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 4897,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "isPut",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4899,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "decimals",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4901,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "asset",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4903,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4905,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "minimumSupply",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          },
          {
            "astId": 4907,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "cap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VaultState)4926_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 4917,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4919,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 4921,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 4923,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4925,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Withdrawal)4938_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 4935,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4937,
            "contract": "contracts/vaults/BaseVaults/RibbonDeltaVault.sol:RibbonDeltaVault",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}