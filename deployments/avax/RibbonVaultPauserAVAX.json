{
  "address": "0xf08d6a9c2C5a2Dc9B8645c5Ac0b529D4046D19aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_steth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_steth_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "ProcessWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "Resume",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "STETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STETH_VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getPausePosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "round",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "shares",
              "type": "uint128"
            }
          ],
          "internalType": "struct RibbonVaultPauser.PauseReceipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "pausePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausedPositions",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "processWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "resumePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x101194eee42947be0547c8b4b2a6e670e826b39ee698887f5edc62f6d5e81dbd",
  "receipt": {
    "to": null,
    "from": "0x691c87dc570563D1D0AD7Fd0bb099ED367858863",
    "contractAddress": "0xf08d6a9c2C5a2Dc9B8645c5Ac0b529D4046D19aa",
    "transactionIndex": 7,
    "gasUsed": "1432480",
    "logsBloom": "0x
    "blockHash": "0x75e081cec39289230a2e8c710f917108f7ea1fd4676f779208b6a1fcbf05682d",
    "transactionHash": "0x101194eee42947be0547c8b4b2a6e670e826b39ee698887f5edc62f6d5e81dbd",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 15716325,
        "transactionHash": "0x101194eee42947be0547c8b4b2a6e670e826b39ee698887f5edc62f6d5e81dbd",
        "address": "0xf08d6a9c2C5a2Dc9B8645c5Ac0b529D4046D19aa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000691c87dc570563d1d0ad7fd0bb099ed367858863"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x75e081cec39289230a2e8c710f917108f7ea1fd4676f779208b6a1fcbf05682d"
      }
    ],
    "blockNumber": 15716325,
    "cumulativeGasUsed": "2483047",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x422f7Bb366608723c8fe61Ac6D923023dCCBC3d7",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0xae7ab96520de3a18e5e111b5eaab095312d7fe84",
    "0x53773E034d9784153471813dacAFF53dBBB78E8c"
  ],
  "solcInputHash": "9be2afd118232434b07255c894c5e6e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_steth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_steth_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"ProcessWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"Resume\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"STETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STETH_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getPausePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"internalType\":\"struct RibbonVaultPauser.PauseReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pausePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausedPositions\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"processWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"resumePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addVault(address)\":{\"params\":{\"_vaultAddress\":\"is the address of the new vault to be registered\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pausePosition(address,uint256)\":{\"params\":{\"_account\":\"user's address\",\"_amount\":\"the amount of shares\"}},\"processWithdrawal(address)\":{\"params\":{\"_vaultAddress\":\"vault's address to be processed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resumePosition(address)\":{\"params\":{\"_vaultAddress\":\"vault's address\"}},\"setNewKeeper(address)\":{\"params\":{\"_newKeeper\":\"is the address of the new keeper\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"},\"addVault(address)\":{\"notice\":\"add vault into registered vaults\"},\"constructor\":{\"notice\":\"Initializes the contract with immutable variables\"},\"pausePosition(address,uint256)\":{\"notice\":\"pause position from vault by redeem all the shares from vault to Pauser\"},\"processWithdrawal(address)\":{\"notice\":\"process withdrawals by completing in a batch\"},\"resumePosition(address)\":{\"notice\":\"resume user's position into vault by making a deposit\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/VaultPauser/RibbonVaultPauser.sol\":\"RibbonVaultPauser\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function roundPricePerShare(uint256) external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function initiateWithdraw(uint256 numShares) external;\\n\\n    function completeWithdraw() external;\\n\\n    function maxRedeem() external;\\n\\n    function depositYieldTokenFor(uint256 amount, address creditor) external;\\n\\n    function symbol() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x864d0ad28b9e301865f3ed7c5b561c1035e607c689f42023a91959fd41548c16\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IVaultPauser {\\n    /// @notice pause vault position of an account with max amount\\n    /// @param _account the address of user\\n    /// @param _amount amount of shares\\n    function pausePosition(address _account, uint256 _amount) external;\\n\\n    /// @notice resume vault position of an account with max amount\\n    /// @param _vaultAddress the address of vault\\n    function resumePosition(address _vaultAddress) external;\\n}\\n\",\"keccak256\":\"0x8327eccf3e134700dcf180baa109d55e2225fd3fa5bdfe0dcfc232973c7aa185\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x027f79659aea02845423eb96cfc4f926efb2214745463e3cbcfe4e4c24a065d9\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x90bc4b56ee48f314d1e326903bdb2926bed143fa4e6867a7d44975503106bf56\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x3119c096a02be6137015be605caf65412e0dd4b7df5f25e73bab4f88fddfa5d6\",\"license\":\"MIT\"},\"contracts/vaults/VaultPauser/RibbonVaultPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IVaultPauser} from \\\"../../interfaces/IVaultPauser.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../../interfaces/IRibbonThetaVault.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\n\\ncontract RibbonVaultPauser is Ownable, IVaultPauser {\\n    using SafeERC20 for IERC20;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores all the vault's paused positions\\n    struct PauseReceipt {\\n        uint16 round;\\n        uint128 shares;\\n    }\\n\\n    mapping(address => mapping(address => PauseReceipt)) public pausedPositions;\\n    mapping(address => bool) private registeredVaults;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n    address public immutable STETH;\\n    address public immutable STETH_VAULT;\\n\\n    address public keeper;\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Pause(\\n        address indexed account,\\n        address indexed vaultAddress,\\n        uint256 share,\\n        uint256 round\\n    );\\n\\n    event Resume(\\n        address indexed account,\\n        address indexed vaultAddress,\\n        uint256 withdrawAmount\\n    );\\n\\n    event ProcessWithdrawal(address indexed vaultAddress, uint256 round);\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     */\\n    constructor(\\n        address _keeper,\\n        address _weth,\\n        address _steth,\\n        address _steth_vault\\n    ) {\\n        require(_keeper != address(0), \\\"!_keeper\\\");\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_steth != address(0), \\\"!_steth\\\");\\n        require(_steth_vault != address(0), \\\"!_steth_vault\\\");\\n\\n        keeper = _keeper;\\n        WETH = _weth;\\n        STETH = _steth;\\n        STETH_VAULT = _steth_vault;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    function getPausePosition(address _vaultAddress, address _userAddress)\\n        external\\n        view\\n        returns (PauseReceipt memory)\\n    {\\n        return pausedPositions[_vaultAddress][_userAddress];\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param _newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address _newKeeper) external onlyOwner {\\n        require(_newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = _newKeeper;\\n    }\\n\\n    /**\\n     * @notice add vault into registered vaults\\n     * @param _vaultAddress is the address of the new vault to be registered\\n     */\\n    function addVault(address _vaultAddress) external onlyOwner {\\n        registeredVaults[_vaultAddress] = true;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice pause position from vault by redeem all the shares from vault to Pauser\\n     * @param _account user's address\\n     * @param _amount the amount of shares\\n     */\\n    function pausePosition(address _account, uint256 _amount)\\n        external\\n        override\\n    {\\n        address currentVaultAddress = msg.sender;\\n        IRibbonThetaVault currentVault = IRibbonThetaVault(currentVaultAddress);\\n\\n        // check if vault is registered\\n        require(\\n            registeredVaults[currentVaultAddress],\\n            \\\"Vault is not registered\\\"\\n        );\\n\\n        PauseReceipt storage pausedPosition =\\n            pausedPositions[currentVaultAddress][_account];\\n\\n        // check if position is paused\\n        require(\\n            pausedPosition.shares == 0 && pausedPosition.round == 0,\\n            \\\"Position is paused\\\"\\n        );\\n\\n        uint16 round = currentVault.vaultState().round;\\n\\n        require(_amount < type(uint128).max, \\\"_amount overflow\\\");\\n\\n        pausedPositions[currentVaultAddress][_account] = PauseReceipt({\\n            round: round,\\n            shares: uint128(_amount)\\n        });\\n\\n        emit Pause(_account, currentVaultAddress, _amount, round);\\n\\n        // transfer from user to pauser\\n        IERC20(currentVaultAddress).safeTransferFrom(\\n            _account,\\n            address(this),\\n            _amount\\n        );\\n\\n        currentVault.initiateWithdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice resume user's position into vault by making a deposit\\n     * @param _vaultAddress vault's address\\n     */\\n    function resumePosition(address _vaultAddress) external override {\\n        IRibbonThetaVault currentVault = IRibbonThetaVault(_vaultAddress);\\n\\n        // check if vault is registered\\n        require(registeredVaults[_vaultAddress], \\\"Vault is not registered\\\");\\n\\n        // get params and round\\n        Vault.VaultParams memory currentParams = currentVault.vaultParams();\\n        uint256 round = currentVault.vaultState().round;\\n\\n        PauseReceipt storage pauseReceipt =\\n            pausedPositions[_vaultAddress][msg.sender];\\n        uint256 pauseReceiptRound = pauseReceipt.round;\\n\\n        // check if roun is closed before resuming position\\n        require(pauseReceiptRound < round, \\\"Round not closed yet\\\");\\n        uint256 totalWithdrawAmount =\\n            ShareMath.sharesToAsset(\\n                pauseReceipt.shares,\\n                currentVault.roundPricePerShare(pauseReceiptRound),\\n                currentParams.decimals\\n            );\\n\\n        // delete position once transfer (revert to zero)\\n        delete pausedPositions[_vaultAddress][msg.sender];\\n\\n        // stETH transfers suffer from an off-by-1 error\\n        // since we received STETH , we shall deposit using STETH instead of ETH\\n        if (_vaultAddress == STETH_VAULT) {\\n            totalWithdrawAmount = totalWithdrawAmount - 3;\\n\\n            emit Resume(msg.sender, _vaultAddress, totalWithdrawAmount - 1);\\n            IERC20(STETH).safeApprove(_vaultAddress, totalWithdrawAmount);\\n            currentVault.depositYieldTokenFor(totalWithdrawAmount, msg.sender);\\n        } else {\\n            emit Resume(msg.sender, _vaultAddress, totalWithdrawAmount);\\n\\n            // if asset is ETH, we will convert it into WETH before depositing\\n            if (currentParams.asset == WETH) {\\n                IWETH(WETH).deposit{value: totalWithdrawAmount}();\\n            }\\n            IERC20(currentParams.asset).safeApprove(\\n                _vaultAddress,\\n                totalWithdrawAmount\\n            );\\n\\n            currentVault.depositFor(totalWithdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice process withdrawals by completing in a batch\\n     * @param _vaultAddress vault's address to be processed\\n     */\\n    function processWithdrawal(address _vaultAddress) external onlyKeeper {\\n        IRibbonThetaVault currentVault = IRibbonThetaVault(_vaultAddress);\\n        // we can only process withdrawal after closing the previous round\\n        // hence round should be - 1\\n        emit ProcessWithdrawal(\\n            _vaultAddress,\\n            currentVault.vaultState().round - 1\\n        );\\n        currentVault.completeWithdraw();\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xda4a4eb1beaa40f30bfa7f21e8de5d8821c7c88e625b6b414f40216e009d2bfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001aaa38038062001aaa833981016040819052620000349162000208565b6200003f336200019b565b6001600160a01b038416620000865760405162461bcd60e51b815260206004820152600860248201526710afb5b2b2b832b960c11b60448201526064015b60405180910390fd5b6001600160a01b038316620000c75760405162461bcd60e51b8152602060048201526006602482015265042beeecae8d60d31b60448201526064016200007d565b6001600160a01b038216620001095760405162461bcd60e51b8152602060048201526007602482015266042bee6e8cae8d60cb1b60448201526064016200007d565b6001600160a01b038116620001515760405162461bcd60e51b815260206004820152600d60248201526c0857dcdd195d1a17dd985d5b1d609a1b60448201526064016200007d565b600380546001600160a01b039095166001600160a01b0319909516949094179093556001600160601b0319606092831b811660805290821b811660a05291901b1660c05262000264565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200020357600080fd5b919050565b600080600080608085870312156200021e578384fd5b6200022985620001eb565b93506200023960208601620001eb565b92506200024960408601620001eb565b91506200025960608601620001eb565b905092959194509250565b60805160601c60a05160601c60c05160601c6117f1620002b9600039600081816102180152610b9f0152600081816102ac0152610c270152600081816101e401528181610cf50152610d3301526117f16000f3fe6080604052600436106100d55760003560e01c8063af5ea6e711610079578063d63e8a7e11610056578063d63e8a7e1461027a578063e00bfe501461029a578063f11e5309146102ce578063f2fde38b1461033d57005b8063af5ea6e714610206578063c9c2d4f51461023a578063d164cc151461025a57005b80638da5cb5b116100b25780638da5cb5b14610133578063966c95451461016a578063aced1661146101b2578063ad5c4648146101d257005b8063256b5a02146100de5780633c1a5012146100fe578063715018a61461011e57005b366100dc57005b005b3480156100ea57600080fd5b506100dc6100f9366004611375565b61035d565b34801561010a57600080fd5b506100dc610119366004611375565b6103b4565b34801561012a57600080fd5b506100dc610513565b34801561013f57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017657600080fd5b5061018a610185366004611391565b610549565b60408051825161ffff1681526020928301516001600160801b03169281019290925201610161565b3480156101be57600080fd5b5060035461014d906001600160a01b031681565b3480156101de57600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021257600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024657600080fd5b506100dc6102553660046113c9565b6105a7565b34801561026657600080fd5b506100dc610275366004611375565b610877565b34801561028657600080fd5b506100dc610295366004611375565b610906565b3480156102a657600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102da57600080fd5b5061031b6102e9366004611391565b600160209081526000928352604080842090915290825290205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b03909116602083015201610161565b34801561034957600080fd5b506100dc610358366004611375565b610e29565b6000546001600160a01b031633146103905760405162461bcd60e51b8152600401610387906115cb565b60405180910390fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6003546001600160a01b031633146103f85760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b6044820152606401610387565b6000819050816001600160a01b03167f4d1c6a568276d680f6c7d9eadabf2d36ba34ed239ddbfa3f267906e5013b84d46001836001600160a01b0316632728f3336040518163ffffffff1660e01b815260040160a06040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b91906114c3565b516104a6919061172a565b60405161ffff909116815260200160405180910390a2806001600160a01b031663f756fa216040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461053d5760405162461bcd60e51b8152600401610387906115cb565b6105476000610ec4565b565b604080518082018252600080825260209182018190526001600160a01b038581168252600183528382209085168252825282902082518084019093525461ffff811683526201000090046001600160801b0316908201525b92915050565b33600081815260026020526040902054819060ff166106025760405162461bcd60e51b815260206004820152601760248201527615985d5b1d081a5cc81b9bdd081c9959da5cdd195c9959604a1b6044820152606401610387565b6001600160a01b03828116600090815260016020908152604080832093881683529290522080546201000090046001600160801b03161580156106485750805461ffff16155b6106895760405162461bcd60e51b8152602060048201526012602482015271141bdcda5d1a5bdb881a5cc81c185d5cd95960721b6044820152606401610387565b6000826001600160a01b0316632728f3336040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc91906114c3565b5190506001600160801b0385106107485760405162461bcd60e51b815260206004820152601060248201526f5f616d6f756e74206f766572666c6f7760801b6044820152606401610387565b60408051808201825261ffff80841682526001600160801b0380891660208085019182526001600160a01b03808b16600081815260018452888120928f16808252929093529187902095518654935190941662010000026001600160901b031990931693909416929092171790925591519091907f30b4d0c56f1d21525fe9adea4192756b335aafffc6c77f51ceb8a144b9bcde63906107f8908990869091825261ffff16602082015260400190565b60405180910390a36108156001600160a01b038516873088610f14565b604051633f0846a960e11b8152600481018690526001600160a01b03841690637e108d5290602401600060405180830381600087803b15801561085757600080fd5b505af115801561086b573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b031633146108a15760405162461bcd60e51b8152600401610387906115cb565b6001600160a01b0381166108e45760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401610387565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260026020526040902054819060ff1661096a5760405162461bcd60e51b815260206004820152601760248201527615985d5b1d081a5cc81b9bdd081c9959da5cdd195c9959604a1b6044820152606401610387565b6000816001600160a01b0316639fcc2d756040518163ffffffff1660e01b815260040160c06040518083038186803b1580156109a557600080fd5b505afa1580156109b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dd919061140e565b90506000826001600160a01b0316632728f3336040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5291906114c3565b516001600160a01b03851660009081526001602090815260408083203384529091529020805461ffff9283169350909116828110610ac95760405162461bcd60e51b8152602060048201526014602482015273149bdd5b99081b9bdd0818db1bdcd959081e595d60621b6044820152606401610387565b81546040516387153eb160e01b815260048101839052600091610b6891620100009091046001600160801b0316906001600160a01b038916906387153eb19060240160206040518083038186803b158015610b2357600080fd5b505afa158015610b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5b9190611564565b876020015160ff16610f85565b6001600160a01b038089166000818152600160209081526040808320338452909152902080546001600160901b03191690559192507f0000000000000000000000000000000000000000000000000000000000000000161415610cb357610bd060038261174d565b90506001600160a01b038716337f88889b96c10c4dde96ecfa85e3e07b053a168791157fa9cc588a86732d2d6dba610c0960018561174d565b60405190815260200160405180910390a3610c4e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883610ff7565b6040516332f5210f60e11b8152600481018290523360248201526001600160a01b038716906365ea421e90604401600060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b50505050610e20565b6040518181526001600160a01b0388169033907f88889b96c10c4dde96ecfa85e3e07b053a168791157fa9cc588a86732d2d6dba9060200160405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685604001516001600160a01b03161415610da6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d8c57600080fd5b505af1158015610da0573d6000803e3d6000fd5b50505050505b6040850151610dbf906001600160a01b03168883610ff7565b6040516336efd16f60e01b8152600481018290523360248201526001600160a01b038716906336efd16f90604401600060405180830381600087803b158015610e0757600080fd5b505af1158015610e1b573d6000803e3d6000fd5b505050505b50505050505050565b6000546001600160a01b03163314610e535760405162461bcd60e51b8152600401610387906115cb565b6001600160a01b038116610eb85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610387565b610ec181610ec4565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f7f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611120565b50505050565b600060018311610fcf5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610387565b610fed610fdd83600a611663565b610fe786866111f2565b906111fe565b90505b9392505050565b8015806110805750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561104657600080fd5b505afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190611564565b155b6110eb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610387565b6040516001600160a01b03831660248201526044810182905261111b90849063095ea7b360e01b90606401610f48565b505050565b6000611175826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661120a9092919063ffffffff16565b80519091501561111b578080602001905181019061119391906113f4565b61111b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610387565b6000610ff0828461170b565b6000610ff08284611600565b6060610fed848460008585843b6112635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610387565b600080866001600160a01b0316858760405161127f919061157c565b60006040518083038185875af1925050503d80600081146112bc576040519150601f19603f3d011682016040523d82523d6000602084013e6112c1565b606091505b50915091506112d18282866112dc565b979650505050505050565b606083156112eb575081610ff0565b8251156112fb5782518084602001fd5b8160405162461bcd60e51b81526004016103879190611598565b8051801515811461132557600080fd5b919050565b80516cffffffffffffffffffffffffff8116811461132557600080fd5b80516001600160801b038116811461132557600080fd5b805166ffffffffffffff8116811461132557600080fd5b600060208284031215611386578081fd5b8135610ff0816117a6565b600080604083850312156113a3578081fd5b82356113ae816117a6565b915060208301356113be816117a6565b809150509250929050565b600080604083850312156113db578182fd5b82356113e6816117a6565b946020939093013593505050565b600060208284031215611405578081fd5b610ff082611315565b600060c0828403121561141f578081fd5b60405160c0810181811067ffffffffffffffff8211171561144e57634e487b7160e01b83526041600452602483fd5b60405261145a83611315565b8152602083015160ff8116811461146f578283fd5b60208201526040830151611482816117a6565b60408201526060830151611495816117a6565b60608201526114a66080840161135e565b60808201526114b760a0840161132a565b60a08201529392505050565b600060a082840312156114d4578081fd5b60405160a0810181811067ffffffffffffffff8211171561150357634e487b7160e01b83526041600452602483fd5b604052825161ffff81168114611517578283fd5b81526115256020840161132a565b60208201526115366040840161132a565b604082015261154760608401611347565b606082015261155860808401611347565b60808201529392505050565b600060208284031215611575578081fd5b5051919050565b6000825161158e818460208701611764565b9190910192915050565b60208152600082518060208401526115b7816040850160208701611764565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261161b57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561165b57816000190482111561164157611641611790565b8085161561164e57918102915b93841c9390800290611625565b509250929050565b6000610ff08383600082611679575060016105a1565b81611686575060006105a1565b816001811461169c57600281146116a6576116c2565b60019150506105a1565b60ff8411156116b7576116b7611790565b50506001821b6105a1565b5060208310610133831016604e8410600b84101617156116e5575081810a6105a1565b6116ef8383611620565b806000190482111561170357611703611790565b029392505050565b600081600019048311821515161561172557611725611790565b500290565b600061ffff8381169083168181101561174557611745611790565b039392505050565b60008282101561175f5761175f611790565b500390565b60005b8381101561177f578181015183820152602001611767565b83811115610f7f5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610ec157600080fdfea2646970667358221220b910b1da247c1eab29140dd84e61ef983578ee292b7b3d5be511ac044400c06264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100d55760003560e01c8063af5ea6e711610079578063d63e8a7e11610056578063d63e8a7e1461027a578063e00bfe501461029a578063f11e5309146102ce578063f2fde38b1461033d57005b8063af5ea6e714610206578063c9c2d4f51461023a578063d164cc151461025a57005b80638da5cb5b116100b25780638da5cb5b14610133578063966c95451461016a578063aced1661146101b2578063ad5c4648146101d257005b8063256b5a02146100de5780633c1a5012146100fe578063715018a61461011e57005b366100dc57005b005b3480156100ea57600080fd5b506100dc6100f9366004611375565b61035d565b34801561010a57600080fd5b506100dc610119366004611375565b6103b4565b34801561012a57600080fd5b506100dc610513565b34801561013f57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017657600080fd5b5061018a610185366004611391565b610549565b60408051825161ffff1681526020928301516001600160801b03169281019290925201610161565b3480156101be57600080fd5b5060035461014d906001600160a01b031681565b3480156101de57600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021257600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024657600080fd5b506100dc6102553660046113c9565b6105a7565b34801561026657600080fd5b506100dc610275366004611375565b610877565b34801561028657600080fd5b506100dc610295366004611375565b610906565b3480156102a657600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102da57600080fd5b5061031b6102e9366004611391565b600160209081526000928352604080842090915290825290205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b03909116602083015201610161565b34801561034957600080fd5b506100dc610358366004611375565b610e29565b6000546001600160a01b031633146103905760405162461bcd60e51b8152600401610387906115cb565b60405180910390fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6003546001600160a01b031633146103f85760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b6044820152606401610387565b6000819050816001600160a01b03167f4d1c6a568276d680f6c7d9eadabf2d36ba34ed239ddbfa3f267906e5013b84d46001836001600160a01b0316632728f3336040518163ffffffff1660e01b815260040160a06040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b91906114c3565b516104a6919061172a565b60405161ffff909116815260200160405180910390a2806001600160a01b031663f756fa216040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461053d5760405162461bcd60e51b8152600401610387906115cb565b6105476000610ec4565b565b604080518082018252600080825260209182018190526001600160a01b038581168252600183528382209085168252825282902082518084019093525461ffff811683526201000090046001600160801b0316908201525b92915050565b33600081815260026020526040902054819060ff166106025760405162461bcd60e51b815260206004820152601760248201527615985d5b1d081a5cc81b9bdd081c9959da5cdd195c9959604a1b6044820152606401610387565b6001600160a01b03828116600090815260016020908152604080832093881683529290522080546201000090046001600160801b03161580156106485750805461ffff16155b6106895760405162461bcd60e51b8152602060048201526012602482015271141bdcda5d1a5bdb881a5cc81c185d5cd95960721b6044820152606401610387565b6000826001600160a01b0316632728f3336040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc91906114c3565b5190506001600160801b0385106107485760405162461bcd60e51b815260206004820152601060248201526f5f616d6f756e74206f766572666c6f7760801b6044820152606401610387565b60408051808201825261ffff80841682526001600160801b0380891660208085019182526001600160a01b03808b16600081815260018452888120928f16808252929093529187902095518654935190941662010000026001600160901b031990931693909416929092171790925591519091907f30b4d0c56f1d21525fe9adea4192756b335aafffc6c77f51ceb8a144b9bcde63906107f8908990869091825261ffff16602082015260400190565b60405180910390a36108156001600160a01b038516873088610f14565b604051633f0846a960e11b8152600481018690526001600160a01b03841690637e108d5290602401600060405180830381600087803b15801561085757600080fd5b505af115801561086b573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b031633146108a15760405162461bcd60e51b8152600401610387906115cb565b6001600160a01b0381166108e45760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401610387565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260026020526040902054819060ff1661096a5760405162461bcd60e51b815260206004820152601760248201527615985d5b1d081a5cc81b9bdd081c9959da5cdd195c9959604a1b6044820152606401610387565b6000816001600160a01b0316639fcc2d756040518163ffffffff1660e01b815260040160c06040518083038186803b1580156109a557600080fd5b505afa1580156109b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dd919061140e565b90506000826001600160a01b0316632728f3336040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5291906114c3565b516001600160a01b03851660009081526001602090815260408083203384529091529020805461ffff9283169350909116828110610ac95760405162461bcd60e51b8152602060048201526014602482015273149bdd5b99081b9bdd0818db1bdcd959081e595d60621b6044820152606401610387565b81546040516387153eb160e01b815260048101839052600091610b6891620100009091046001600160801b0316906001600160a01b038916906387153eb19060240160206040518083038186803b158015610b2357600080fd5b505afa158015610b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5b9190611564565b876020015160ff16610f85565b6001600160a01b038089166000818152600160209081526040808320338452909152902080546001600160901b03191690559192507f0000000000000000000000000000000000000000000000000000000000000000161415610cb357610bd060038261174d565b90506001600160a01b038716337f88889b96c10c4dde96ecfa85e3e07b053a168791157fa9cc588a86732d2d6dba610c0960018561174d565b60405190815260200160405180910390a3610c4e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883610ff7565b6040516332f5210f60e11b8152600481018290523360248201526001600160a01b038716906365ea421e90604401600060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b50505050610e20565b6040518181526001600160a01b0388169033907f88889b96c10c4dde96ecfa85e3e07b053a168791157fa9cc588a86732d2d6dba9060200160405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685604001516001600160a01b03161415610da6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d8c57600080fd5b505af1158015610da0573d6000803e3d6000fd5b50505050505b6040850151610dbf906001600160a01b03168883610ff7565b6040516336efd16f60e01b8152600481018290523360248201526001600160a01b038716906336efd16f90604401600060405180830381600087803b158015610e0757600080fd5b505af1158015610e1b573d6000803e3d6000fd5b505050505b50505050505050565b6000546001600160a01b03163314610e535760405162461bcd60e51b8152600401610387906115cb565b6001600160a01b038116610eb85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610387565b610ec181610ec4565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610f7f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611120565b50505050565b600060018311610fcf5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610387565b610fed610fdd83600a611663565b610fe786866111f2565b906111fe565b90505b9392505050565b8015806110805750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561104657600080fd5b505afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e9190611564565b155b6110eb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610387565b6040516001600160a01b03831660248201526044810182905261111b90849063095ea7b360e01b90606401610f48565b505050565b6000611175826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661120a9092919063ffffffff16565b80519091501561111b578080602001905181019061119391906113f4565b61111b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610387565b6000610ff0828461170b565b6000610ff08284611600565b6060610fed848460008585843b6112635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610387565b600080866001600160a01b0316858760405161127f919061157c565b60006040518083038185875af1925050503d80600081146112bc576040519150601f19603f3d011682016040523d82523d6000602084013e6112c1565b606091505b50915091506112d18282866112dc565b979650505050505050565b606083156112eb575081610ff0565b8251156112fb5782518084602001fd5b8160405162461bcd60e51b81526004016103879190611598565b8051801515811461132557600080fd5b919050565b80516cffffffffffffffffffffffffff8116811461132557600080fd5b80516001600160801b038116811461132557600080fd5b805166ffffffffffffff8116811461132557600080fd5b600060208284031215611386578081fd5b8135610ff0816117a6565b600080604083850312156113a3578081fd5b82356113ae816117a6565b915060208301356113be816117a6565b809150509250929050565b600080604083850312156113db578182fd5b82356113e6816117a6565b946020939093013593505050565b600060208284031215611405578081fd5b610ff082611315565b600060c0828403121561141f578081fd5b60405160c0810181811067ffffffffffffffff8211171561144e57634e487b7160e01b83526041600452602483fd5b60405261145a83611315565b8152602083015160ff8116811461146f578283fd5b60208201526040830151611482816117a6565b60408201526060830151611495816117a6565b60608201526114a66080840161135e565b60808201526114b760a0840161132a565b60a08201529392505050565b600060a082840312156114d4578081fd5b60405160a0810181811067ffffffffffffffff8211171561150357634e487b7160e01b83526041600452602483fd5b604052825161ffff81168114611517578283fd5b81526115256020840161132a565b60208201526115366040840161132a565b604082015261154760608401611347565b606082015261155860808401611347565b60808201529392505050565b600060208284031215611575578081fd5b5051919050565b6000825161158e818460208701611764565b9190910192915050565b60208152600082518060208401526115b7816040850160208701611764565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261161b57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561165b57816000190482111561164157611641611790565b8085161561164e57918102915b93841c9390800290611625565b509250929050565b6000610ff08383600082611679575060016105a1565b81611686575060006105a1565b816001811461169c57600281146116a6576116c2565b60019150506105a1565b60ff8411156116b7576116b7611790565b50506001821b6105a1565b5060208310610133831016604e8410600b84101617156116e5575081810a6105a1565b6116ef8383611620565b806000190482111561170357611703611790565b029392505050565b600081600019048311821515161561172557611725611790565b500290565b600061ffff8381169083168181101561174557611745611790565b039392505050565b60008282101561175f5761175f611790565b500390565b60005b8381101561177f578181015183820152602001611767565b83811115610f7f5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610ec157600080fdfea2646970667358221220b910b1da247c1eab29140dd84e61ef983578ee292b7b3d5be511ac044400c06264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addVault(address)": {
        "params": {
          "_vaultAddress": "is the address of the new vault to be registered"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pausePosition(address,uint256)": {
        "params": {
          "_account": "user's address",
          "_amount": "the amount of shares"
        }
      },
      "processWithdrawal(address)": {
        "params": {
          "_vaultAddress": "vault's address to be processed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resumePosition(address)": {
        "params": {
          "_vaultAddress": "vault's address"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "_newKeeper": "is the address of the new keeper"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "addVault(address)": {
        "notice": "add vault into registered vaults"
      },
      "constructor": {
        "notice": "Initializes the contract with immutable variables"
      },
      "pausePosition(address,uint256)": {
        "notice": "pause position from vault by redeem all the shares from vault to Pauser"
      },
      "processWithdrawal(address)": {
        "notice": "process withdrawals by completing in a batch"
      },
      "resumePosition(address)": {
        "notice": "resume user's position into vault by making a deposit"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1002,
        "contract": "contracts/vaults/VaultPauser/RibbonVaultPauser.sol:RibbonVaultPauser",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29257,
        "contract": "contracts/vaults/VaultPauser/RibbonVaultPauser.sol:RibbonVaultPauser",
        "label": "pausedPositions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(PauseReceipt)29250_storage))"
      },
      {
        "astId": 29261,
        "contract": "contracts/vaults/VaultPauser/RibbonVaultPauser.sol:RibbonVaultPauser",
        "label": "registeredVaults",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29270,
        "contract": "contracts/vaults/VaultPauser/RibbonVaultPauser.sol:RibbonVaultPauser",
        "label": "keeper",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(PauseReceipt)29250_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct RibbonVaultPauser.PauseReceipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(PauseReceipt)29250_storage)"
      },
      "t_mapping(t_address,t_struct(PauseReceipt)29250_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RibbonVaultPauser.PauseReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(PauseReceipt)29250_storage"
      },
      "t_struct(PauseReceipt)29250_storage": {
        "encoding": "inplace",
        "label": "struct RibbonVaultPauser.PauseReceipt",
        "members": [
          {
            "astId": 29247,
            "contract": "contracts/vaults/VaultPauser/RibbonVaultPauser.sol:RibbonVaultPauser",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 29249,
            "contract": "contracts/vaults/VaultPauser/RibbonVaultPauser.sol:RibbonVaultPauser",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}