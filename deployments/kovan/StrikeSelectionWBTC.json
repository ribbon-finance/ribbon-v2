{
  "address": "0xe7Bee7e47e9435512112f86fdB2c82fCa2d99D39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_optionsPremiumPricer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_step",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DeltaSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "StepSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        }
      ],
      "name": "getStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionsPremiumPricer",
      "outputs": [
        {
          "internalType": "contract IOptionsPremiumPricer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        }
      ],
      "name": "setDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStep",
          "type": "uint256"
        }
      ],
      "name": "setStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "step",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volatilityOracle",
      "outputs": [
        {
          "internalType": "contract IVolatilityOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbb7c655ffdec3bc17e34e7e55ea5c7f4cfde1c502d530b6de029442591c34ec",
  "receipt": {
    "to": null,
    "from": "0x8DD47c24aC72888BFb2b75c172bB55C127515884",
    "contractAddress": "0xe7Bee7e47e9435512112f86fdB2c82fCa2d99D39",
    "transactionIndex": 0,
    "gasUsed": "879118",
    "logsBloom": "0x
    "blockHash": "0xc8ccfc284af972a14def9b27215ad3e18ff609d852f089a91862bb91736db501",
    "transactionHash": "0xdbb7c655ffdec3bc17e34e7e55ea5c7f4cfde1c502d530b6de029442591c34ec",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26766250,
        "transactionHash": "0xdbb7c655ffdec3bc17e34e7e55ea5c7f4cfde1c502d530b6de029442591c34ec",
        "address": "0xe7Bee7e47e9435512112f86fdB2c82fCa2d99D39",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008dd47c24ac72888bfb2b75c172bb55c127515884"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc8ccfc284af972a14def9b27215ad3e18ff609d852f089a91862bb91736db501"
      }
    ],
    "blockNumber": 26766250,
    "cumulativeGasUsed": "879118",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1775e7Bdd034d2De74a3ef131044395373880dA1",
    1000,
    1000
  ],
  "solcInputHash": "4bdf77f9341853504615f0e09c07a45d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeltaSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StepSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"}],\"name\":\"getStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"contract IOptionsPremiumPricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStep\",\"type\":\"uint256\"}],\"name\":\"setStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityOracle\",\"outputs\":[{\"internalType\":\"contract IVolatilityOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"params\":{\"expiryTimestamp\":\"is the unix timestamp of expiration\",\"isPut\":\"is whether option is put or call\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDelta(uint256)\":{\"params\":{\"newDelta\":\"is the new delta value\"}},\"setStep(uint256)\":{\"params\":{\"newStep\":\"is the new step value\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStrikePrice(uint256,bool)\":{\"notice\":\"Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put\"},\"optionsPremiumPricer()\":{\"notice\":\"Immutables\"},\"setDelta(uint256)\":{\"notice\":\"Sets new delta value\"},\"setStep(uint256)\":{\"notice\":\"Sets new step value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/StrikeSelection.sol\":\"StrikeSelection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.3;\\n\\ninterface IPriceOracle {\\n    function decimals() external view returns (uint256 _decimals);\\n\\n    function latestAnswer() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xb5ea84f53e61c5bba0eb63b5e1673d26cd7802b111098c54dfa0b08a975159de\",\"license\":\"GPL-3.0\"},\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.3;\\n\\ninterface IVolatilityOracle {\\n    function commit(address pool) external;\\n\\n    function twap(address pool) external returns (uint256 price);\\n\\n    function vol(address pool)\\n        external\\n        view\\n        returns (uint256 standardDeviation);\\n\\n    function annualizedVol(address pool)\\n        external\\n        view\\n        returns (uint256 annualStdev);\\n}\\n\",\"keccak256\":\"0xa54651d952955f8d3498b75979bfa5657a8323c5413d4217f5d82fe04c46ef24\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\npragma experimental ABIEncoderV2;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9991e09239701bc5d7259e0303ed4ac8b5849924eabc09cbfce3a97bd56fbd0c\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 sp,\\n        uint256 st,\\n        uint256 v,\\n        uint256 t\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256 price);\\n\\n    function priceOracle() external view returns (address oracle);\\n\\n    function volatilityOracle() external view returns (address oracle);\\n\\n    function pool() external view returns (address _pool);\\n}\\n\",\"keccak256\":\"0x6e56f903a01a711fc43a4cd33ee9c521a9078c81a6c88743eaaedd9ea883a03f\",\"license\":\"MIT\"},\"contracts/utils/StrikeSelection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {\\n    IPriceOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {\\n    IVolatilityOracle\\n} from \\\"@ribbon-finance/rvol/contracts/interfaces/IVolatilityOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StrikeSelection is DSMath, Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Immutables\\n     */\\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\\n    IVolatilityOracle public immutable volatilityOracle;\\n\\n    // delta for options strike price selection. 1 is 10000\\n    uint256 public delta;\\n    // step in absolute terms at which we will increment\\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\\n    uint256 public step;\\n    // multiplier to shift asset prices\\n    uint256 private immutable assetOracleMultiplier;\\n\\n    event DeltaSet(uint256 oldDelta, uint256 newDelta, address owner);\\n    event StepSet(uint256 oldStep, uint256 newStep, address owner);\\n\\n    constructor(\\n        address _optionsPremiumPricer,\\n        uint256 _delta,\\n        uint256 _step\\n    ) {\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_delta > 0, \\\"!_delta\\\");\\n        require(_step > 0, \\\"!_step\\\");\\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\\n        volatilityOracle = IVolatilityOracle(\\n            IOptionsPremiumPricer(_optionsPremiumPricer).volatilityOracle()\\n        );\\n        // ex: delta = 7500 (.75)\\n        delta = _delta;\\n        uint256 _assetOracleMultiplier =\\n            10 **\\n                IPriceOracle(\\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\\n                )\\n                    .decimals();\\n\\n        // ex: step = 1000\\n        step = _step.mul(_assetOracleMultiplier);\\n\\n        assetOracleMultiplier = _assetOracleMultiplier;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price satisfying the delta value\\n     * given the expiry timestamp and whether option is call or put\\n     * @param expiryTimestamp is the unix timestamp of expiration\\n     * @param isPut is whether option is put or call\\n     */\\n\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(\\n            expiryTimestamp > block.timestamp,\\n            \\\"Expiry must be in the future!\\\"\\n        );\\n\\n        // asset price\\n        uint256 assetPrice = optionsPremiumPricer.getUnderlyingPrice();\\n\\n        // asset's annualized volatility\\n        uint256 annualizedVol =\\n            volatilityOracle.annualizedVol(optionsPremiumPricer.pool()).mul(\\n                10**10\\n            );\\n\\n        // For each asset prices with step of 'step' (down if put, up if call)\\n        //   if asset's getOptionDelta(currStrikePrice, spotPrice, annualizedVol, t) == (isPut ? 1 - delta:delta)\\n        //   with certain margin of error\\n        //        return strike price\\n\\n        uint256 strike =\\n            isPut\\n                ? assetPrice.sub(assetPrice % step)\\n                : assetPrice.add(step - (assetPrice % step));\\n        uint256 targetDelta = isPut ? uint256(10000).sub(delta) : delta;\\n        uint256 prevDelta = 10000;\\n\\n        while (true) {\\n            uint256 currDelta =\\n                optionsPremiumPricer.getOptionDelta(\\n                    assetPrice.mul(10**8).div(assetOracleMultiplier),\\n                    strike,\\n                    annualizedVol,\\n                    expiryTimestamp\\n                );\\n            //  If the current delta is between the previous\\n            //  strike price delta and current strike price delta\\n            //  then we are done\\n            bool foundTargetStrikePrice =\\n                isPut\\n                    ? targetDelta >= prevDelta && targetDelta <= currDelta\\n                    : targetDelta <= prevDelta && targetDelta >= currDelta;\\n\\n            if (foundTargetStrikePrice) {\\n                uint256 finalDelta =\\n                    _getBestDelta(prevDelta, currDelta, targetDelta, isPut);\\n                uint256 finalStrike =\\n                    _getBestStrike(finalDelta, prevDelta, strike, isPut);\\n                require(\\n                    isPut\\n                        ? finalStrike <= assetPrice\\n                        : finalStrike >= assetPrice\\n                );\\n                // make decimals consistent with oToken strike price decimals (10 ** 8)\\n                return (\\n                    finalStrike.mul(10**8).div(assetOracleMultiplier),\\n                    finalDelta\\n                );\\n            }\\n\\n            strike = isPut ? strike.sub(step) : strike.add(step);\\n\\n            prevDelta = currDelta;\\n        }\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param prevDelta is the delta of the previous strike price\\n     * @param currDelta is delta of the current strike price\\n     * @param targetDelta is the delta we are targeting\\n     * @param isPut is whether its a put\\n     */\\n    function _getBestDelta(\\n        uint256 prevDelta,\\n        uint256 currDelta,\\n        uint256 targetDelta,\\n        bool isPut\\n    ) private pure returns (uint256 finalDelta) {\\n        uint256 upperBoundDiff =\\n            isPut ? sub(currDelta, targetDelta) : sub(prevDelta, targetDelta);\\n        uint256 lowerBoundDiff =\\n            isPut ? sub(targetDelta, prevDelta) : sub(targetDelta, currDelta);\\n\\n        // for tie breaks (ex: 0.05 <= 0.1 <= 0.15) round to higher strike price\\n        // for calls and lower strike price for puts for deltas\\n        finalDelta = lowerBoundDiff <= upperBoundDiff\\n            ? (isPut ? prevDelta : currDelta)\\n            : (isPut ? currDelta : prevDelta);\\n    }\\n\\n    /**\\n     * @notice Rounds to best delta value\\n     * @param finalDelta is the best delta value we found\\n     * @param prevDelta is delta of the previous strike price\\n     * @param strike is the strike of the previous iteration\\n     * @param isPut is whether its a put\\n     */\\n    function _getBestStrike(\\n        uint256 finalDelta,\\n        uint256 prevDelta,\\n        uint256 strike,\\n        bool isPut\\n    ) private view returns (uint256 finalStrike) {\\n        if (isPut) {\\n            if (finalDelta == prevDelta) {\\n                finalStrike = strike.add(step);\\n            } else {\\n                finalStrike = strike;\\n            }\\n        } else {\\n            if (finalDelta == prevDelta) {\\n                finalStrike = strike.sub(step);\\n            } else {\\n                finalStrike = strike;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets new delta value\\n     * @param newDelta is the new delta value\\n     */\\n    function setDelta(uint256 newDelta) external onlyOwner {\\n        uint256 oldDelta = delta;\\n        delta = newDelta;\\n        emit DeltaSet(oldDelta, newDelta, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets new step value\\n     * @param newStep is the new step value\\n     */\\n    function setStep(uint256 newStep) external onlyOwner {\\n        uint256 oldStep = step;\\n        step = newStep.mul(assetOracleMultiplier);\\n        emit StepSet(oldStep, newStep, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x7be014c9732f63170d4d85aeff4d0b2f5714d9bd058096f205984c589c6b592c\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe05978f659e7a1471c339900162bb0cc22b583c5f5809be6ade314d1686ec80b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620011e1380380620011e183398101604081905262000034916200035f565b600062000040620002d1565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038316620000bc5760405162461bcd60e51b8152600401620000b39062000411565b60405180910390fd5b60008211620000df5760405162461bcd60e51b8152600401620000b390620003f0565b60008111620001025760405162461bcd60e51b8152600401620000b39062000448565b826001600160a01b03166080816001600160a01b031660601b81525050826001600160a01b03166355b13a4f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200015957600080fd5b505afa1580156200016e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019491906200033b565b6001600160a01b031660a0816001600160a01b031660601b81525050816001819055506000836001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001f357600080fd5b505afa15801562000208573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022e91906200033b565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200026757600080fd5b505afa1580156200027c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a2919062000396565b600a0a9050620002c18183620002d560201b6200085e1790919060201c565b60025560c0525062000468915050565b3390565b600082620002e65750600062000318565b82820282848281620002f457fe5b0414620003155760405162461bcd60e51b8152600401620000b390620003af565b90505b92915050565b80516001600160a01b03811681146200033657600080fd5b919050565b6000602082840312156200034d578081fd5b62000358826200031e565b9392505050565b60008060006060848603121562000374578182fd5b6200037f846200031e565b925060208401519150604084015190509250925092565b600060208284031215620003a8578081fd5b5051919050565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260079082015266215f64656c746160c81b604082015260600190565b60208082526016908201527f215f6f7074696f6e735072656d69756d50726963657200000000000000000000604082015260600190565b6020808252600690820152650215f737465760d41b604082015260600190565b60805160601c60a05160601c60c051610d28620004b960003980610566528061068252806108035250806101ea52806103925250806102a652806102f452806103c1528061053c5250610d286000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa66264146100fb578063e25fe17514610103578063e436b8911461010b578063f2fde38b1461012c578063f8dcbddb1461013f5761009e565b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d6578063715018a6146100eb5780638da5cb5b146100f3575b600080fd5b6100b66100b1366004610a4b565b610152565b005b6100c06101e2565b6040516100cd9190610c89565b60405180910390f35b6100de6101e8565b6040516100cd9190610aae565b6100b661020c565b6100de610295565b6100de6102a4565b6100c06102c8565b61011e610119366004610a7b565b6102ce565b6040516100cd929190610c92565b6100b661013a366004610a13565b6106fb565b6100b661014d366004610a4b565b6107bb565b61015a6108a1565b6001600160a01b031661016b610295565b6001600160a01b03161461019a5760405162461bcd60e51b815260040161019190610c1d565b60405180910390fd5b60018054908290556040517f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d906101d690839085903390610ca0565b60405180910390a15050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102146108a1565b6001600160a01b0316610225610295565b6001600160a01b03161461024b5760405162461bcd60e51b815260040161019190610c1d565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b6000804284116102f05760405162461bcd60e51b815260040161019190610c52565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610a63565b905060006104c26402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041857600080fd5b505afa15801561042c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104509190610a2f565b6040518263ffffffff1660e01b815260040161046c9190610aae565b60206040518083038186803b15801561048457600080fd5b505afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc9190610a63565b9061085e565b90506000856104f2576104ed60025484816104d957fe5b0660025403846108a590919063ffffffff16565b610509565b610509600254848161050057fe5b859190066108ca565b905060008661051a5760015461052a565b60015461052a90612710906108ca565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6105997f00000000000000000000000000000000000000000000000000000000000000006105938a6305f5e10061085e565b906108f2565b86888e6040518563ffffffff1660e01b81526004016105bb9493929190610cbf565b60206040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610a63565b9050600089610629578284111580156106245750818410155b610639565b8284101580156106395750818411155b905080156106c257600061064f8484878e610924565b9050600061065f8286898f61099b565b90508b61066f5788811015610674565b888111155b61067d57600080fd5b6106af7f0000000000000000000000000000000000000000000000000000000000000000610593836305f5e10061085e565b829a509a505050505050505050506106f4565b896106da576002546106d59086906108a5565b6106e8565b6002546106e89086906108ca565b94508192505050610530565b9250929050565b6107036108a1565b6001600160a01b0316610714610295565b6001600160a01b03161461073a5760405162461bcd60e51b815260040161019190610c1d565b6001600160a01b0381166107605760405162461bcd60e51b815260040161019190610af1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6107c36108a1565b6001600160a01b03166107d4610295565b6001600160a01b0316146107fa5760405162461bcd60e51b815260040161019190610c1d565b600254610827827f000000000000000000000000000000000000000000000000000000000000000061085e565b6002556040517f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c906101d690839085903390610ca0565b60008261086d5750600061089b565b8282028284828161087a57fe5b04146108985760405162461bcd60e51b815260040161019190610bdc565b90505b92915050565b3390565b6000828201838110156108985760405162461bcd60e51b815260040161019190610b37565b6000828211156108ec5760405162461bcd60e51b815260040161019190610b6e565b50900390565b60008082116109135760405162461bcd60e51b815260040161019190610ba5565b81838161091c57fe5b049392505050565b6000808261093b5761093686856109f0565b610945565b61094585856109f0565b905060008361095d5761095885876109f0565b610967565b61096785886109f0565b905081811115610983578361097c578661097e565b855b610990565b8361098e5785610990565b865b979650505050505050565b600081156109c857838514156109c0576002546109b99084906108a5565b90506109c3565b50815b6109e8565b838514156109e5576002546109de9084906108ca565b90506109e8565b50815b949350505050565b8082038281111561089b5760405162461bcd60e51b815260040161019190610ac2565b600060208284031215610a24578081fd5b813561089881610cda565b600060208284031215610a40578081fd5b815161089881610cda565b600060208284031215610a5c578081fd5b5035919050565b600060208284031215610a74578081fd5b5051919050565b60008060408385031215610a8d578081fd5b8235915060208301358015158114610aa3578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b60208082526015908201527464732d6d6174682d7375622d756e646572666c6f7760581b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f457870697279206d75737420626520696e207468652066757475726521000000604082015260600190565b90815260200190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260208401929092526040830152606082015260800190565b6001600160a01b0381168114610cef57600080fd5b5056fea2646970667358221220f016fdf07a516b63ddb76e7b043e731819a41e3101366f691a54900f0495cac364736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063afa6626411610066578063afa66264146100fb578063e25fe17514610103578063e436b8911461010b578063f2fde38b1461012c578063f8dcbddb1461013f5761009e565b8063025ff0a5146100a357806312b495a8146100b857806355b13a4f146100d6578063715018a6146100eb5780638da5cb5b146100f3575b600080fd5b6100b66100b1366004610a4b565b610152565b005b6100c06101e2565b6040516100cd9190610c89565b60405180910390f35b6100de6101e8565b6040516100cd9190610aae565b6100b661020c565b6100de610295565b6100de6102a4565b6100c06102c8565b61011e610119366004610a7b565b6102ce565b6040516100cd929190610c92565b6100b661013a366004610a13565b6106fb565b6100b661014d366004610a4b565b6107bb565b61015a6108a1565b6001600160a01b031661016b610295565b6001600160a01b03161461019a5760405162461bcd60e51b815260040161019190610c1d565b60405180910390fd5b60018054908290556040517f760f0242cb96fbbbd0cf6647501a2763dfd1ee22287ca1a688cb1d5f1ca6026d906101d690839085903390610ca0565b60405180910390a15050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102146108a1565b6001600160a01b0316610225610295565b6001600160a01b03161461024b5760405162461bcd60e51b815260040161019190610c1d565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b6000804284116102f05760405162461bcd60e51b815260040161019190610c52565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610a63565b905060006104c26402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663950ed82c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561041857600080fd5b505afa15801561042c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104509190610a2f565b6040518263ffffffff1660e01b815260040161046c9190610aae565b60206040518083038186803b15801561048457600080fd5b505afa158015610498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc9190610a63565b9061085e565b90506000856104f2576104ed60025484816104d957fe5b0660025403846108a590919063ffffffff16565b610509565b610509600254848161050057fe5b859190066108ca565b905060008661051a5760015461052a565b60015461052a90612710906108ca565b90506127105b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639380576f6105997f00000000000000000000000000000000000000000000000000000000000000006105938a6305f5e10061085e565b906108f2565b86888e6040518563ffffffff1660e01b81526004016105bb9493929190610cbf565b60206040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610a63565b9050600089610629578284111580156106245750818410155b610639565b8284101580156106395750818411155b905080156106c257600061064f8484878e610924565b9050600061065f8286898f61099b565b90508b61066f5788811015610674565b888111155b61067d57600080fd5b6106af7f0000000000000000000000000000000000000000000000000000000000000000610593836305f5e10061085e565b829a509a505050505050505050506106f4565b896106da576002546106d59086906108a5565b6106e8565b6002546106e89086906108ca565b94508192505050610530565b9250929050565b6107036108a1565b6001600160a01b0316610714610295565b6001600160a01b03161461073a5760405162461bcd60e51b815260040161019190610c1d565b6001600160a01b0381166107605760405162461bcd60e51b815260040161019190610af1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6107c36108a1565b6001600160a01b03166107d4610295565b6001600160a01b0316146107fa5760405162461bcd60e51b815260040161019190610c1d565b600254610827827f000000000000000000000000000000000000000000000000000000000000000061085e565b6002556040517f08e332c6ae0c42d16506516b7ec987c8101ae8c5e930012ecd0c23142930518c906101d690839085903390610ca0565b60008261086d5750600061089b565b8282028284828161087a57fe5b04146108985760405162461bcd60e51b815260040161019190610bdc565b90505b92915050565b3390565b6000828201838110156108985760405162461bcd60e51b815260040161019190610b37565b6000828211156108ec5760405162461bcd60e51b815260040161019190610b6e565b50900390565b60008082116109135760405162461bcd60e51b815260040161019190610ba5565b81838161091c57fe5b049392505050565b6000808261093b5761093686856109f0565b610945565b61094585856109f0565b905060008361095d5761095885876109f0565b610967565b61096785886109f0565b905081811115610983578361097c578661097e565b855b610990565b8361098e5785610990565b865b979650505050505050565b600081156109c857838514156109c0576002546109b99084906108a5565b90506109c3565b50815b6109e8565b838514156109e5576002546109de9084906108ca565b90506109e8565b50815b949350505050565b8082038281111561089b5760405162461bcd60e51b815260040161019190610ac2565b600060208284031215610a24578081fd5b813561089881610cda565b600060208284031215610a40578081fd5b815161089881610cda565b600060208284031215610a5c578081fd5b5035919050565b600060208284031215610a74578081fd5b5051919050565b60008060408385031215610a8d578081fd5b8235915060208301358015158114610aa3578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b60208082526015908201527464732d6d6174682d7375622d756e646572666c6f7760581b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f457870697279206d75737420626520696e207468652066757475726521000000604082015260600190565b90815260200190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260208401929092526040830152606082015260800190565b6001600160a01b0381168114610cef57600080fd5b5056fea2646970667358221220f016fdf07a516b63ddb76e7b043e731819a41e3101366f691a54900f0495cac364736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStrikePrice(uint256,bool)": {
        "params": {
          "expiryTimestamp": "is the unix timestamp of expiration",
          "isPut": "is whether option is put or call"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDelta(uint256)": {
        "params": {
          "newDelta": "is the new delta value"
        }
      },
      "setStep(uint256)": {
        "params": {
          "newStep": "is the new step value"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStrikePrice(uint256,bool)": {
        "notice": "Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put"
      },
      "optionsPremiumPricer()": {
        "notice": "Immutables"
      },
      "setDelta(uint256)": {
        "notice": "Sets new delta value"
      },
      "setStep(uint256)": {
        "notice": "Sets new step value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1514,
        "contract": "contracts/utils/StrikeSelection.sol:StrikeSelection",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8285,
        "contract": "contracts/utils/StrikeSelection.sol:StrikeSelection",
        "label": "delta",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8287,
        "contract": "contracts/utils/StrikeSelection.sol:StrikeSelection",
        "label": "step",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}