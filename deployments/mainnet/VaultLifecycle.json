{
  "address": "0x5eE5db4480Db3B4cf08d871b737f0ce5785caA53",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "pendingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        }
      ],
      "name": "rollover",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "verifyConstructorParams",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x785448903461239adf5f9f8be58da864ed9b3ad0b9da87a74314f1211fdb3016",
  "receipt": {
    "to": null,
    "from": "0x691c87dc570563D1D0AD7Fd0bb099ED367858863",
    "contractAddress": "0x5eE5db4480Db3B4cf08d871b737f0ce5785caA53",
    "transactionIndex": 75,
    "gasUsed": "3274087",
    "logsBloom": "0x
    "blockHash": "0x74b489c12bfb960e18b1f199307307cdb937b168b82f32737582b6f3a179c356",
    "transactionHash": "0x785448903461239adf5f9f8be58da864ed9b3ad0b9da87a74314f1211fdb3016",
    "logs": [],
    "blockNumber": 13011663,
    "cumulativeGasUsed": "8765824",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "dfb205236cdecfea70edb3a32dda3d3d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"}],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"verifyConstructorParams\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burnOtokens(address,uint256)\":{\"notice\":\"Burn the remaining oTokens left over from auction. Currently this implementation is simple. It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time.\"},\"settleLong(address,address,address)\":{\"notice\":\"Exercises the ITM option using existing long otoken position. Currently this implementation is simple. It calls the `Redeem` action to claim the payout.\"},\"settleShort(address)\":{\"notice\":\"Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `closeShort` deletes vaults, this assumption should hold.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/VaultLifecycle.sol\":\"VaultLifecycle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.2;\\npragma experimental ABIEncoderV2;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9991e09239701bc5d7259e0303ed4ac8b5849924eabc09cbfce3a97bd56fbd0c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0xf039c3adaa4df237d18d647d01cb5c7002138652722cff9c2f902af8438c8dac\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x6ed1b9c71e05608b7d49a3e9a4635004f3a82dd54ca6cccedc07af8e84e0f3eb\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 sp,\\n        uint256 st,\\n        uint256 v,\\n        uint256 t\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256 price);\\n\\n    function priceOracle() external view returns (address oracle);\\n\\n    function volatilityOracle() external view returns (address oracle);\\n\\n    function pool() external view returns (address _pool);\\n}\\n\",\"keccak256\":\"0x6e56f903a01a711fc43a4cd33ee9c521a9078c81a6c88743eaaedd9ea883a03f\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Vault {\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of collateral there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n}\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address _currentOption);\\n\\n    function nextOption() external view returns (address _nextOption);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256 _auctionID);\\n}\\n\",\"keccak256\":\"0x1b0eda25b06a0eafbf9ad6faa529ddb03a9f2790789d30826def1ce8ba0eae0f\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address auctioningToken,\\n        address biddingToken,\\n        uint256 auctionCounter,\\n        address manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 oTokenPremium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocationPct;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\n\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            dswmul(oTokenSellAmount.mul(10**10), auctionDetails.oTokenPremium)\\n                .div(10**(uint256(18).sub(auctionDetails.assetDecimals)));\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of oToken we minted and are selling\\n            auctionDetails.oTokenAddress,\\n            // address of asset we want in exchange for oTokens. Should match vault collateral\\n            auctionDetails.asset,\\n            // orders can be cancelled before the auction's halfway point\\n            block.timestamp.add(auctionDetails.duration.div(2)),\\n            // order will last for `duration`\\n            block.timestamp.add(auctionDetails.duration),\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.oTokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            .mul(bidDetails.optionAllocationPct)\\n            .div(10000);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            .mul(10**bidDetails.assetDecimals)\\n            .div(bidDetails.optionPremium)\\n            .mul(10**8)\\n            .div(10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.oTokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address oTokenAddress)\\n        internal\\n        view\\n        returns (uint256 oTokenSellAmount)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but gnosis will transfer all the otokens\\n        oTokenSellAmount = IERC20(oTokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256 optionPremium) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        optionPremium = premiumPricer.getPremium(\\n            newOToken.strikePrice(),\\n            newOToken.expiryTimestamp(),\\n            newOToken.isPut()\\n        );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(1000);\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n\\n    /***\\n     * DSMath Copy paste\\n     */\\n\\n    uint256 constant DSWAD = 10**18;\\n\\n    function dsadd(uint256 x, uint256 y) private pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function dsmul(uint256 x, uint256 y) private pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function dswmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = dsadd(dsmul(x, y), DSWAD / 2) / DSWAD;\\n    }\\n}\\n\",\"keccak256\":\"0x3789aaa0c96a385155c5ac91782ffdb45a281b286c1e58a2512cc915cc5c5aa6\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nlibrary SupportsNonCompliantERC20 {\\n    address constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function doubleApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda4b56525a5947c5ee9e329549f12a5d6ff45e6a175baa7c733e01c982db640e\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\n\\nlibrary Vault {\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of collateral there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b2d6e40a340e4b115359748cb012c18955034f448819ce88ea5a86968dc1c2\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {\\n    IStrikeSelection,\\n    IOptionsPremiumPricer\\n} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\n\\nlibrary VaultLifecycle {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverride;\\n        uint256 overriddenStrikePrice;\\n    }\\n\\n    function commitAndClose(\\n        address strikeSelection,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry;\\n\\n        // uninitialized state\\n        if (closeParams.currentOption == address(0)) {\\n            expiry = getNextFriday(block.timestamp);\\n        } else {\\n            expiry = getNextFriday(\\n                IOtoken(closeParams.currentOption).expiryTimestamp()\\n            );\\n        }\\n\\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = closeParams.lastStrikeOverride ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        otokenAddress = getOrDeployOtoken(\\n            closeParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        premium = GnosisAuction.getOTokenPremium(\\n            otokenAddress,\\n            optionsPremiumPricer,\\n            premiumDiscount\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n    }\\n\\n    function verifyOtoken(address otokenAddress, uint256 delay) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    function rollover(\\n        uint256 currentSupply,\\n        address asset,\\n        uint8 decimals,\\n        uint256 pendingAmount,\\n        uint128 queuedWithdrawShares\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares\\n        )\\n    {\\n        uint256 currentBalance = IERC20(asset).balanceOf(address(this));\\n        uint256 roundStartBalance = currentBalance.sub(pendingAmount);\\n\\n        uint256 singleShare = 10**uint256(decimals);\\n\\n        newPricePerShare = getPPS(\\n            currentSupply,\\n            roundStartBalance,\\n            singleShare\\n        );\\n\\n        // After closing the short, if the options expire in-the-money\\n        // vault pricePerShare would go down because vault's asset balance decreased.\\n        // This ensures that the newly-minted shares do not take on the loss.\\n        uint256 _mintShares =\\n            pendingAmount.mul(singleShare).div(newPricePerShare);\\n\\n        uint256 newSupply = currentSupply.add(_mintShares);\\n\\n        uint256 queuedWithdrawAmount =\\n            newSupply > 0\\n                ? uint256(queuedWithdrawShares).mul(currentBalance).div(\\n                    newSupply\\n                )\\n                : 0;\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount),\\n            newPricePerShare,\\n            _mintShares\\n        );\\n    }\\n\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Otoken.sol#L70\\n    uint256 private constant OTOKEN_DECIMALS = 10**8;\\n\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(OTOKEN_DECIMALS)\\n                .mul(DSWAD) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n            uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n\\n            if (mintAmount > scaleBy && collateralDecimals > 8) {\\n                mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.doubleApprove(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver -  we need this contract to receive so we can swap at the end\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // deposited asset\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `closeShort` deletes vaults,\\n     * this assumption should hold.\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     */\\n    function burnOtokens(address gammaController, uint256 amount)\\n        external\\n        returns (uint256)\\n    {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning all otokens that are left from the gnosis auction,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            amount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(amount).div(vault.shortAmounts[0]), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    function getVaultFees(\\n        Vault.VaultState storage vaultState,\\n        uint256 currentLockedBalance,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 performanceFee,\\n            uint256 managementFee,\\n            uint256 vaultFee\\n        )\\n    {\\n        uint256 prevLockedAmount = vaultState.lastLockedAmount;\\n        uint256 totalPending = vaultState.totalPending;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (currentLockedBalance.sub(totalPending) > prevLockedAmount) {\\n            performanceFee = currentLockedBalance\\n                .sub(totalPending)\\n                .sub(prevLockedAmount)\\n                .mul(performanceFeePercent)\\n                .div(100 * 10**6);\\n            managementFee = currentLockedBalance.mul(managementFeePercent).div(\\n                100 * 10**6\\n            );\\n\\n            vaultFee = performanceFee.add(managementFee);\\n        }\\n    }\\n\\n    function getOrDeployOtoken(\\n        CloseParams calldata closeParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(otoken, closeParams.delay);\\n\\n        return otoken;\\n    }\\n\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint64\\n        )\\n    {\\n        return GnosisAuction.placeBid(bidDetails);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) external {\\n        GnosisAuction.claimAuctionOtokens(\\n            auctionSellOrder,\\n            gnosisEasyAuction,\\n            counterpartyThetaVault\\n        );\\n    }\\n\\n    function verifyConstructorParams(\\n        address owner,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(performanceFee < 10**8, \\\"performanceFee >= 100%\\\");\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param currentExpiry is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 currentExpiry)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((currentExpiry / 1 days) + 4) % 7;\\n        uint256 nextFriday = currentExpiry + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed currentExpiry is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (currentExpiry >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n\\n    function getPPS(\\n        uint256 currentSupply,\\n        uint256 roundStartBalance,\\n        uint256 singleShare\\n    ) internal pure returns (uint256 newPricePerShare) {\\n        newPricePerShare = currentSupply > 0\\n            ? singleShare.mul(roundStartBalance).div(currentSupply)\\n            : singleShare;\\n    }\\n\\n    /***\\n     * DSMath Copy paste\\n     */\\n\\n    uint256 constant DSWAD = 10**18;\\n\\n    function dsadd(uint256 x, uint256 y) private pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function dsmul(uint256 x, uint256 y) private pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function dswdiv(uint256 x, uint256 y) private pure returns (uint256 z) {\\n        z = dsadd(dsmul(x, DSWAD), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x7ef186ee68bb10ba3f8307db3a9d3d936a8ee0934dba475d7228335297701c54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c8063d38e31971161007b578063d38e319714610191578063d8dfd0fe146101a4578063de8e3418146101c4578063e5e014dd146101e4578063eebc5ff4146101f7578063f60c4fc714610217576100b3565b806307cc4239146100b85780632904c239146100da57806395a170d714610110578063afc0a5db1461013f578063d342af7414610161575b600080fd5b8180156100c457600080fd5b506100d86100d3366004612c82565b610237565b005b8180156100e657600080fd5b506100fa6100f5366004612ab8565b610247565b6040516101079190613851565b60405180910390f35b81801561011c57600080fd5b5061013061012b366004612cc6565b61075d565b60405161010793929190613944565b61015261014d366004612e84565b610778565b6040516101079392919061392e565b81801561016d57600080fd5b5061018161017c366004612bb6565b610886565b60405161010794939291906131a9565b61015261019f366004612cd8565b610afb565b8180156101b057600080fd5b506100fa6101bf366004612a36565b610b83565b8180156101d057600080fd5b506100fa6101df366004612a6e565b610f01565b6100d86101f2366004612b08565b611245565b81801561020357600080fd5b506100fa610212366004612c67565b6113da565b81801561022357600080fd5b506100fa610232366004612c1c565b6113eb565b610242838383611831565b505050565b60008085905060006102d66001836001600160a01b031663caa6d21a306040518263ffffffff1660e01b81526004016102809190613079565b60206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190612e6c565b906119a0565b905060008590506000816001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561031857600080fd5b505afa15801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190612a52565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561038d57600080fd5b505afa1580156103a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c59190612f6f565b60ff1690506000836001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561040557600080fd5b505afa158015610419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043d9190612c47565b156104ed576104e66104c683600a01600a0a866001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190612e6c565b906119c5565b6104e0670de0b6b3a76400006104c08c6305f5e1006119c5565b906119ff565b9050610524565b508660006104fc836008611a31565b600a0a905080821180156105105750600883115b156105225761051f89826119ff565b91505b505b826105396001600160a01b0382168c8b611a59565b60408051600380825260808201909252606091816020015b61055961286c565b815260200190600190039081610551579050506040805161010081019091529091508060008152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b03168152602001888152602001600081526020016000815260200160405180602001604052806000815250815250816000815181106105e557fe5b60209081029190910101526040805161010081019091528060058152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018881526020018b815260200160008152602001604051806020016040528060008152508152508160018151811061066457fe5b60209081029190910101526040805161010081019091528060018152602001306001600160a01b03168152602001306001600160a01b031681526020018c6001600160a01b031681526020018881526020018481526020016000815260200160405180602001604052806000815250815250816002815181106106e357fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c69061071a9084906004016131cf565b600060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b50949f9e505050505050505050505050505050565b600080600061076b84611a95565b9250925092509193909250565b600080600080876001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016107aa9190613079565b60206040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190612e6c565b905060006108088288611a31565b905060ff8816600a0a61081c8b8383611d42565b9450600061082e866104e08b856119c5565b9050600061083c8d836119a0565b9050600080821161084e576000610865565b610865826104e06001600160801b038d16896119c5565b90506108718682611a31565b98509195505050505050955095509592505050565b6000808080808061089d60608a0160408b01612a36565b6001600160a01b031614156108bc576108b542611d67565b9050610947565b6109446108cf60608a0160408b01612a36565b6001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f9190612e6c565b611d67565b90505b8654600188015487548d9260ff8116926001600160a01b039081169262010000909204169061ffff1661098060a08e0160808f01612e4a565b61ffff1614610a0b5760405163e436b89160e01b81526001600160a01b0385169063e436b891906109b79088908790600401613906565b604080518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190612eed565b610a81565b8b60a00135846001600160a01b03166312b495a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4957600080fd5b505afa158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190612e6c565b909750955086610aac5760405162461bcd60e51b8152600401610aa390613620565b60405180910390fd5b610aba8c83838a8988611dbc565b9850610ac7898f8f611f37565b975060008811610ae95760405162461bcd60e51b8152600401610aa3906135fe565b50505050509650965096509692505050565b8354600185015460009182918291600160781b90046001600160681b0316906001600160801b031681610b2e8983611a31565b1115610b7757610b546305f5e1006104e0896104c086610b4e8e88611a31565b90611a31565b9450610b686305f5e1006104e08a896119c5565b9350610b7485856119a0565b92505b50509450945094915050565b604051636553690d60e11b8152600090829082906001600160a01b0383169063caa6d21a90610bb6903090600401613079565b60206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c069190612e6c565b9050610c106128cd565b60405163d99d13f560e01b81526001600160a01b0384169063d99d13f590610c3e9030908690600401613190565b60006040518083038186803b158015610c5657600080fd5b505afa158015610c6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c929190810190612d09565b805151909150610cb45760405162461bcd60e51b8152600401610aa39061366e565b60008160400151600081518110610cc757fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610cff9190613079565b60206040518083038186803b158015610d1757600080fd5b505afa158015610d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f9190612e6c565b60408051600180825281830190925291925060609190816020015b610d7261286c565b815260200190600190039081610d6a579050506040805161010081019091529091508060078152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200186815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110610dfe57fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0387169063b617f0c690610e359084906004016131cf565b600060405180830381600087803b158015610e4f57600080fd5b505af1158015610e63573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a0823190610e96903090600401613079565b60206040518083038186803b158015610eae57600080fd5b505afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee69190612e6c565b9050610ef28184611a31565b9750505050505050505b919050565b6040516370a0823160e01b8152600090849082906001600160a01b038616906370a0823190610f34903090600401613079565b60206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190612e6c565b60405163565eea1960e01b81529091506001600160a01b0383169063565eea1990610fb59088908590600401613190565b60206040518083038186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110059190612e6c565b6110145760009250505061123e565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611043903090600401613079565b60206040518083038186803b15801561105b57600080fd5b505afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190612e6c565b60408051600180825281830190925291925060609190816020015b6110b661286c565b8152602001906001900390816110ae57905050604080516101008101909152909150806008815260200160006001600160a01b03168152602001306001600160a01b03168152602001886001600160a01b031681526020016000815260200184815260200160008152602001604051806020016040528060008152508152508160008151811061114257fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0385169063b617f0c6906111799084906004016131cf565b600060405180830381600087803b15801561119357600080fd5b505af11580156111a7573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03891691506370a08231906111da903090600401613079565b60206040518083038186803b1580156111f257600080fd5b505afa158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a9190612e6c565b90506112368184611a31565b955050505050505b9392505050565b6001600160a01b03881661126b5760405162461bcd60e51b8152600401610aa390613831565b6001600160a01b0387166112915760405162461bcd60e51b8152600401610aa390613572565b6305f5e10086106112b45760405162461bcd60e51b8152600401610aa3906133e1565b836112d15760405162461bcd60e51b8152600401610aa3906135da565b816112ee5760405162461bcd60e51b8152600401610aa3906132b8565b60006113006060830160408401612a36565b6001600160a01b031614156113275760405162461bcd60e51b8152600401610aa3906136c7565b60006113396080830160608401612a36565b6001600160a01b031614156113605760405162461bcd60e51b8152600401610aa3906137b6565b600061137260a0830160808401612f10565b66ffffffffffffff16116113985760405162461bcd60e51b8152600401610aa3906136e7565b60006113aa60c0830160a08401612e23565b6001600160681b0316116113d05760405162461bcd60e51b8152600401610aa3906134c9565b5050505050505050565b60006113e582612156565b92915050565b604051636553690d60e11b8152600090839082906001600160a01b0383169063caa6d21a9061141e903090600401613079565b60206040518083038186803b15801561143657600080fd5b505afa15801561144a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146e9190612e6c565b90506114786128cd565b60405163d99d13f560e01b81526001600160a01b0384169063d99d13f5906114a69030908690600401613190565b60006040518083038186803b1580156114be57600080fd5b505afa1580156114d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114fa9190810190612d09565b80515190915061151c5760405162461bcd60e51b8152600401610aa39061366e565b6000816040015160008151811061152f57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016115679190613079565b60206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b79190612e6c565b60408051600280825260608281019093529293509091816020015b6115da61286c565b8152602001906001900390816115d2579050506040805161010081019091529091508060028152306020820181905260408201528551805160609092019160009061162157fe5b60200260200101516001600160a01b0316815260200186815260200189815260200160008152602001604051806020016040528060008152508152508160008151811061166a57fe5b60209081029190910101526040805161010081019091528060068152602001306001600160a01b03168152602001306001600160a01b03168152602001846001600160a01b0316815260200186815260200161170386606001516000815181106116d057fe5b60200260200101516104e08c8960a001516000815181106116ed57fe5b60200260200101516119c590919063ffffffff16565b815260200160008152602001604051806020016040528060008152508152508160018151811061172f57fe5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0387169063b617f0c6906117669084906004016131cf565b600060405180830381600087803b15801561178057600080fd5b505af1158015611794573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a08231906117c7903090600401613079565b60206040518083038186803b1580156117df57600080fd5b505afa1580156117f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118179190612e6c565b90506118238184611a31565b9a9950505050505050505050565b60006118686118466060860160408701612f37565b6118566040870160208801612f8b565b6118636020880188612f8b565b6123c8565b6040805160018082528183019092529192506060919060208083019080368337019050509050818160008151811061189c57fe5b602002602001018181525050836001600160a01b0316637882deaf846001600160a01b031663432833a66040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f057600080fd5b505afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119289190612e6c565b836040518363ffffffff1660e01b8152600401611946929190613886565b6040805180830381600087803b15801561195f57600080fd5b505af1158015611973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190612eed565b50505050505050565b60008282018381101561123e5760405162461bcd60e51b8152600401610aa39061337c565b6000826119d4575060006113e5565b828202828482816119e157fe5b041461123e5760405162461bcd60e51b8152600401610aa390613599565b6000808211611a205760405162461bcd60e51b8152600401610aa390613448565b818381611a2957fe5b049392505050565b600082821115611a535760405162461bcd60e51b8152600401610aa390613411565b50900390565b6001600160a01b03831673dac17f958d2ee523a2206206994597c13d831ec71415611a8a57611a8a83836000612400565b610242838383612400565b60008080611ab16127106104e060a087013560c08801356119c5565b9250611ad66060850135600a0a6104e06305f5e1006104c060e08901358389866119c5565b91506001600160601b03831115611aff5760405162461bcd60e51b8152600401610aa3906134e7565b6001600160601b03821115611b265760405162461bcd60e51b8152600401610aa390613339565b611b5a611b396040860160208701612a36565b84611b4a6060880160408901612a36565b6001600160a01b03169190612400565b60408051600180825281830190925260609160208083019080368337505060408051600180825281830190925292935060609291506020808301908036833750506040805160018082528183019092529293506060929150602080830190803683370190505090508483600081518110611bd057fe5b60200260200101906001600160601b031690816001600160601b0316815250508582600081518110611bfe57fe5b60200260200101906001600160601b031690816001600160601b031681525050600160001b81600081518110611c3057fe5b602002602001018181525050866020016020810190611c4f9190612a36565b6001600160a01b031663d225269c88608001358585856040518563ffffffff1660e01b8152600401611c84949392919061389f565b602060405180830381600087803b158015611c9e57600080fd5b505af1158015611cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd69190612f53565b93507fa227b5eceb2bd983c0ed9dd34c971be74cd4f386b289d4415602a1fbcf2cb53b6080880135611d0b60208a018a612a36565b8888611d1f6101208d016101008e01612a36565b604051611d3095949392919061385a565b60405180910390a15050509193909250565b6000808411611d515781611d5f565b611d5f846104e084866119c5565b949350505050565b60008060076004620151808504010690506000600782600c0381611d8757fe5b066201518002840190506000620151808281611d9f57fe5b068203617080019050808510611d5f5762093a8001949350505050565b600080611dcc6020890189612a36565b905060006001600160a01b038216631154705489611df060408d0160208e01612a36565b8a8a8a8a6040518763ffffffff1660e01b8152600401611e15969594939291906130a7565b60206040518083038186803b158015611e2d57600080fd5b505afa158015611e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e659190612a52565b90506001600160a01b03811615611e7f579150611f2d9050565b60006001600160a01b03831663c09746308a611ea160408e0160208f01612a36565b8b8b8b8b6040518763ffffffff1660e01b8152600401611ec6969594939291906130a7565b602060405180830381600087803b158015611ee057600080fd5b505af1158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190612a52565b9050611f28818b606001356124fa565b925050505b9695505050505050565b6000808490506000849050806001600160a01b031663fc3d42e8836001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8a57600080fd5b505afa158015611f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc29190612e6c565b846001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ffb57600080fd5b505afa15801561200f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120339190612e6c565b856001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561206c57600080fd5b505afa158015612080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a49190612c47565b6040518463ffffffff1660e01b81526004016120c293929190613916565b60206040518083038186803b1580156120da57600080fd5b505afa1580156120ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121129190612e6c565b92506121246103e86104e085876119c5565b92506001600160601b0383111561214d5760405162461bcd60e51b8152600401610aa39061352b565b50509392505050565b60008061216e6121696020850185612a36565b6125c5565b90506122186121836040850160208601612a36565b6121906020860186612a36565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121bb9190613079565b60206040518083038186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b9190612e6c565b611b4a6020870187612a36565b600061224b61222c60126060870135611a31565b600a0a6104e0612241856402540be4006119c5565b876080013561266d565b90506001600160601b038111156122745760405162461bcd60e51b8152600401610aa390613759565b6122846040850160208601612a36565b6001600160a01b0316630a4cd6c961229f6020870187612a36565b6122af6060880160408901612a36565b6122c86122c160a08a013560026119ff565b42906119a0565b6122d64260a08b01356119a0565b878760016000806000604051806020016040528060008152506040518c63ffffffff1660e01b81526004016123159b9a9998979695949392919061310b565b602060405180830381600087803b15801561232f57600080fd5b505af1158015612343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123679190612e6c565b92507f95ad3b10488285d6307fda297f633faaf2a0d713c08ebe5f49c1b9255b01d29e6123976020860186612a36565b6123a76060870160408801612a36565b85336040516123b994939291906130e0565b60405180910390a15050919050565b6001600160c01b031960c084901b166bffffffffffffffffffffffff60601b606084901b16016001600160601b038216019392505050565b8015806124885750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90612436903090869060040161308d565b60206040518083038186803b15801561244e57600080fd5b505afa158015612462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124869190612e6c565b155b6124a45760405162461bcd60e51b8152600401610aa3906137db565b6102428363095ea7b360e01b84846040516024016124c3929190613190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261269a565b6001600160a01b0382166125205760405162461bcd60e51b8152600401610aa390613646565b81600061252d42846119a0565b905080826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561256957600080fd5b505afa15801561257d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a19190612e6c565b10156125bf5760405162461bcd60e51b8152600401610aa3906132de565b50505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906125f4903090600401613079565b60206040518083038186803b15801561260c57600080fd5b505afa158015612620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126449190612e6c565b90506001600160601b03811115610efc5760405162461bcd60e51b8152600401610aa39061347f565b6000670de0b6b3a76400006126936126858585612729565b6706f05b59d3b20000612760565b81611a2957fe5b60606126ef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127839092919063ffffffff16565b805190915015610242578080602001905181019061270d9190612c47565b6102425760405162461bcd60e51b8152600401610aa39061370f565b60008115806127445750508082028282828161274157fe5b04145b6113e55760405162461bcd60e51b8152600401610aa39061330b565b808201828110156113e55760405162461bcd60e51b8152600401610aa3906133b3565b6060611d5f8484600085856127978561282d565b6127b35760405162461bcd60e51b8152600401610aa390613690565b60006060866001600160a01b031685876040516127d0919061305d565b60006040518083038185875af1925050503d806000811461280d576040519150601f19603f3d011682016040523d82523d6000602084013e612812565b606091505b5091509150612822828286612833565b979650505050505050565b3b151590565b6060831561284257508161123e565b8251156128525782518084602001fd5b8160405162461bcd60e51b8152600401610aa391906132a5565b604080516101008101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b600082601f830112612913578081fd5b815161292661292182613988565b613964565b81815291506020808301908481018184028601820187101561294757600080fd5b60005b8481101561296f57815161295d816139d2565b8452928201929082019060010161294a565b505050505092915050565b600082601f83011261298a578081fd5b815161299861292182613988565b8181529150602080830190848101818402860182018710156129b957600080fd5b60005b8481101561296f578151845292820192908201906001016129bc565b60008083601f8401126129e9578182fd5b50813567ffffffffffffffff811115612a00578182fd5b602083019150836020828501011115612a1857600080fd5b9250929050565b600060c08284031215612a30578081fd5b50919050565b600060208284031215612a47578081fd5b813561123e816139d2565b600060208284031215612a63578081fd5b815161123e816139d2565b600080600060608486031215612a82578182fd5b8335612a8d816139d2565b92506020840135612a9d816139d2565b91506040840135612aad816139d2565b809150509250925092565b60008060008060808587031215612acd578081fd5b8435612ad8816139d2565b93506020850135612ae8816139d2565b92506040850135612af8816139d2565b9396929550929360600135925050565b600080600080600080600080610160898b031215612b24578586fd5b8835612b2f816139d2565b97506020890135612b3f816139d2565b965060408901359550606089013567ffffffffffffffff80821115612b62578586fd5b612b6e8c838d016129d8565b909750955060808b0135915080821115612b86578485fd5b50612b938b828c016129d8565b9094509250612ba790508a60a08b01612a1f565b90509295985092959890939650565b6000806000806000806101608789031215612bcf578384fd5b8635612bda816139d2565b95506020870135612bea816139d2565b945060408701359350612c008860608901612a1f565b9250610120870135915061014087013590509295509295509295565b60008060408385031215612c2e578182fd5b8235612c39816139d2565b946020939093013593505050565b600060208284031215612c58578081fd5b8151801515811461123e578182fd5b600060c08284031215612c78578081fd5b61123e8383612a1f565b600080600083850360a0811215612c97578182fd5b6060811215612ca4578182fd5b508392506060840135612cb6816139d2565b91506080840135612aad816139d2565b60006101208284031215612a30578081fd5b60008060008060808587031215612ced578182fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215612d1a578081fd5b815167ffffffffffffffff80821115612d31578283fd5b9083019060c08286031215612d44578283fd5b612d4e60c0613964565b825182811115612d5c578485fd5b612d6887828601612903565b825250602083015182811115612d7c578485fd5b612d8887828601612903565b602083015250604083015182811115612d9f578485fd5b612dab87828601612903565b604083015250606083015182811115612dc2578485fd5b612dce8782860161297a565b606083015250608083015182811115612de5578485fd5b612df18782860161297a565b60808301525060a083015182811115612e08578485fd5b612e148782860161297a565b60a08301525095945050505050565b600060208284031215612e34578081fd5b81356001600160681b038116811461123e578182fd5b600060208284031215612e5b578081fd5b813561ffff8116811461123e578182fd5b600060208284031215612e7d578081fd5b5051919050565b600080600080600060a08688031215612e9b578283fd5b853594506020860135612ead816139d2565b93506040860135612ebd81613a00565b92506060860135915060808601356001600160801b0381168114612edf578182fd5b809150509295509295909350565b60008060408385031215612eff578182fd5b505080516020909101519092909150565b600060208284031215612f21578081fd5b813566ffffffffffffff8116811461123e578182fd5b600060208284031215612f48578081fd5b813561123e816139ea565b600060208284031215612f64578081fd5b815161123e816139ea565b600060208284031215612f80578081fd5b815161123e81613a00565b600060208284031215612f9c578081fd5b81356001600160601b038116811461123e578182fd5b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015612fee57815187529582019590820190600101612fd2565b509495945050505050565b6000815180845260208085019450808401835b83811015612fee5781516001600160601b03168752958201959082019060010161300c565b600081518084526130498160208601602086016139a6565b601f01601f19169290920160200192915050565b6000825161306f8184602087016139a6565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925290151560a082015260c00190565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b6001600160a01b038c811682528b81166020830152604082018b9052606082018a90526001600160601b038981166080840152881660a083015260c0820187905260e082018690528415156101008301528316610120820152610160610140820181905260009061317e83820185613031565b9e9d5050505050505050505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561329757603f1989840301855281516101008151600a811061321557fe5b8552818901516132278a870182612fb2565b508782015161323889870182612fb2565b5060608083015161324b82880182612fb2565b50506080828101519086015260a0808301519086015260c0808301519086015260e09182015191850181905261328381860183613031565b9689019694505050908601906001016131f3565b509098975050505050505050565b60006020825261123e6020830184613031565b6020808252600c908201526b085d1bdad95b94de5b589bdb60a21b604082015260600190565b602080825260139082015272457870697279206265666f72652064656c617960681b604082015260600190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526023908201527f627579416d6f756e74203e20747970652875696e74393629206d61782076616c60408201526275652160e81b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b602080825260169082015275706572666f726d616e6365466565203e3d203130302560501b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602a908201527f6f546f6b656e53656c6c416d6f756e74203e20747970652875696e74393629206040820152696d61782076616c75652160b01b606082015260800190565b6020808252600490820152630216361760e41b604082015260600190565b60208082526024908201527f73656c6c416d6f756e74203e20747970652875696e74393629206d61782076616040820152636c75652160e01b606082015260800190565b60208082526027908201527f6f7074696f6e5072656d69756d203e20747970652875696e74393629206d61786040820152662076616c75652160c81b606082015260800190565b6020808252600d908201526c08599959549958da5c1a595b9d609a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600a908201526921746f6b656e4e616d6560b01b604082015260600190565b602080825260089082015267217072656d69756d60c01b604082015260600190565b6020808252600c908201526b21737472696b65507269636560a01b604082015260600190565b6020808252600e908201526d216f746f6b656e4164647265737360901b604082015260600190565b602080825260089082015267139bc81cda1bdc9d60c21b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526006908201526508585cdcd95d60d21b604082015260600190565b6020808252600e908201526d216d696e696d756d537570706c7960901b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252603a908201527f6f7074696f6e5072656d69756d202a206f546f6b656e53656c6c416d6f756e7460408201527f203e20747970652875696e74393629206d61782076616c756521000000000000606082015260800190565b6020808252600b908201526a21756e6465726c79696e6760a81b604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b90815260200190565b9485526001600160a01b0393841660208601526040850192909252606084015216608082015260a00190565b600083825260406020830152611d5f6040830184612fbf565b600085825260a060208301526138b860a0830186612ff9565b82810360408401526138ca8186612ff9565b905082810360608401526138de8185612fbf565b83810360809094019390935250506002815261060f60f31b6020820152604001949350505050565b9182521515602082015260400190565b92835260208301919091521515604082015260600190565b9283526020830191909152604082015260600190565b928352602083019190915267ffffffffffffffff16604082015260600190565b60405181810167ffffffffffffffff8111828210171561398057fe5b604052919050565b600067ffffffffffffffff82111561399c57fe5b5060209081020190565b60005b838110156139c15781810151838201526020016139a9565b838111156125bf5750506000910152565b6001600160a01b03811681146139e757600080fd5b50565b67ffffffffffffffff811681146139e757600080fd5b60ff811681146139e757600080fdfea264697066735822122002b40a12e0ab7bfb4f14e894b26af321d837fdc53deddc1f06a0193f0dc6479964736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burnOtokens(address,uint256)": {
        "notice": "Burn the remaining oTokens left over from auction. Currently this implementation is simple. It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time."
      },
      "settleLong(address,address,address)": {
        "notice": "Exercises the ITM option using existing long otoken position. Currently this implementation is simple. It calls the `Redeem` action to claim the payout."
      },
      "settleShort(address)": {
        "notice": "Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `closeShort` deletes vaults, this assumption should hold."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}