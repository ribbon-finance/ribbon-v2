{
  "address": "0x63b9712F3aCf31597595a1D43F7eE0ad2C83357F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "optionAuctionID",
          "type": "uint256"
        }
      ],
      "name": "getAuctionSettlementPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "optionsPremiumPricer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "premiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "getOTokenPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "verifyInitializerParams",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x27530e6e0cc691b06cabdded87c99390d480dae532c5517b765c16ef8c7a04eb",
  "receipt": {
    "to": null,
    "from": "0x691c87dc570563D1D0AD7Fd0bb099ED367858863",
    "contractAddress": "0x63b9712F3aCf31597595a1D43F7eE0ad2C83357F",
    "transactionIndex": 355,
    "gasUsed": "3404661",
    "logsBloom": "0x
    "blockHash": "0x8061a812b541667b6d90b2a2c939efb5feeed943514e2761994d3f17e8ae91c3",
    "transactionHash": "0x27530e6e0cc691b06cabdded87c99390d480dae532c5517b765c16ef8c7a04eb",
    "logs": [],
    "blockNumber": 14972330,
    "cumulativeGasUsed": "27816344",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9be2afd118232434b07255c894c5e6e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionAuctionID\",\"type\":\"uint256\"}],\"name\":\"getAuctionSettlementPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"premiumDiscount\",\"type\":\"uint256\"}],\"name\":\"getOTokenPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"verifyInitializerParams\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allocateOptions(address,address,uint256,uint256)\":{\"details\":\"Skipped if the optionsPurchaseQueue doesn't exist\",\"params\":{\"option\":\"is the minted option\",\"optionAllocation\":\"is the maximum % of options to allocate towards the purchase queue (will only allocate  up to the amount that is on the queue)\",\"optionsAmount\":\"is the amount of options minted\",\"optionsPurchaseQueue\":\"is the OptionsPurchaseQueue contract\"},\"returns\":{\"allocatedOptions\":\"is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\"}},\"burnOtokens(address,address)\":{\"params\":{\"currentOption\":\"is the address of the current option\",\"gammaController\":\"is the address of the opyn controller contract\"},\"returns\":{\"_0\":\"amount of collateral redeemed by burning otokens\"}},\"closeRound(Vault.VaultState storage,VaultLifecycleWithSwap.CloseParams)\":{\"params\":{\"params\":\"is the rollover parameters passed to compute the next state\",\"vaultState\":\"is the storage variable vaultState passed from RibbonVault\"},\"returns\":{\"mintShares\":\"is the amount of shares to mint from deposits\",\"newLockedAmount\":\"is the amount of funds to allocate for the new round\",\"newPricePerShare\":\"is the price per share of the new round\",\"performanceFeeInAsset\":\"is the performance fee charged by vault\",\"queuedWithdrawAmount\":\"is the amount of funds set aside for withdrawal\",\"totalVaultFee\":\"is the total amount of fee charged by vault\"}},\"commitNextOption(VaultLifecycleWithSwap.CommitParams,Vault.VaultParams storage,Vault.VaultState storage)\":{\"params\":{\"commitParams\":\"is the struct with details on previous option and strike selection details\",\"vaultParams\":\"is the struct with vault general data\",\"vaultState\":\"is the struct with vault accounting state\"},\"returns\":{\"delta\":\"is the delta of the new option\",\"otokenAddress\":\"is the address of the new option\",\"strikePrice\":\"is the strike price of the new option\"}},\"createOffer(address,uint256,address,Vault.VaultParams storage)\":{\"params\":{\"currOtokenPremium\":\"is premium for each otoken\",\"currentOtoken\":\"is the current otoken address\",\"swapContract\":\"the address of the swap contract\",\"vaultParams\":\"is the struct with vault general data\"},\"returns\":{\"optionAuctionID\":\"auction id of the newly created offer\"}},\"createShort(address,address,address,uint256)\":{\"params\":{\"depositAmount\":\"is the amount of collateral to deposit\",\"gammaController\":\"is the address of the opyn controller contract\",\"marginPool\":\"is the address of the opyn margin contract which holds the collateral\",\"oTokenAddress\":\"is the address of the otoken to mint\"},\"returns\":{\"_0\":\"the otoken mint amount\"}},\"getAuctionSettlementPrice(address,uint256)\":{\"params\":{\"optionAuctionID\":\"is the offer ID\",\"swapContract\":\"The address of the swap settlement contract\"},\"returns\":{\"_0\":\"settlementPrice Auction settlement price\"}},\"sellOptionsToQueue(address,address,uint256)\":{\"details\":\"Reverts if the auction hasn't settled yet\",\"params\":{\"optionsPurchaseQueue\":\"is the OptionsPurchaseQueue contract\",\"swapContract\":\"The address of the swap settlement contract\"},\"returns\":{\"_0\":\"totalPremiums Total premiums earnt by the vault\"}},\"settleLong(address,address,address)\":{\"params\":{\"asset\":\"is the address of the vault's asset\",\"gammaController\":\"is the address of the opyn controller contract\",\"oldOption\":\"is the address of the old option\"},\"returns\":{\"_0\":\"amount of asset received by exercising the option\"}},\"settleShort(address)\":{\"params\":{\"gammaController\":\"is the address of the opyn controller contract\"},\"returns\":{\"_0\":\"amount of collateral redeemed from the vault\"}},\"verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)\":{\"params\":{\"_vaultParams\":\"is the struct with vault general data\",\"feeRecipient\":\"is the address to recieve vault performance and management fees\",\"owner\":\"is the owner of the vault with critical permissions\",\"performanceFee\":\"is the perfomance fee pct.\",\"tokenName\":\"is the name of the token\",\"tokenSymbol\":\"is the symbol of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocateOptions(address,address,uint256,uint256)\":{\"notice\":\"Allocates the vault's minted options to the OptionsPurchaseQueue contract\"},\"burnOtokens(address,address)\":{\"notice\":\"Burn the remaining oTokens left over from auction. Currently this implementation is simple. It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time.\"},\"closeRound(Vault.VaultState storage,VaultLifecycleWithSwap.CloseParams)\":{\"notice\":\"Calculate the shares to mint, new price per share, and amount of funds to re-allocate as collateral for the new round\"},\"commitNextOption(VaultLifecycleWithSwap.CommitParams,Vault.VaultParams storage,Vault.VaultState storage)\":{\"notice\":\"Sets the next option the vault will be shorting, and calculates its premium for the auction\"},\"createOffer(address,uint256,address,Vault.VaultParams storage)\":{\"notice\":\"Creates an offer in the Swap Contract\"},\"createShort(address,address,address,uint256)\":{\"notice\":\"Creates the actual Opyn short position by depositing collateral and minting otokens\"},\"getAuctionSettlementPrice(address,uint256)\":{\"notice\":\"Gets the settlement price of a settled auction\"},\"sellOptionsToQueue(address,address,uint256)\":{\"notice\":\"Sell the allocated options to the purchase queue post auction settlement\"},\"settleLong(address,address,address)\":{\"notice\":\"Exercises the ITM option using existing long otoken position. Currently this implementation is simple. It calls the `Redeem` action to claim the payout.\"},\"settleShort(address)\":{\"notice\":\"Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by calling SettleVault action, this assumption should hold.\"},\"verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)\":{\"notice\":\"Verify the constructor params satisfy requirements\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/VaultLifecycleWithSwap.sol\":\"VaultLifecycleWithSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\\ninterface IOracle {\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function updateAssetPricer(address _asset, address _pricer) external;\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x148930e8fd36c64b8dbe75c2ba71117eaf4a6da5a019e08f3ff8161b274785ba\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x226639ee48018ec78891a829816799c9b9f6bbec7e84c4ca43cdc7dc8a07628f\",\"license\":\"MIT\"},\"contracts/interfaces/IOptionsPurchaseQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IOptionsPurchaseQueue {\\n    /**\\n     * @dev Contains purchase request info\\n     * @param optionsAmount Amount of options to purchase\\n     * @param premiums Total premiums the buyer is spending to purchase the options (optionsAmount * ceilingPrice)\\n     *  We need to track the premiums here since the ceilingPrice could change between the time the purchase was\\n     *  requested and when the options are sold\\n     * @param buyer The buyer requesting this purchase\\n     */\\n    struct Purchase {\\n        uint128 optionsAmount; // Slot 0\\n        uint128 premiums;\\n        address buyer; // Slot 1\\n    }\\n\\n    function purchases(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint128,\\n            uint128,\\n            address\\n        );\\n\\n    function totalOptionsAmount(address) external view returns (uint256);\\n\\n    function vaultAllocatedOptions(address) external view returns (uint256);\\n\\n    function whitelistedBuyer(address) external view returns (bool);\\n\\n    function minPurchaseAmount(address) external view returns (uint256);\\n\\n    function ceilingPrice(address) external view returns (uint256);\\n\\n    function getPurchases(address vault)\\n        external\\n        view\\n        returns (Purchase[] memory);\\n\\n    function getPremiums(address vault, uint256 optionsAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getOptionsAllocation(address vault, uint256 allocatedOptions)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requestPurchase(address vault, uint256 optionsAmount)\\n        external\\n        returns (uint256);\\n\\n    function allocateOptions(uint256 allocatedOptions)\\n        external\\n        returns (uint256);\\n\\n    function sellToBuyers(uint256 settlementPrice) external returns (uint256);\\n\\n    function cancelAllPurchases(address vault) external;\\n\\n    function addWhitelist(address buyer) external;\\n\\n    function removeWhitelist(address buyer) external;\\n\\n    function setCeilingPrice(address vault, uint256 price) external;\\n\\n    function setMinPurchaseAmount(address vault, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3033ae23c42a0da011d8e43d911ec7d999ccbc18a73e24098dfd202a71000086\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonVault {\\n    function deposit(uint256 amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function cap() external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n}\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function optionId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd9ffea587ce992000d8a9f8d4b1bc8c40008633c35121b3d11ab8c6a7dd5ecbc\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function roundPricePerShare(uint256) external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function initiateWithdraw(uint256 numShares) external;\\n\\n    function completeWithdraw() external;\\n\\n    function maxRedeem() external;\\n\\n    function depositYieldTokenFor(uint256 amount, address creditor) external;\\n\\n    function symbol() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x864d0ad28b9e301865f3ed7c5b561c1035e607c689f42023a91959fd41548c16\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\ninterface ISwap {\\n    struct Offer {\\n        // 32 byte slot 1, partial fill\\n        // Seller wallet address\\n        address seller;\\n        // 32 byte slot 2\\n        // Addess of oToken\\n        address oToken;\\n        // Price per oToken denominated in biddingToken\\n        uint96 minPrice;\\n        // 32 byte slot 3\\n        // ERC20 Token to bid for oToken\\n        address biddingToken;\\n        // Minimum oToken amount acceptable for a single bid\\n        uint96 minBidSize;\\n        // 32 byte slot 4\\n        // Total available oToken amount\\n        uint128 totalSize;\\n        // Remaining available oToken amount\\n        // This figure is updated after each successfull swap\\n        uint128 availableSize;\\n        // 32 byte slot 5\\n        // Amount of biddingToken received\\n        // This figure is updated after each successfull swap\\n        uint256 totalSales;\\n    }\\n\\n    struct Bid {\\n        // ID assigned to offers\\n        uint256 swapId;\\n        // Number only used once for each wallet\\n        uint256 nonce;\\n        // Signer wallet address\\n        address signerWallet;\\n        // Amount of biddingToken offered by signer\\n        uint256 sellAmount;\\n        // Amount of oToken requested by signer\\n        uint256 buyAmount;\\n        // Referrer wallet address\\n        address referrer;\\n        // Signature recovery id\\n        uint8 v;\\n        // r portion of the ECSDA signature\\n        bytes32 r;\\n        // s portion of the ECSDA signature\\n        bytes32 s;\\n    }\\n\\n    struct OfferDetails {\\n        // Seller wallet address\\n        address seller;\\n        // Addess of oToken\\n        address oToken;\\n        // Price per oToken denominated in biddingToken\\n        uint256 minPrice;\\n        // ERC20 Token to bid for oToken\\n        address biddingToken;\\n        // Minimum oToken amount acceptable for a single bid\\n        uint256 minBidSize;\\n    }\\n\\n    event Swap(\\n        uint256 indexed swapId,\\n        uint256 nonce,\\n        address indexed signerWallet,\\n        uint256 signerAmount,\\n        uint256 sellerAmount,\\n        address referrer,\\n        uint256 feeAmount\\n    );\\n\\n    event NewOffer(\\n        uint256 swapId,\\n        address seller,\\n        address oToken,\\n        address biddingToken,\\n        uint256 minPrice,\\n        uint256 minBidSize,\\n        uint256 totalSize\\n    );\\n\\n    event SetFee(address referrer, uint256 fee);\\n\\n    event SettleOffer(uint256 swapId);\\n\\n    event Cancel(uint256 indexed nonce, address indexed signerWallet);\\n\\n    event Authorize(address indexed signer, address indexed signerWallet);\\n\\n    event Revoke(address indexed signer, address indexed signerWallet);\\n\\n    function createOffer(\\n        address oToken,\\n        address biddingToken,\\n        uint96 minPrice,\\n        uint96 minBidSize,\\n        uint128 totalSize\\n    ) external returns (uint256 swapId);\\n\\n    function settleOffer(uint256 swapId, Bid[] calldata bids) external;\\n\\n    function cancelNonce(uint256[] calldata nonces) external;\\n\\n    function check(Bid calldata bid)\\n        external\\n        view\\n        returns (uint256, bytes32[] memory);\\n\\n    function averagePriceForOffer(uint256 swapId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function authorize(address sender) external;\\n\\n    function revoke() external;\\n\\n    function nonceUsed(address, uint256) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa4ad88a7fe546378a9603df8d75da4122fec56ec04c78e7d2161c6f0f153a56b\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 oTokenPremium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocation;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\n        require(oTokenSellAmount > 0, \\\"No otokens to sell\\\");\\n\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            DSMath.wmul(\\n                oTokenSellAmount.mul(10**10),\\n                auctionDetails.oTokenPremium\\n            );\\n\\n        minBidAmount = auctionDetails.assetDecimals > 18\\n            ? minBidAmount.mul(10**(auctionDetails.assetDecimals.sub(18)))\\n            : minBidAmount.div(\\n                10**(uint256(18).sub(auctionDetails.assetDecimals))\\n            );\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of oToken we minted and are selling\\n            auctionDetails.oTokenAddress,\\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\\n            auctionDetails.asset,\\n            // orders can be cancelled at any time during the auction\\n            auctionEnd,\\n            // order will last for `duration`\\n            auctionEnd,\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.oTokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            .mul(bidDetails.optionAllocation)\\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\\n            .div(bidDetails.optionPremium)\\n            .div(10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.oTokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n\\n        return (sellAmount, buyAmount, userId);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address oTokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but otokens will be transferred to gnosis.\\n        uint256 oTokenSellAmount =\\n            IERC20(oTokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        return oTokenSellAmount;\\n    }\\n\\n    function getOTokenPremiumInStables(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated USDC for both call and put options\\n        uint256 optionPremium =\\n            premiumPricer.getPremiumInStables(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xfbe9e9b0da571d9b83545d3ae71827da0f91bd1c68c6b68955907e6e967e4972\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x90bc4b56ee48f314d1e326903bdb2926bed143fa4e6867a7d44975503106bf56\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x3119c096a02be6137015be605caf65412e0dd4b7df5f25e73bab4f88fddfa5d6\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycleWithSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {ISwap} from \\\"../interfaces/ISwap.sol\\\";\\nimport {IOptionsPurchaseQueue} from \\\"../interfaces/IOptionsPurchaseQueue.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\n\\nlibrary VaultLifecycleWithSwap {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n    using SafeERC20 for IERC20;\\n\\n    struct CommitParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverrideRound;\\n        uint256 overriddenStrikePrice;\\n        address strikeSelection;\\n        address optionsPremiumPricer;\\n        uint256 premiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param commitParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return otokenAddress is the address of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitNextOption(\\n        CommitParams calldata commitParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry = getNextExpiry(commitParams.currentOption);\\n\\n        IStrikeSelection selection =\\n            IStrikeSelection(commitParams.strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = commitParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (commitParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = getOrDeployOtoken(\\n            commitParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        return (otokenAddress, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param decimals is the decimals of the asset\\n     * @param totalBalance is the vault's total asset balance\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     */\\n    struct CloseParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n        uint256 currentQueuedWithdrawShares;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function closeRound(\\n        Vault.VaultState storage vaultState,\\n        CloseParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        // Deduct older queued withdraws so we don't charge fees on them\\n        uint256 balanceForVaultFees =\\n            currentBalance.sub(params.lastQueuedWithdrawAmount);\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance.sub(totalVaultFee);\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply.sub(lastQueuedWithdrawShares),\\n                currentBalance.sub(params.lastQueuedWithdrawAmount),\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount.add(\\n                ShareMath.sharesToAsset(\\n                    params.currentQueuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                )\\n            );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n        }\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\n                .mul(10**18) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n\\n            if (collateralDecimals > 8) {\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n                if (mintAmount > scaleBy) {\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                }\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param oldOption is the address of the old option\\n     * @param asset is the address of the vault's asset\\n     * @return amount of asset received by exercising the option\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param currentOption is the address of the current option\\n     * @return amount of collateral redeemed by burning otokens\\n     */\\n    function burnOtokens(address gammaController, address currentOption)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 numOTokensToBurn =\\n            IERC20(currentOption).balanceOf(address(this));\\n\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\n\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning `amount` of oTokens from the ribbon vault,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            numOTokensToBurn, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\n                vault.shortAmounts[0]\\n            ), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance.sub(pendingAmount)\\n                : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? lockedBalanceSansPending\\n                    .sub(lastLockedAmount)\\n                    .mul(performanceFeePercent)\\n                    .div(100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\\n                    100 * Vault.FEE_MULTIPLIER\\n                )\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\n     * @param commitParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrice is the strike price of the option\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return the address of the option\\n     */\\n    function getOrDeployOtoken(\\n        CommitParams calldata commitParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(commitParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                commitParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                commitParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(\\n            otoken,\\n            vaultParams,\\n            collateralAsset,\\n            commitParams.USDC,\\n            commitParams.delay\\n        );\\n\\n        return otoken;\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) external view returns (uint256) {\\n        return\\n            _getOTokenPremium(\\n                oTokenAddress,\\n                optionsPremiumPricer,\\n                premiumDiscount\\n            );\\n    }\\n\\n    function _getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        uint256 optionPremium =\\n            premiumPricer.getPremium(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n        require(optionPremium > 0, \\\"!optionPremium\\\");\\n\\n        return optionPremium;\\n    }\\n\\n    /**\\n     * @notice Creates an offer in the Swap Contract\\n     * @param currentOtoken is the current otoken address\\n     * @param currOtokenPremium is premium for each otoken\\n     * @param swapContract the address of the swap contract\\n     * @param vaultParams is the struct with vault general data\\n     * @return optionAuctionID auction id of the newly created offer\\n     */\\n    function createOffer(\\n        address currentOtoken,\\n        uint256 currOtokenPremium,\\n        address swapContract,\\n        Vault.VaultParams storage vaultParams\\n    ) external returns (uint256 optionAuctionID) {\\n        require(\\n            currOtokenPremium <= type(uint96).max,\\n            \\\"currentOtokenPremium > type(uint96) max value!\\\"\\n        );\\n        require(currOtokenPremium > 0, \\\"!currentOtokenPremium\\\");\\n\\n        uint256 oTokenBalance = IERC20(currentOtoken).balanceOf(address(this));\\n        require(\\n            oTokenBalance <= type(uint128).max,\\n            \\\"oTokenBalance > type(uint128) max value!\\\"\\n        );\\n\\n        // Use safeIncrease instead of safeApproval because safeApproval is only used for initial\\n        // approval and cannot be called again. Using safeIncrease allow us to call _createOffer\\n        // even when we are approving the same oTokens we have used before. This might happen if\\n        // we accidentally burn the oTokens before settlement.\\n        uint256 allowance =\\n            IERC20(currentOtoken).allowance(address(this), swapContract);\\n\\n        if (allowance < oTokenBalance) {\\n            IERC20(currentOtoken).safeIncreaseAllowance(\\n                swapContract,\\n                oTokenBalance.sub(allowance)\\n            );\\n        }\\n\\n        uint256 decimals = vaultParams.decimals;\\n\\n        // If total size is larger than 1, set minimum bid as 1\\n        // Otherwise, set minimum bid to one tenth the total size\\n        uint256 minBidSize =\\n            oTokenBalance > 10**decimals ? 10**decimals : oTokenBalance.div(10);\\n\\n        require(\\n            minBidSize <= type(uint96).max,\\n            \\\"minBidSize > type(uint96) max value!\\\"\\n        );\\n\\n        currOtokenPremium = decimals > 18\\n            ? currOtokenPremium.mul(10**(decimals.sub(18)))\\n            : currOtokenPremium.div(10**(uint256(18).sub(decimals)));\\n\\n        optionAuctionID = ISwap(swapContract).createOffer(\\n            currentOtoken,\\n            vaultParams.asset,\\n            uint96(currOtokenPremium),\\n            uint96(minBidSize),\\n            uint128(oTokenBalance)\\n        );\\n    }\\n\\n    /**\\n     * @notice Allocates the vault's minted options to the OptionsPurchaseQueue contract\\n     * @dev Skipped if the optionsPurchaseQueue doesn't exist\\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\\n     * @param option is the minted option\\n     * @param optionsAmount is the amount of options minted\\n     * @param optionAllocation is the maximum % of options to allocate towards the purchase queue (will only allocate\\n     *  up to the amount that is on the queue)\\n     * @return allocatedOptions is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\\n     */\\n    function allocateOptions(\\n        address optionsPurchaseQueue,\\n        address option,\\n        uint256 optionsAmount,\\n        uint256 optionAllocation\\n    ) external returns (uint256 allocatedOptions) {\\n        // Skip if optionsPurchaseQueue is address(0)\\n        if (optionsPurchaseQueue != address(0)) {\\n            allocatedOptions = optionsAmount.mul(optionAllocation).div(\\n                100 * Vault.OPTION_ALLOCATION_MULTIPLIER\\n            );\\n            allocatedOptions = IOptionsPurchaseQueue(optionsPurchaseQueue)\\n                .getOptionsAllocation(address(this), allocatedOptions);\\n\\n            if (allocatedOptions != 0) {\\n                IERC20(option).approve(optionsPurchaseQueue, allocatedOptions);\\n                IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\\n                    allocatedOptions\\n                );\\n            }\\n        }\\n\\n        return allocatedOptions;\\n    }\\n\\n    /**\\n     * @notice Sell the allocated options to the purchase queue post auction settlement\\n     * @dev Reverts if the auction hasn't settled yet\\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\\n     * @param swapContract The address of the swap settlement contract\\n     * @return totalPremiums Total premiums earnt by the vault\\n     */\\n    function sellOptionsToQueue(\\n        address optionsPurchaseQueue,\\n        address swapContract,\\n        uint256 optionAuctionID\\n    ) external returns (uint256) {\\n        uint256 settlementPrice =\\n            getAuctionSettlementPrice(swapContract, optionAuctionID);\\n        require(settlementPrice != 0, \\\"!settlementPrice\\\");\\n\\n        return\\n            IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\\n                settlementPrice\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the settlement price of a settled auction\\n     * @param swapContract The address of the swap settlement contract\\n     * @param optionAuctionID is the offer ID\\n     * @return settlementPrice Auction settlement price\\n     */\\n    function getAuctionSettlementPrice(\\n        address swapContract,\\n        uint256 optionAuctionID\\n    ) public view returns (uint256) {\\n        return ISwap(swapContract).averagePriceForOffer(optionAuctionID);\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param owner is the owner of the vault with critical permissions\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        address owner,\\n        address keeper,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next option expiry timestamp\\n     * @param currentOption is the otoken address that the vault is currently writing\\n     */\\n    function getNextExpiry(address currentOption)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // uninitialized state\\n        if (currentOption == address(0)) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\\n\\n        // After options expiry if no options are written for >1 week\\n        // We need to give the ability continue writing options\\n        if (block.timestamp > currentExpiry + 7 days) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        return getNextFriday(currentExpiry);\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param timestamp is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (timestamp >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n}\\n\",\"keccak256\":\"0xc2d6ed868be684411f5c5335aad5b3fb1947a4bd2d6176f94505ed861e0850f6\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613ca161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c8063c72733f71161007b578063c72733f71461017c578063cc918e7a14610191578063d8dfd0fe146101b1578063d9b87438146101d1578063de8e341814610211578063efc79c1a1461023157600080fd5b806307199524146100c35780630f7d679f146100f65780632904c239146101095780632e5fdf28146101295780634511ae6e1461013c57806358ffbb3d1461015c575b600080fd5b8180156100cf57600080fd5b506100e36100de3660046135e7565b610276565b6040519081526020015b60405180910390f35b6100e3610104366004613537565b61066e565b81801561011557600080fd5b506100e3610124366004613413565b610685565b6100e36101373660046135bc565b610bf1565b81801561014857600080fd5b506100e3610157366004613537565b610c75565b81801561016857600080fd5b506100e3610177366004613391565b610d47565b61018f61018a366004613463565b6112d5565b005b81801561019d57600080fd5b506100e36101ac366004613577565b6116a7565b8180156101bd57600080fd5b506100e36101cc366004613359565b61185f565b6101e46101df366004613679565b611c26565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ed565b81801561021d57600080fd5b506100e361022c3660046133c9565b611d3d565b81801561023d57600080fd5b5061025161024c36600461363e565b612036565b604080516001600160a01b0390941684526020840192909252908201526060016100ed565b60006001600160601b038411156102eb5760405162461bcd60e51b815260206004820152602e60248201527f63757272656e744f746f6b656e5072656d69756d203e20747970652875696e7460448201526d393629206d61782076616c75652160901b60648201526084015b60405180910390fd5b600084116103335760405162461bcd60e51b81526020600482015260156024820152742163757272656e744f746f6b656e5072656d69756d60581b60448201526064016102e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b15801561037557600080fd5b505afa158015610389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ad9190613811565b90506001600160801b038111156104175760405162461bcd60e51b815260206004820152602860248201527f6f546f6b656e42616c616e6365203e20747970652875696e7431323829206d61604482015267782076616c75652160c01b60648201526084016102e2565b604051636eb1769f60e11b81523060048201526001600160a01b0385811660248301526000919088169063dd62ed3e9060440160206040518083038186803b15801561046257600080fd5b505afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190613811565b9050818110156104c3576104c3856104b28484612205565b6001600160a01b038a169190612211565b8354610100900460ff1660006104da82600a613af3565b84116104f0576104eb84600a61230b565b6104fb565b6104fb82600a613af3565b90506001600160601b038111156105605760405162461bcd60e51b8152602060048201526024808201527f6d696e42696453697a65203e20747970652875696e74393629206d61782076616044820152636c75652160e01b60648201526084016102e2565b6012821161058d57610588610576601284612205565b61058190600a613af3565b899061230b565b6105ad565b6105ad61059b836012612205565b6105a690600a613af3565b8990612317565b86546040516307a975a160e01b81526001600160a01b038c8116600483015262010000909204821660248201526001600160601b038084166044830152841660648201526001600160801b03871660848201529199508816906307a975a19060a401602060405180830381600087803b15801561062957600080fd5b505af115801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190613811565b9998505050505050505050565b600061067b848484612323565b90505b9392505050565b604051636553690d60e11b815230600482015260009085908290610710906001906001600160a01b0385169063caa6d21a9060240160206040518083038186803b1580156106d257600080fd5b505afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a9190613811565b906125df565b905060008590506000816001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a9190613375565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff9190613873565b60ff1690506000836001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561083f57600080fd5b505afa158015610853573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610877919061361e565b1561093e5761093761090f61088d84600a613a84565b61089890600a613af3565b866001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d157600080fd5b505afa1580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190613811565b90612317565b610931670de0b6b3a764000061090961092a6008600a613af3565b8d90612317565b9061230b565b905061097a565b5086600882111561097a576000610956836008612205565b61096190600a613af3565b90508082111561097857610975898261230b565b91505b505b8261098f6001600160a01b0382168c8b6125eb565b60408051600380825260808201909252600091816020015b6109af6131dc565b8152602001906001900390816109a7579050506040805161010081019091529091508060008152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200188815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110610a4f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805161010081019091528060058152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018881526020018b8152602001600081526020016040518060200160405280600081525081525081600181518110610ae257634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805161010081019091528060018152602001306001600160a01b03168152602001306001600160a01b031681526020018c6001600160a01b03168152602001888152602001848152602001600081526020016040518060200160405280600081525081525081600281518110610b7557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690610bac908490600401613915565b600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b50949a50505050505050505050505b949350505050565b6040516304f0f6bf60e31b8152600481018290526000906001600160a01b03841690632787b5f89060240160206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190613811565b90505b92915050565b600080610c828484610bf1565b905080610cc45760405162461bcd60e51b815260206004820152601060248201526f21736574746c656d656e74507269636560801b60448201526064016102e2565b6040516335053ced60e11b8152600481018290526001600160a01b03861690636a0a79da90602401602060405180830381600087803b158015610d0657600080fd5b505af1158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e9190613811565b95945050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038416906370a082319060240160206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190613811565b905060008111610e0a5760405162461bcd60e51b815260206004820152601260248201527127379037aa37b5b2b739903a3790313ab93760711b60448201526064016102e2565b604051636553690d60e11b815230600482015284906000906001600160a01b0383169063caa6d21a9060240160206040518083038186803b158015610e4e57600080fd5b505afa158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e869190613811565b60405163d99d13f560e01b8152306004820152602481018290529091506000906001600160a01b0384169063d99d13f59060440160006040518083038186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f0e91908101906136b0565b805151909150610f4b5760405162461bcd60e51b8152602060048201526008602482015267139bc81cda1bdc9d60c21b60448201526064016102e2565b60008160400151600081518110610f7257634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa9190613811565b6040805160028082526060820190925291925060009190816020015b61101e6131dc565b815260200190600190039081611016579050506040805161010081019091529091508060028152306020820181905260408201528551805160609092019160009061107957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031681526020018681526020018881526020016000815260200160405180602001604052806000815250815250816000815181106110d657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805161010081019091528060068152602001306001600160a01b03168152602001306001600160a01b03168152602001846001600160a01b03168152602001868152602001611197866060015160008151811061115057634e487b7160e01b600052603260045260246000fd5b60200260200101516109318b8960a0015160008151811061118157634e487b7160e01b600052603260045260246000fd5b602002602001015161231790919063ffffffff16565b81526020016000815260200160405180602001604052806000815250815250816001815181106111d757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0387169063b617f0c69061120e908490600401613915565b600060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a082319060240160206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190613811565b90506112c68184612205565b9b9a5050505050505050505050565b6001600160a01b038a166113145760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016102e2565b6001600160a01b0389166113545760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b60448201526064016102e2565b6001600160a01b03881661139a5760405162461bcd60e51b815260206004820152600d60248201526c08599959549958da5c1a595b9d609a1b60448201526064016102e2565b6113a8620f42406064613b9b565b87106113ef5760405162461bcd60e51b8152602060048201526016602482015275706572666f726d616e6365466565203e3d203130302560501b60448201526064016102e2565b6113fd620f42406064613b9b565b86106114435760405162461bcd60e51b81526020600482015260156024820152746d616e6167656d656e74466565203e3d203130302560581b60448201526064016102e2565b8361147d5760405162461bcd60e51b815260206004820152600a60248201526921746f6b656e4e616d6560b01b60448201526064016102e2565b816114b95760405162461bcd60e51b815260206004820152600c60248201526b085d1bdad95b94de5b589bdb60a21b60448201526064016102e2565b60006114cb6060830160408401613359565b6001600160a01b0316141561150b5760405162461bcd60e51b815260206004820152600660248201526508585cdcd95d60d21b60448201526064016102e2565b600061151d6080830160608401613359565b6001600160a01b031614156115625760405162461bcd60e51b815260206004820152600b60248201526a21756e6465726c79696e6760a81b60448201526064016102e2565b600061157460a083016080840161384c565b66ffffffffffffff16116115bb5760405162461bcd60e51b815260206004820152600e60248201526d216d696e696d756d537570706c7960901b60448201526064016102e2565b60006115cd60c0830160a084016137c8565b6001600160681b03161161160c5760405162461bcd60e51b81526004016102e2906020808252600490820152630216361760e41b604082015260600190565b61161c60a082016080830161384c565b66ffffffffffffff1661163560c0830160a084016137c8565b6001600160681b03161161169b5760405162461bcd60e51b815260206004820152602760248201527f6361702068617320746f20626520686967686572207468616e206d696e696d756044820152666d537570706c7960c81b60648201526084016102e2565b50505050505050505050565b60006001600160a01b03851615610be9576116d06116c6606480613b9b565b6109318585612317565b6040516308997b9760e01b8152306004820152602481018290529091506001600160a01b038616906308997b979060440160206040518083038186803b15801561171957600080fd5b505afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190613811565b90508015610be95760405163095ea7b360e01b81526001600160a01b0386811660048301526024820183905285169063095ea7b390604401602060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db919061361e565b50604051637c3e116b60e01b8152600481018290526001600160a01b03861690637c3e116b90602401602060405180830381600087803b15801561181e57600080fd5b505af1158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190613811565b50949350505050565b604051636553690d60e11b8152306004820152600090829082906001600160a01b0383169063caa6d21a9060240160206040518083038186803b1580156118a557600080fd5b505afa1580156118b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dd9190613811565b60405163d99d13f560e01b8152306004820152602481018290529091506000906001600160a01b0384169063d99d13f59060440160006040518083038186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261196591908101906136b0565b8051519091506119a25760405162461bcd60e51b8152602060048201526008602482015267139bc81cda1bdc9d60c21b60448201526064016102e2565b600081604001516000815181106119c957634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b031614156119fa5750600095945050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611a3c57600080fd5b505afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a749190613811565b60408051600180825281830190925291925060009190816020015b611a976131dc565b815260200190600190039081611a8f579050506040805161010081019091529091508060078152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200186815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110611b3757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0387169063b617f0c690611b6e908490600401613915565b600060405180830381600087803b158015611b8857600080fd5b505af1158015611b9c573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a082319060240160206040518083038186803b158015611be257600080fd5b505afa158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a9190613811565b90506106618184612205565b6001820154600090819081908190819081906020880135906001600160801b0380821691600160801b90041683611c618460608d0135612205565b9050611cb8818d600001600f9054906101000a90046001600160681b03166001600160681b03168e60010160009054906101000a90046001600160801b03166001600160801b03168e608001358f60a0013561262c565b919750909550611cca90508486612205565b9350611cf3611cdd60408d013584612205565b611ceb8660608f0135612205565b858e356126dd565b9750611d13611d0860c08d01358a8e35612713565b60608d0135906125df565b9850611d2183898d35612775565b9650611d2d848a612205565b9950505050509295509295509295565b6040516370a0823160e01b8152306004820152600090849082906001600160a01b038616906370a082319060240160206040518083038186803b158015611d8357600080fd5b505afa158015611d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbb9190613811565b60405163565eea1960e01b81526001600160a01b038781166004830152602482018390529192509083169063565eea199060440160206040518083038186803b158015611e0757600080fd5b505afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190613811565b611e4e5760009250505061067e565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015611e9057600080fd5b505afa158015611ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec89190613811565b60408051600180825281830190925291925060009190816020015b611eeb6131dc565b815260200190600190039081611ee357905050604080516101008101909152909150806008815260200160006001600160a01b03168152602001306001600160a01b03168152602001886001600160a01b0316815260200160008152602001848152602001600081526020016040518060200160405280600081525081525081600081518110611f8b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0385169063b617f0c690611fc2908490600401613915565b600060405180830381600087803b158015611fdc57600080fd5b505af1158015611ff0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03891691506370a082319060240160206040518083038186803b158015611be257600080fd5b600080808061205361204e6060890160408a01613359565b6127d8565b9050600061206760e0890160c08a01613359565b87546001890154885492935060ff8216926001600160a01b03918216926201000090049091169061ffff166120a260a08d0160808e016137ef565b61ffff161461212f5760405163e436b89160e01b81526004810186905283151560248201526001600160a01b0385169063e436b89190604401604080518083038186803b1580156120f257600080fd5b505afa158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a9190613829565b6121a5565b8a60a00135846001600160a01b03166312b495a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561216d57600080fd5b505afa158015612181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a59190613811565b9097509550866121e65760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b60448201526064016102e2565b6121f58b8b84848b8a8961288c565b9750505050505093509350939050565b6000610c6c8284613bba565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122959190613811565b61229f9190613a84565b6040516001600160a01b03851660248201526044810182905290915061230590859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a20565b50505050565b6000610c6c8284613a9c565b6000610c6c8284613b9b565b60008084905060008490506000816001600160a01b031663fc3d42e8846001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561237857600080fd5b505afa15801561238c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b09190613811565b856001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123e957600080fd5b505afa1580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124219190613811565b866001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561245a57600080fd5b505afa15801561246e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612492919061361e565b6040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260640160206040518083038186803b1580156124d857600080fd5b505afa1580156124ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125109190613811565b905061252b612521600a6064613b9b565b6109318388612317565b90506001600160601b038111156125945760405162461bcd60e51b815260206004820152602760248201527f6f7074696f6e5072656d69756d203e20747970652875696e74393629206d61786044820152662076616c75652160c81b60648201526084016102e2565b600081116125d55760405162461bcd60e51b815260206004820152600e60248201526d216f7074696f6e5072656d69756d60901b60448201526064016102e2565b9695505050505050565b6000610c6c8284613a84565b6001600160a01b03831673dac17f958d2ee523a2206206994597c13d831ec7141561261c5761261c83836000612af2565b612627838383612af2565b505050565b60008060008086891161264057600061264a565b61264a8988612205565b905060008060008a8411156126cb5760008911612668576000612690565b612690612679620f42406064613b9b565b6109318b6109098f8961220590919063ffffffff16565b9250600088116126a15760006126bc565b6126bc6126b2620f42406064613b9b565b610931868b612317565b91506126c883836125df565b90505b919b909a509098509650505050505050565b6000806126eb83600a613af3565b9050600086116126fb57806125d5565b6125d58661093161270c8888612205565b8490612317565b60006001831161275d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016102e2565b61067b61276b83600a613af3565b6109318686612317565b6000600183116127bf5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016102e2565b61067b836109316127d185600a613af3565b8790612317565b60006001600160a01b0382166127f157610c6f42612c16565b6000826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282c57600080fd5b505afa158015612840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128649190613811565b90506128738162093a80613a84565b4211156128835761067e42612c16565b61067e81612c16565b60008061289c60208a018a613359565b905060006001600160a01b0382166311547054896128c060408e0160208f01613359565b8a8a8a8a6040518763ffffffff1660e01b81526004016128e5969594939291906138dc565b60206040518083038186803b1580156128fd57600080fd5b505afa158015612911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129359190613375565b90506001600160a01b0381161561294f579150612a159050565b6000826001600160a01b031663c09746308a8d60200160208101906129749190613359565b8b8b8b8b6040518763ffffffff1660e01b8152600401612999969594939291906138dc565b602060405180830381600087803b1580156129b357600080fd5b505af11580156129c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129eb9190613375565b9050612a10818b8a8e6020016020810190612a069190613359565b8f60600135612cac565b925050505b979650505050505050565b6000612a75826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130e19092919063ffffffff16565b8051909150156126275780806020019051810190612a93919061361e565b6126275760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102e2565b801580612b7b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612b4157600080fd5b505afa158015612b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b799190613811565b155b612be65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016102e2565b6040516001600160a01b03831660248201526044810182905261262790849063095ea7b360e01b906064016122ce565b6000806007612c286201518085613a9c565b612c33906004613a84565b612c3d9190613bfd565b905060006007612c4e83600c613bba565b612c589190613bfd565b612c659062015180613b9b565b612c6f9085613a84565b90506000612c806201518083613bfd565b612c8a9083613bba565b612c9690617080613a84565b9050808510610be957610d3e62093a8082613a84565b6001600160a01b038516612cf35760405162461bcd60e51b815260206004820152600e60248201526d216f746f6b656e4164647265737360901b60448201526064016102e2565b8354604080516379e13a5360e11b81529051879260ff161515916001600160a01b0384169163f3c274a691600480820192602092909190829003018186803b158015612d3e57600080fd5b505afa158015612d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d76919061361e565b151514612db55760405162461bcd60e51b815260206004820152600d60248201526c0a8f2e0ca40dad2e6dac2e8c6d609b1b60448201526064016102e2565b600185015460408051631c56369f60e21b815290516001600160a01b0392831692841691637158da7c916004808301926020929190829003018186803b158015612dfe57600080fd5b505afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190613375565b6001600160a01b031614612e845760405162461bcd60e51b815260206004820152601560248201527415dc9bdb99c81d5b99195c9b1e5a5b99d05cdcd95d605a1b60448201526064016102e2565b836001600160a01b0316816001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015612ec757600080fd5b505afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff9190613375565b6001600160a01b031614612f4d5760405162461bcd60e51b815260206004820152601560248201527415dc9bdb99c818dbdb1b185d195c985b105cdcd95d605a1b60448201526064016102e2565b826001600160a01b0316816001600160a01b03166317d69bc86040518163ffffffff1660e01b815260040160206040518083038186803b158015612f9057600080fd5b505afa158015612fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc89190613375565b6001600160a01b0316146130145760405162461bcd60e51b8152602060048201526013602482015272737472696b65417373657420213d205553444360681b60448201526064016102e2565b600061302042846125df565b905080826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561305c57600080fd5b505afa158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190613811565b10156130d85760405162461bcd60e51b8152602060048201526013602482015272457870697279206265666f72652064656c617960681b60448201526064016102e2565b50505050505050565b606061067b848460008585843b61313a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e2565b600080866001600160a01b0316858760405161315691906138c0565b60006040518083038185875af1925050503d8060008114613193576040519150601f19603f3d011682016040523d82523d6000602084013e613198565b606091505b5091509150612a15828286606083156131b257508161067e565b8251156131c25782518084602001fd5b8160405162461bcd60e51b81526004016102e291906139f3565b604080516101008101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b600082601f83011261324d578081fd5b8151602061326261325d83613a60565b613a2f565b80838252828201915082860187848660051b8901011115613281578586fd5b855b858110156132a857815161329681613c53565b84529284019290840190600101613283565b5090979650505050505050565b600082601f8301126132c5578081fd5b815160206132d561325d83613a60565b80838252828201915082860187848660051b89010111156132f4578586fd5b855b858110156132a8578151845292840192908401906001016132f6565b60008083601f840112613323578182fd5b50813567ffffffffffffffff81111561333a578182fd5b60208301915083602082850101111561335257600080fd5b9250929050565b60006020828403121561336a578081fd5b813561067e81613c53565b600060208284031215613386578081fd5b815161067e81613c53565b600080604083850312156133a3578081fd5b82356133ae81613c53565b915060208301356133be81613c53565b809150509250929050565b6000806000606084860312156133dd578081fd5b83356133e881613c53565b925060208401356133f881613c53565b9150604084013561340881613c53565b809150509250925092565b60008060008060808587031215613428578081fd5b843561343381613c53565b9350602085013561344381613c53565b9250604085013561345381613c53565b9396929550929360600135925050565b6000806000806000806000806000806101a08b8d031215613482578788fd5b61348c8b35613c53565b8a35995060208b013561349e81613c53565b985060408b01356134ae81613c53565b975060608b0135965060808b0135955060a08b013567ffffffffffffffff808211156134d8578687fd5b6134e48e838f01613312565b909750955060c08d01359150808211156134fc578485fd5b506135098d828e01613312565b90945092505060c08b8d0360df19011215613522578081fd5b60e08b0190509295989b9194979a5092959850565b60008060006060848603121561354b578081fd5b833561355681613c53565b9250602084013561356681613c53565b929592945050506040919091013590565b6000806000806080858703121561358c578182fd5b843561359781613c53565b935060208501356135a781613c53565b93969395505050506040820135916060013590565b600080604083850312156135ce578182fd5b82356135d981613c53565b946020939093013593505050565b600080600080608085870312156135fc578182fd5b843561360781613c53565b935060208501359250604085013561345381613c53565b60006020828403121561362f578081fd5b8151801515811461067e578182fd5b6000806000838503610160811215613654578182fd5b61012080821215613663578283fd5b9496948701359550505061014085013592915050565b60008082840361010081121561368d578283fd5b8335925060e0601f19820112156136a2578182fd5b506020830190509250929050565b6000602082840312156136c1578081fd5b815167ffffffffffffffff808211156136d8578283fd5b9083019060c082860312156136eb578283fd5b6136f3613a06565b825182811115613701578485fd5b61370d8782860161323d565b825250602083015182811115613721578485fd5b61372d8782860161323d565b602083015250604083015182811115613744578485fd5b6137508782860161323d565b604083015250606083015182811115613767578485fd5b613773878286016132b5565b60608301525060808301518281111561378a578485fd5b613796878286016132b5565b60808301525060a0830151828111156137ad578485fd5b6137b9878286016132b5565b60a08301525095945050505050565b6000602082840312156137d9578081fd5b81356001600160681b038116811461067e578182fd5b600060208284031215613800578081fd5b813561ffff8116811461067e578182fd5b600060208284031215613822578081fd5b5051919050565b6000806040838503121561383b578182fd5b505080516020909101519092909150565b60006020828403121561385d578081fd5b813566ffffffffffffff8116811461067e578182fd5b600060208284031215613884578081fd5b815160ff8116811461067e578182fd5b600081518084526138ac816020860160208601613bd1565b601f01601f19169290920160200192915050565b600082516138d2818460208701613bd1565b9190910192915050565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925290151560a082015260c00190565b60006020808301818452808551808352604092508286019150828160051b870101848801865b838110156139e557603f1989840301855281516101008151600b811061396f57634e487b7160e01b8b52602160045260248bfd5b8552818901516001600160a01b039081168a87015288830151811689870152606080840151909116908601526080808301519086015260a0808301519086015260c0808301519086015260e0918201519185018190526139d181860183613894565b96890196945050509086019060010161393b565b509098975050505050505050565b602081526000610c6c6020830184613894565b60405160c0810167ffffffffffffffff81118282101715613a2957613a29613c3d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a5857613a58613c3d565b604052919050565b600067ffffffffffffffff821115613a7a57613a7a613c3d565b5060051b60200190565b60008219821115613a9757613a97613c11565b500190565b600082613aab57613aab613c27565b500490565b600181815b80851115613aeb578160001904821115613ad157613ad1613c11565b80851615613ade57918102915b93841c9390800290613ab5565b509250929050565b6000610c6c8383600082613b0957506001610c6f565b81613b1657506000610c6f565b8160018114613b2c5760028114613b3657613b52565b6001915050610c6f565b60ff841115613b4757613b47613c11565b50506001821b610c6f565b5060208310610133831016604e8410600b8410161715613b75575081810a610c6f565b613b7f8383613ab0565b8060001904821115613b9357613b93613c11565b029392505050565b6000816000190483118215151615613bb557613bb5613c11565b500290565b600082821015613bcc57613bcc613c11565b500390565b60005b83811015613bec578181015183820152602001613bd4565b838111156123055750506000910152565b600082613c0c57613c0c613c27565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613c6857600080fd5b5056fea26469706673582212201f08d5c080a8bc83a2776285d7f6aeb965c3b2c40263d2d16979705d3103be5964736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c8063c72733f71161007b578063c72733f71461017c578063cc918e7a14610191578063d8dfd0fe146101b1578063d9b87438146101d1578063de8e341814610211578063efc79c1a1461023157600080fd5b806307199524146100c35780630f7d679f146100f65780632904c239146101095780632e5fdf28146101295780634511ae6e1461013c57806358ffbb3d1461015c575b600080fd5b8180156100cf57600080fd5b506100e36100de3660046135e7565b610276565b6040519081526020015b60405180910390f35b6100e3610104366004613537565b61066e565b81801561011557600080fd5b506100e3610124366004613413565b610685565b6100e36101373660046135bc565b610bf1565b81801561014857600080fd5b506100e3610157366004613537565b610c75565b81801561016857600080fd5b506100e3610177366004613391565b610d47565b61018f61018a366004613463565b6112d5565b005b81801561019d57600080fd5b506100e36101ac366004613577565b6116a7565b8180156101bd57600080fd5b506100e36101cc366004613359565b61185f565b6101e46101df366004613679565b611c26565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ed565b81801561021d57600080fd5b506100e361022c3660046133c9565b611d3d565b81801561023d57600080fd5b5061025161024c36600461363e565b612036565b604080516001600160a01b0390941684526020840192909252908201526060016100ed565b60006001600160601b038411156102eb5760405162461bcd60e51b815260206004820152602e60248201527f63757272656e744f746f6b656e5072656d69756d203e20747970652875696e7460448201526d393629206d61782076616c75652160901b60648201526084015b60405180910390fd5b600084116103335760405162461bcd60e51b81526020600482015260156024820152742163757272656e744f746f6b656e5072656d69756d60581b60448201526064016102e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a082319060240160206040518083038186803b15801561037557600080fd5b505afa158015610389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ad9190613811565b90506001600160801b038111156104175760405162461bcd60e51b815260206004820152602860248201527f6f546f6b656e42616c616e6365203e20747970652875696e7431323829206d61604482015267782076616c75652160c01b60648201526084016102e2565b604051636eb1769f60e11b81523060048201526001600160a01b0385811660248301526000919088169063dd62ed3e9060440160206040518083038186803b15801561046257600080fd5b505afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190613811565b9050818110156104c3576104c3856104b28484612205565b6001600160a01b038a169190612211565b8354610100900460ff1660006104da82600a613af3565b84116104f0576104eb84600a61230b565b6104fb565b6104fb82600a613af3565b90506001600160601b038111156105605760405162461bcd60e51b8152602060048201526024808201527f6d696e42696453697a65203e20747970652875696e74393629206d61782076616044820152636c75652160e01b60648201526084016102e2565b6012821161058d57610588610576601284612205565b61058190600a613af3565b899061230b565b6105ad565b6105ad61059b836012612205565b6105a690600a613af3565b8990612317565b86546040516307a975a160e01b81526001600160a01b038c8116600483015262010000909204821660248201526001600160601b038084166044830152841660648201526001600160801b03871660848201529199508816906307a975a19060a401602060405180830381600087803b15801561062957600080fd5b505af115801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190613811565b9998505050505050505050565b600061067b848484612323565b90505b9392505050565b604051636553690d60e11b815230600482015260009085908290610710906001906001600160a01b0385169063caa6d21a9060240160206040518083038186803b1580156106d257600080fd5b505afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a9190613811565b906125df565b905060008590506000816001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a9190613375565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff9190613873565b60ff1690506000836001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561083f57600080fd5b505afa158015610853573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610877919061361e565b1561093e5761093761090f61088d84600a613a84565b61089890600a613af3565b866001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d157600080fd5b505afa1580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190613811565b90612317565b610931670de0b6b3a764000061090961092a6008600a613af3565b8d90612317565b9061230b565b905061097a565b5086600882111561097a576000610956836008612205565b61096190600a613af3565b90508082111561097857610975898261230b565b91505b505b8261098f6001600160a01b0382168c8b6125eb565b60408051600380825260808201909252600091816020015b6109af6131dc565b8152602001906001900390816109a7579050506040805161010081019091529091508060008152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200188815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110610a4f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805161010081019091528060058152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018881526020018b8152602001600081526020016040518060200160405280600081525081525081600181518110610ae257634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805161010081019091528060018152602001306001600160a01b03168152602001306001600160a01b031681526020018c6001600160a01b03168152602001888152602001848152602001600081526020016040518060200160405280600081525081525081600281518110610b7557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0389169063b617f0c690610bac908490600401613915565b600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b50949a50505050505050505050505b949350505050565b6040516304f0f6bf60e31b8152600481018290526000906001600160a01b03841690632787b5f89060240160206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190613811565b90505b92915050565b600080610c828484610bf1565b905080610cc45760405162461bcd60e51b815260206004820152601060248201526f21736574746c656d656e74507269636560801b60448201526064016102e2565b6040516335053ced60e11b8152600481018290526001600160a01b03861690636a0a79da90602401602060405180830381600087803b158015610d0657600080fd5b505af1158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e9190613811565b95945050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038416906370a082319060240160206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190613811565b905060008111610e0a5760405162461bcd60e51b815260206004820152601260248201527127379037aa37b5b2b739903a3790313ab93760711b60448201526064016102e2565b604051636553690d60e11b815230600482015284906000906001600160a01b0383169063caa6d21a9060240160206040518083038186803b158015610e4e57600080fd5b505afa158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e869190613811565b60405163d99d13f560e01b8152306004820152602481018290529091506000906001600160a01b0384169063d99d13f59060440160006040518083038186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f0e91908101906136b0565b805151909150610f4b5760405162461bcd60e51b8152602060048201526008602482015267139bc81cda1bdc9d60c21b60448201526064016102e2565b60008160400151600081518110610f7257634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa9190613811565b6040805160028082526060820190925291925060009190816020015b61101e6131dc565b815260200190600190039081611016579050506040805161010081019091529091508060028152306020820181905260408201528551805160609092019160009061107957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031681526020018681526020018881526020016000815260200160405180602001604052806000815250815250816000815181106110d657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805161010081019091528060068152602001306001600160a01b03168152602001306001600160a01b03168152602001846001600160a01b03168152602001868152602001611197866060015160008151811061115057634e487b7160e01b600052603260045260246000fd5b60200260200101516109318b8960a0015160008151811061118157634e487b7160e01b600052603260045260246000fd5b602002602001015161231790919063ffffffff16565b81526020016000815260200160405180602001604052806000815250815250816001815181106111d757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0387169063b617f0c69061120e908490600401613915565b600060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a082319060240160206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190613811565b90506112c68184612205565b9b9a5050505050505050505050565b6001600160a01b038a166113145760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016102e2565b6001600160a01b0389166113545760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b60448201526064016102e2565b6001600160a01b03881661139a5760405162461bcd60e51b815260206004820152600d60248201526c08599959549958da5c1a595b9d609a1b60448201526064016102e2565b6113a8620f42406064613b9b565b87106113ef5760405162461bcd60e51b8152602060048201526016602482015275706572666f726d616e6365466565203e3d203130302560501b60448201526064016102e2565b6113fd620f42406064613b9b565b86106114435760405162461bcd60e51b81526020600482015260156024820152746d616e6167656d656e74466565203e3d203130302560581b60448201526064016102e2565b8361147d5760405162461bcd60e51b815260206004820152600a60248201526921746f6b656e4e616d6560b01b60448201526064016102e2565b816114b95760405162461bcd60e51b815260206004820152600c60248201526b085d1bdad95b94de5b589bdb60a21b60448201526064016102e2565b60006114cb6060830160408401613359565b6001600160a01b0316141561150b5760405162461bcd60e51b815260206004820152600660248201526508585cdcd95d60d21b60448201526064016102e2565b600061151d6080830160608401613359565b6001600160a01b031614156115625760405162461bcd60e51b815260206004820152600b60248201526a21756e6465726c79696e6760a81b60448201526064016102e2565b600061157460a083016080840161384c565b66ffffffffffffff16116115bb5760405162461bcd60e51b815260206004820152600e60248201526d216d696e696d756d537570706c7960901b60448201526064016102e2565b60006115cd60c0830160a084016137c8565b6001600160681b03161161160c5760405162461bcd60e51b81526004016102e2906020808252600490820152630216361760e41b604082015260600190565b61161c60a082016080830161384c565b66ffffffffffffff1661163560c0830160a084016137c8565b6001600160681b03161161169b5760405162461bcd60e51b815260206004820152602760248201527f6361702068617320746f20626520686967686572207468616e206d696e696d756044820152666d537570706c7960c81b60648201526084016102e2565b50505050505050505050565b60006001600160a01b03851615610be9576116d06116c6606480613b9b565b6109318585612317565b6040516308997b9760e01b8152306004820152602481018290529091506001600160a01b038616906308997b979060440160206040518083038186803b15801561171957600080fd5b505afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117519190613811565b90508015610be95760405163095ea7b360e01b81526001600160a01b0386811660048301526024820183905285169063095ea7b390604401602060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db919061361e565b50604051637c3e116b60e01b8152600481018290526001600160a01b03861690637c3e116b90602401602060405180830381600087803b15801561181e57600080fd5b505af1158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190613811565b50949350505050565b604051636553690d60e11b8152306004820152600090829082906001600160a01b0383169063caa6d21a9060240160206040518083038186803b1580156118a557600080fd5b505afa1580156118b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dd9190613811565b60405163d99d13f560e01b8152306004820152602481018290529091506000906001600160a01b0384169063d99d13f59060440160006040518083038186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261196591908101906136b0565b8051519091506119a25760405162461bcd60e51b8152602060048201526008602482015267139bc81cda1bdc9d60c21b60448201526064016102e2565b600081604001516000815181106119c957634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b031614156119fa5750600095945050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611a3c57600080fd5b505afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a749190613811565b60408051600180825281830190925291925060009190816020015b611a976131dc565b815260200190600190039081611a8f579050506040805161010081019091529091508060078152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200186815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110611b3757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0387169063b617f0c690611b6e908490600401613915565b600060405180830381600087803b158015611b8857600080fd5b505af1158015611b9c573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a082319060240160206040518083038186803b158015611be257600080fd5b505afa158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a9190613811565b90506106618184612205565b6001820154600090819081908190819081906020880135906001600160801b0380821691600160801b90041683611c618460608d0135612205565b9050611cb8818d600001600f9054906101000a90046001600160681b03166001600160681b03168e60010160009054906101000a90046001600160801b03166001600160801b03168e608001358f60a0013561262c565b919750909550611cca90508486612205565b9350611cf3611cdd60408d013584612205565b611ceb8660608f0135612205565b858e356126dd565b9750611d13611d0860c08d01358a8e35612713565b60608d0135906125df565b9850611d2183898d35612775565b9650611d2d848a612205565b9950505050509295509295509295565b6040516370a0823160e01b8152306004820152600090849082906001600160a01b038616906370a082319060240160206040518083038186803b158015611d8357600080fd5b505afa158015611d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbb9190613811565b60405163565eea1960e01b81526001600160a01b038781166004830152602482018390529192509083169063565eea199060440160206040518083038186803b158015611e0757600080fd5b505afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f9190613811565b611e4e5760009250505061067e565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015611e9057600080fd5b505afa158015611ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec89190613811565b60408051600180825281830190925291925060009190816020015b611eeb6131dc565b815260200190600190039081611ee357905050604080516101008101909152909150806008815260200160006001600160a01b03168152602001306001600160a01b03168152602001886001600160a01b0316815260200160008152602001848152602001600081526020016040518060200160405280600081525081525081600081518110611f8b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0385169063b617f0c690611fc2908490600401613915565b600060405180830381600087803b158015611fdc57600080fd5b505af1158015611ff0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03891691506370a082319060240160206040518083038186803b158015611be257600080fd5b600080808061205361204e6060890160408a01613359565b6127d8565b9050600061206760e0890160c08a01613359565b87546001890154885492935060ff8216926001600160a01b03918216926201000090049091169061ffff166120a260a08d0160808e016137ef565b61ffff161461212f5760405163e436b89160e01b81526004810186905283151560248201526001600160a01b0385169063e436b89190604401604080518083038186803b1580156120f257600080fd5b505afa158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a9190613829565b6121a5565b8a60a00135846001600160a01b03166312b495a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561216d57600080fd5b505afa158015612181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a59190613811565b9097509550866121e65760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b60448201526064016102e2565b6121f58b8b84848b8a8961288c565b9750505050505093509350939050565b6000610c6c8284613bba565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122959190613811565b61229f9190613a84565b6040516001600160a01b03851660248201526044810182905290915061230590859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a20565b50505050565b6000610c6c8284613a9c565b6000610c6c8284613b9b565b60008084905060008490506000816001600160a01b031663fc3d42e8846001600160a01b031663c52987cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561237857600080fd5b505afa15801561238c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b09190613811565b856001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123e957600080fd5b505afa1580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124219190613811565b866001600160a01b031663f3c274a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561245a57600080fd5b505afa15801561246e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612492919061361e565b6040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260640160206040518083038186803b1580156124d857600080fd5b505afa1580156124ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125109190613811565b905061252b612521600a6064613b9b565b6109318388612317565b90506001600160601b038111156125945760405162461bcd60e51b815260206004820152602760248201527f6f7074696f6e5072656d69756d203e20747970652875696e74393629206d61786044820152662076616c75652160c81b60648201526084016102e2565b600081116125d55760405162461bcd60e51b815260206004820152600e60248201526d216f7074696f6e5072656d69756d60901b60448201526064016102e2565b9695505050505050565b6000610c6c8284613a84565b6001600160a01b03831673dac17f958d2ee523a2206206994597c13d831ec7141561261c5761261c83836000612af2565b612627838383612af2565b505050565b60008060008086891161264057600061264a565b61264a8988612205565b905060008060008a8411156126cb5760008911612668576000612690565b612690612679620f42406064613b9b565b6109318b6109098f8961220590919063ffffffff16565b9250600088116126a15760006126bc565b6126bc6126b2620f42406064613b9b565b610931868b612317565b91506126c883836125df565b90505b919b909a509098509650505050505050565b6000806126eb83600a613af3565b9050600086116126fb57806125d5565b6125d58661093161270c8888612205565b8490612317565b60006001831161275d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016102e2565b61067b61276b83600a613af3565b6109318686612317565b6000600183116127bf5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016102e2565b61067b836109316127d185600a613af3565b8790612317565b60006001600160a01b0382166127f157610c6f42612c16565b6000826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282c57600080fd5b505afa158015612840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128649190613811565b90506128738162093a80613a84565b4211156128835761067e42612c16565b61067e81612c16565b60008061289c60208a018a613359565b905060006001600160a01b0382166311547054896128c060408e0160208f01613359565b8a8a8a8a6040518763ffffffff1660e01b81526004016128e5969594939291906138dc565b60206040518083038186803b1580156128fd57600080fd5b505afa158015612911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129359190613375565b90506001600160a01b0381161561294f579150612a159050565b6000826001600160a01b031663c09746308a8d60200160208101906129749190613359565b8b8b8b8b6040518763ffffffff1660e01b8152600401612999969594939291906138dc565b602060405180830381600087803b1580156129b357600080fd5b505af11580156129c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129eb9190613375565b9050612a10818b8a8e6020016020810190612a069190613359565b8f60600135612cac565b925050505b979650505050505050565b6000612a75826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130e19092919063ffffffff16565b8051909150156126275780806020019051810190612a93919061361e565b6126275760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102e2565b801580612b7b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612b4157600080fd5b505afa158015612b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b799190613811565b155b612be65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016102e2565b6040516001600160a01b03831660248201526044810182905261262790849063095ea7b360e01b906064016122ce565b6000806007612c286201518085613a9c565b612c33906004613a84565b612c3d9190613bfd565b905060006007612c4e83600c613bba565b612c589190613bfd565b612c659062015180613b9b565b612c6f9085613a84565b90506000612c806201518083613bfd565b612c8a9083613bba565b612c9690617080613a84565b9050808510610be957610d3e62093a8082613a84565b6001600160a01b038516612cf35760405162461bcd60e51b815260206004820152600e60248201526d216f746f6b656e4164647265737360901b60448201526064016102e2565b8354604080516379e13a5360e11b81529051879260ff161515916001600160a01b0384169163f3c274a691600480820192602092909190829003018186803b158015612d3e57600080fd5b505afa158015612d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d76919061361e565b151514612db55760405162461bcd60e51b815260206004820152600d60248201526c0a8f2e0ca40dad2e6dac2e8c6d609b1b60448201526064016102e2565b600185015460408051631c56369f60e21b815290516001600160a01b0392831692841691637158da7c916004808301926020929190829003018186803b158015612dfe57600080fd5b505afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190613375565b6001600160a01b031614612e845760405162461bcd60e51b815260206004820152601560248201527415dc9bdb99c81d5b99195c9b1e5a5b99d05cdcd95d605a1b60448201526064016102e2565b836001600160a01b0316816001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015612ec757600080fd5b505afa158015612edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eff9190613375565b6001600160a01b031614612f4d5760405162461bcd60e51b815260206004820152601560248201527415dc9bdb99c818dbdb1b185d195c985b105cdcd95d605a1b60448201526064016102e2565b826001600160a01b0316816001600160a01b03166317d69bc86040518163ffffffff1660e01b815260040160206040518083038186803b158015612f9057600080fd5b505afa158015612fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc89190613375565b6001600160a01b0316146130145760405162461bcd60e51b8152602060048201526013602482015272737472696b65417373657420213d205553444360681b60448201526064016102e2565b600061302042846125df565b905080826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561305c57600080fd5b505afa158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190613811565b10156130d85760405162461bcd60e51b8152602060048201526013602482015272457870697279206265666f72652064656c617960681b60448201526064016102e2565b50505050505050565b606061067b848460008585843b61313a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e2565b600080866001600160a01b0316858760405161315691906138c0565b60006040518083038185875af1925050503d8060008114613193576040519150601f19603f3d011682016040523d82523d6000602084013e613198565b606091505b5091509150612a15828286606083156131b257508161067e565b8251156131c25782518084602001fd5b8160405162461bcd60e51b81526004016102e291906139f3565b604080516101008101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b600082601f83011261324d578081fd5b8151602061326261325d83613a60565b613a2f565b80838252828201915082860187848660051b8901011115613281578586fd5b855b858110156132a857815161329681613c53565b84529284019290840190600101613283565b5090979650505050505050565b600082601f8301126132c5578081fd5b815160206132d561325d83613a60565b80838252828201915082860187848660051b89010111156132f4578586fd5b855b858110156132a8578151845292840192908401906001016132f6565b60008083601f840112613323578182fd5b50813567ffffffffffffffff81111561333a578182fd5b60208301915083602082850101111561335257600080fd5b9250929050565b60006020828403121561336a578081fd5b813561067e81613c53565b600060208284031215613386578081fd5b815161067e81613c53565b600080604083850312156133a3578081fd5b82356133ae81613c53565b915060208301356133be81613c53565b809150509250929050565b6000806000606084860312156133dd578081fd5b83356133e881613c53565b925060208401356133f881613c53565b9150604084013561340881613c53565b809150509250925092565b60008060008060808587031215613428578081fd5b843561343381613c53565b9350602085013561344381613c53565b9250604085013561345381613c53565b9396929550929360600135925050565b6000806000806000806000806000806101a08b8d031215613482578788fd5b61348c8b35613c53565b8a35995060208b013561349e81613c53565b985060408b01356134ae81613c53565b975060608b0135965060808b0135955060a08b013567ffffffffffffffff808211156134d8578687fd5b6134e48e838f01613312565b909750955060c08d01359150808211156134fc578485fd5b506135098d828e01613312565b90945092505060c08b8d0360df19011215613522578081fd5b60e08b0190509295989b9194979a5092959850565b60008060006060848603121561354b578081fd5b833561355681613c53565b9250602084013561356681613c53565b929592945050506040919091013590565b6000806000806080858703121561358c578182fd5b843561359781613c53565b935060208501356135a781613c53565b93969395505050506040820135916060013590565b600080604083850312156135ce578182fd5b82356135d981613c53565b946020939093013593505050565b600080600080608085870312156135fc578182fd5b843561360781613c53565b935060208501359250604085013561345381613c53565b60006020828403121561362f578081fd5b8151801515811461067e578182fd5b6000806000838503610160811215613654578182fd5b61012080821215613663578283fd5b9496948701359550505061014085013592915050565b60008082840361010081121561368d578283fd5b8335925060e0601f19820112156136a2578182fd5b506020830190509250929050565b6000602082840312156136c1578081fd5b815167ffffffffffffffff808211156136d8578283fd5b9083019060c082860312156136eb578283fd5b6136f3613a06565b825182811115613701578485fd5b61370d8782860161323d565b825250602083015182811115613721578485fd5b61372d8782860161323d565b602083015250604083015182811115613744578485fd5b6137508782860161323d565b604083015250606083015182811115613767578485fd5b613773878286016132b5565b60608301525060808301518281111561378a578485fd5b613796878286016132b5565b60808301525060a0830151828111156137ad578485fd5b6137b9878286016132b5565b60a08301525095945050505050565b6000602082840312156137d9578081fd5b81356001600160681b038116811461067e578182fd5b600060208284031215613800578081fd5b813561ffff8116811461067e578182fd5b600060208284031215613822578081fd5b5051919050565b6000806040838503121561383b578182fd5b505080516020909101519092909150565b60006020828403121561385d578081fd5b813566ffffffffffffff8116811461067e578182fd5b600060208284031215613884578081fd5b815160ff8116811461067e578182fd5b600081518084526138ac816020860160208601613bd1565b601f01601f19169290920160200192915050565b600082516138d2818460208701613bd1565b9190910192915050565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925290151560a082015260c00190565b60006020808301818452808551808352604092508286019150828160051b870101848801865b838110156139e557603f1989840301855281516101008151600b811061396f57634e487b7160e01b8b52602160045260248bfd5b8552818901516001600160a01b039081168a87015288830151811689870152606080840151909116908601526080808301519086015260a0808301519086015260c0808301519086015260e0918201519185018190526139d181860183613894565b96890196945050509086019060010161393b565b509098975050505050505050565b602081526000610c6c6020830184613894565b60405160c0810167ffffffffffffffff81118282101715613a2957613a29613c3d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a5857613a58613c3d565b604052919050565b600067ffffffffffffffff821115613a7a57613a7a613c3d565b5060051b60200190565b60008219821115613a9757613a97613c11565b500190565b600082613aab57613aab613c27565b500490565b600181815b80851115613aeb578160001904821115613ad157613ad1613c11565b80851615613ade57918102915b93841c9390800290613ab5565b509250929050565b6000610c6c8383600082613b0957506001610c6f565b81613b1657506000610c6f565b8160018114613b2c5760028114613b3657613b52565b6001915050610c6f565b60ff841115613b4757613b47613c11565b50506001821b610c6f565b5060208310610133831016604e8410600b8410161715613b75575081810a610c6f565b613b7f8383613ab0565b8060001904821115613b9357613b93613c11565b029392505050565b6000816000190483118215151615613bb557613bb5613c11565b500290565b600082821015613bcc57613bcc613c11565b500390565b60005b83811015613bec578181015183820152602001613bd4565b838111156123055750506000910152565b600082613c0c57613c0c613c27565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613c6857600080fd5b5056fea26469706673582212201f08d5c080a8bc83a2776285d7f6aeb965c3b2c40263d2d16979705d3103be5964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allocateOptions(address,address,uint256,uint256)": {
        "details": "Skipped if the optionsPurchaseQueue doesn't exist",
        "params": {
          "option": "is the minted option",
          "optionAllocation": "is the maximum % of options to allocate towards the purchase queue (will only allocate  up to the amount that is on the queue)",
          "optionsAmount": "is the amount of options minted",
          "optionsPurchaseQueue": "is the OptionsPurchaseQueue contract"
        },
        "returns": {
          "allocatedOptions": "is the amount of options that ended up getting allocated to the OptionsPurchaseQueue"
        }
      },
      "burnOtokens(address,address)": {
        "params": {
          "currentOption": "is the address of the current option",
          "gammaController": "is the address of the opyn controller contract"
        },
        "returns": {
          "_0": "amount of collateral redeemed by burning otokens"
        }
      },
      "closeRound(Vault.VaultState storage,VaultLifecycleWithSwap.CloseParams)": {
        "params": {
          "params": "is the rollover parameters passed to compute the next state",
          "vaultState": "is the storage variable vaultState passed from RibbonVault"
        },
        "returns": {
          "mintShares": "is the amount of shares to mint from deposits",
          "newLockedAmount": "is the amount of funds to allocate for the new round",
          "newPricePerShare": "is the price per share of the new round",
          "performanceFeeInAsset": "is the performance fee charged by vault",
          "queuedWithdrawAmount": "is the amount of funds set aside for withdrawal",
          "totalVaultFee": "is the total amount of fee charged by vault"
        }
      },
      "commitNextOption(VaultLifecycleWithSwap.CommitParams,Vault.VaultParams storage,Vault.VaultState storage)": {
        "params": {
          "commitParams": "is the struct with details on previous option and strike selection details",
          "vaultParams": "is the struct with vault general data",
          "vaultState": "is the struct with vault accounting state"
        },
        "returns": {
          "delta": "is the delta of the new option",
          "otokenAddress": "is the address of the new option",
          "strikePrice": "is the strike price of the new option"
        }
      },
      "createOffer(address,uint256,address,Vault.VaultParams storage)": {
        "params": {
          "currOtokenPremium": "is premium for each otoken",
          "currentOtoken": "is the current otoken address",
          "swapContract": "the address of the swap contract",
          "vaultParams": "is the struct with vault general data"
        },
        "returns": {
          "optionAuctionID": "auction id of the newly created offer"
        }
      },
      "createShort(address,address,address,uint256)": {
        "params": {
          "depositAmount": "is the amount of collateral to deposit",
          "gammaController": "is the address of the opyn controller contract",
          "marginPool": "is the address of the opyn margin contract which holds the collateral",
          "oTokenAddress": "is the address of the otoken to mint"
        },
        "returns": {
          "_0": "the otoken mint amount"
        }
      },
      "getAuctionSettlementPrice(address,uint256)": {
        "params": {
          "optionAuctionID": "is the offer ID",
          "swapContract": "The address of the swap settlement contract"
        },
        "returns": {
          "_0": "settlementPrice Auction settlement price"
        }
      },
      "sellOptionsToQueue(address,address,uint256)": {
        "details": "Reverts if the auction hasn't settled yet",
        "params": {
          "optionsPurchaseQueue": "is the OptionsPurchaseQueue contract",
          "swapContract": "The address of the swap settlement contract"
        },
        "returns": {
          "_0": "totalPremiums Total premiums earnt by the vault"
        }
      },
      "settleLong(address,address,address)": {
        "params": {
          "asset": "is the address of the vault's asset",
          "gammaController": "is the address of the opyn controller contract",
          "oldOption": "is the address of the old option"
        },
        "returns": {
          "_0": "amount of asset received by exercising the option"
        }
      },
      "settleShort(address)": {
        "params": {
          "gammaController": "is the address of the opyn controller contract"
        },
        "returns": {
          "_0": "amount of collateral redeemed from the vault"
        }
      },
      "verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)": {
        "params": {
          "_vaultParams": "is the struct with vault general data",
          "feeRecipient": "is the address to recieve vault performance and management fees",
          "owner": "is the owner of the vault with critical permissions",
          "performanceFee": "is the perfomance fee pct.",
          "tokenName": "is the name of the token",
          "tokenSymbol": "is the symbol of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocateOptions(address,address,uint256,uint256)": {
        "notice": "Allocates the vault's minted options to the OptionsPurchaseQueue contract"
      },
      "burnOtokens(address,address)": {
        "notice": "Burn the remaining oTokens left over from auction. Currently this implementation is simple. It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time."
      },
      "closeRound(Vault.VaultState storage,VaultLifecycleWithSwap.CloseParams)": {
        "notice": "Calculate the shares to mint, new price per share, and amount of funds to re-allocate as collateral for the new round"
      },
      "commitNextOption(VaultLifecycleWithSwap.CommitParams,Vault.VaultParams storage,Vault.VaultState storage)": {
        "notice": "Sets the next option the vault will be shorting, and calculates its premium for the auction"
      },
      "createOffer(address,uint256,address,Vault.VaultParams storage)": {
        "notice": "Creates an offer in the Swap Contract"
      },
      "createShort(address,address,address,uint256)": {
        "notice": "Creates the actual Opyn short position by depositing collateral and minting otokens"
      },
      "getAuctionSettlementPrice(address,uint256)": {
        "notice": "Gets the settlement price of a settled auction"
      },
      "sellOptionsToQueue(address,address,uint256)": {
        "notice": "Sell the allocated options to the purchase queue post auction settlement"
      },
      "settleLong(address,address,address)": {
        "notice": "Exercises the ITM option using existing long otoken position. Currently this implementation is simple. It calls the `Redeem` action to claim the payout."
      },
      "settleShort(address)": {
        "notice": "Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by calling SettleVault action, this assumption should hold."
      },
      "verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)": {
        "notice": "Verify the constructor params satisfy requirements"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}