{
  "address": "0x2e56d6E444Ab148eC1375Be108313AA759dfd248",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gammaController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marginPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisEasyAuction",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "AuctionDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CloseShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectManagementFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectPerformanceFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "DistributePremium",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auctioningToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionCounter",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "InitiateGnosisAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InstantWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "NewOptionStrikeSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "OpenShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumDiscount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "PremiumDiscountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAMMA_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GNOSIS_EASY_AUCTION",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OTOKEN_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRemainingOTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chargeAndDistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitAndClose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "concludeOptionsSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOtokenPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositorsArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositorsMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numRounds",
          "type": "uint256"
        }
      ],
      "name": "initRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_keeper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_optionsPremiumPricer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_strikeSelection",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_premiumDiscount",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "_auctionDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxDepositors",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minDeposit",
              "type": "uint256"
            }
          ],
          "internalType": "struct VaultLifecycleTreasuryBare.InitParams",
          "name": "_initParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastStrikeOverrideRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOptionReadyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionAuctionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionState",
      "outputs": [
        {
          "internalType": "address",
          "name": "nextOption",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOption",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nextOptionReadyAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionsPremiumPricer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overriddenStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollToNextOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "setAuctionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOtokenPremium",
          "type": "uint256"
        }
      ],
      "name": "setCurrentOtokenPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxDepositors",
          "type": "uint256"
        }
      ],
      "name": "setMaxDepositors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDeposit",
          "type": "uint256"
        }
      ],
      "name": "setMinDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOptionsPremiumPricer",
          "type": "address"
        }
      ],
      "name": "setOptionsPremiumPricer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "setPremiumDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "strikePrice",
          "type": "uint128"
        }
      ],
      "name": "setStrikePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrikeSelection",
          "type": "address"
        }
      ],
      "name": "setStrikeSelection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikeSelection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint56",
          "name": "minimumSupply",
          "type": "uint56"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawInstantly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8470d63bac49dd54b480e2ff48e5cfbd02d0042cf129f7f03c9e6c8217a0c32f",
  "receipt": {
    "to": null,
    "from": "0xF8368119Bb1073Cf01B841848725d81b542A4c19",
    "contractAddress": "0x2e56d6E444Ab148eC1375Be108313AA759dfd248",
    "transactionIndex": 178,
    "gasUsed": "5259290",
    "logsBloom": "0x
    "blockHash": "0xfaafba8eba28ea3372499a2d48df0f3f2e97414f21bd9fe497d61c569d1bf3c2",
    "transactionHash": "0x8470d63bac49dd54b480e2ff48e5cfbd02d0042cf129f7f03c9e6c8217a0c32f",
    "logs": [],
    "blockNumber": 16127607,
    "cumulativeGasUsed": "18470994",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0x4114b7C04bBbA682130cae2bA26FC5d2473B4Ddc",
    "0x4bec71A4Ac41eE9761440F6921DD17bA1C1213B1",
    "0x3c212A044760DE5a529B3Ba59363ddeCcc2210bE",
    "0x0b7fFc1f4AD541A4Ed16b40D8c37f0929158D101"
  ],
  "solcInputHash": "0232c075463a411144edc48198345e9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gammaController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisEasyAuction\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CloseShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"DistributePremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"InitiateGnosisAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InstantWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"NewOptionStrikeSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"OpenShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"PremiumDiscountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMMA_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNOSIS_EASY_AUCTION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTOKEN_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRemainingOTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargeAndDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitAndClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"concludeOptionsSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOtokenPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositorsArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositorsMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numRounds\",\"type\":\"uint256\"}],\"name\":\"initRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strikeSelection\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_premiumDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDepositors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultLifecycleTreasuryBare.InitParams\",\"name\":\"_initParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStrikeOverrideRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOptionReadyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionAuctionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nextOption\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOption\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionReadyAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overriddenStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollToNextOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOtokenPremium\",\"type\":\"uint256\"}],\"name\":\"setCurrentOtokenPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxDepositors\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOptionsPremiumPricer\",\"type\":\"address\"}],\"name\":\"setOptionsPremiumPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"setPremiumDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"}],\"name\":\"setStrikePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrikeSelection\",\"type\":\"address\"}],\"name\":\"setStrikeSelection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikeSelection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_gammaController\":\"is the contract address for opyn actions\",\"_gnosisEasyAuction\":\"is the contract address that facilitates gnosis auctions\",\"_marginPool\":\"is the contract address for providing collateral to opyn\",\"_oTokenFactory\":\"is the contract address for minting new opyn option types (strikes, asset, expiry)\",\"_usdc\":\"is the USDC contract\",\"_weth\":\"is the Wrapped Ether contract\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAuctionDuration(uint256)\":{\"params\":{\"newAuctionDuration\":\"is the auction duration\"}},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setMaxDepositors(uint256)\":{\"params\":{\"newMaxDepositors\":\"is the new cap for number of depositors\"}},\"setMinDeposit(uint256)\":{\"params\":{\"newMinDeposit\":\"is the new minimum amount for deposit\"}},\"setNewKeeper(address)\":{\"params\":{\"newKeeper\":\"is the address of the new keeper\"}},\"setOptionsPremiumPricer(address)\":{\"params\":{\"newOptionsPremiumPricer\":\"is the address of the new strike selection contract\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"setPremiumDiscount(uint256)\":{\"params\":{\"newPremiumDiscount\":\"is the premium discount\"}},\"setStrikePrice(uint128)\":{\"params\":{\"strikePrice\":\"is the strike price of the new oTokens (decimals = 8)\"}},\"setStrikeSelection(address)\":{\"params\":{\"newStrikeSelection\":\"is the address of the new strike selection contract\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawInstantly(uint256)\":{\"params\":{\"amount\":\"is the amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELAY()\":{\"notice\":\"15 minute timelock between commitAndClose and rollToNexOption.\"},\"OTOKEN_FACTORY()\":{\"notice\":\"OTOKEN_FACTORY is the factory contract used to spawn otokens. Used to lookup otokens.\"},\"USDC()\":{\"notice\":\"USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"},\"WETH()\":{\"notice\":\"WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"},\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"auctionDuration()\":{\"notice\":\"Auction duration\"},\"burnRemainingOTokens()\":{\"notice\":\"Burn the remaining oTokens left over from gnosis auction.\"},\"cap()\":{\"notice\":\"Returns the maximum capacity of the vault in terms of the vault's asset\"},\"chargeAndDistribute()\":{\"notice\":\"Charge performance fee and distribute remaining to depositors addresses\"},\"commitAndClose()\":{\"notice\":\"Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious.\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"concludeOptionsSale()\":{\"notice\":\"Settles the round's Gnosis auction and distribute the premiums earned\"},\"constructor\":{\"notice\":\"Initializes the contract with immutable variables\"},\"currentOption()\":{\"notice\":\"Returns the options specification for the current round\"},\"currentOtokenPremium()\":{\"notice\":\"Current oToken premium\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"deposit(uint256)\":{\"notice\":\"Deposits the `asset` from msg.sender.\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"depositorsArray(uint256)\":{\"notice\":\"Array of depositors in the vault\"},\"depositorsMap(address)\":{\"notice\":\"Mapping of depositors in the vault\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,uint256,uint256,uint256),(bool,uint8,address,address,uint56,uint104))\":{\"notice\":\"Initializes the OptionVault contract with storage variables.\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"keeper()\":{\"notice\":\"role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\"},\"lastQueuedWithdrawAmount()\":{\"notice\":\"Amount locked for scheduled withdrawals last week;\"},\"lastStrikeOverrideRound()\":{\"notice\":\"Last round id at which the strike was manually overridden\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\"},\"maxDepositors()\":{\"notice\":\"Maximum number of depositors\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"minDeposit()\":{\"notice\":\"Minimum amount to deposit\"},\"nextOption()\":{\"notice\":\"Returns the options specification for the next round\"},\"nextOptionReadyAt()\":{\"notice\":\"Returns the date and time for the next options sale\"},\"optionAuctionID()\":{\"notice\":\"Auction id of current option\"},\"optionState()\":{\"notice\":\"Vault's state of the options sold and the timelocked option\"},\"optionsPremiumPricer()\":{\"notice\":\"Logic contract used to price options\"},\"overriddenStrikePrice()\":{\"notice\":\"Price last overridden strike set to\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\"},\"period()\":{\"notice\":\"Period between each options sale. Available options 7 (weekly), 14 (biweekly), 30 (monthly), 90 (quarterly), 180 (biannually)\"},\"premiumDiscount()\":{\"notice\":\"Premium discount on options we are selling (thousandths place: 000 - 999)\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"rollToNextOption()\":{\"notice\":\"Rolls the vault's funds into a new short position.\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"setAuctionDuration(uint256)\":{\"notice\":\"Sets the new auction duration\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setMaxDepositors(uint256)\":{\"notice\":\"Set the maximum number of depositors\"},\"setMinDeposit(uint256)\":{\"notice\":\"Set the minimum deposit amount\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"},\"setOptionsPremiumPricer(address)\":{\"notice\":\"Sets the new options premium pricer contract\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"setPremiumDiscount(uint256)\":{\"notice\":\"Sets the new discount on premiums for options we are selling\"},\"setStrikePrice(uint128)\":{\"notice\":\"Optionality to set strike price manually\"},\"setStrikeSelection(address)\":{\"notice\":\"Sets the new strike selection contract\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"startAuction()\":{\"notice\":\"Initiate the gnosis auction.\"},\"strikeSelection()\":{\"notice\":\"Logic contract used to select strike prices\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts locked into a short position\"},\"totalPending()\":{\"notice\":\"Returns total pending deposit for the current round\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawInstantly(uint256)\":{\"notice\":\"Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol\":\"RibbonTreasuryVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nlibrary GammaTypes {\\r\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\r\\n    struct Vault {\\r\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\r\\n        address[] shortOtokens;\\r\\n        // addresses of oTokens a user has bought and deposited in this vault\\r\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\r\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\r\\n        // in order to write oTokens against (i.e. in spreads)\\r\\n        address[] longOtokens;\\r\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\r\\n        address[] collateralAssets;\\r\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\r\\n        uint256[] shortAmounts;\\r\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\r\\n        uint256[] longAmounts;\\r\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\r\\n        uint256[] collateralAmounts;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IOtoken {\\r\\n    function underlyingAsset() external view returns (address);\\r\\n\\r\\n    function strikeAsset() external view returns (address);\\r\\n\\r\\n    function collateralAsset() external view returns (address);\\r\\n\\r\\n    function strikePrice() external view returns (uint256);\\r\\n\\r\\n    function expiryTimestamp() external view returns (uint256);\\r\\n\\r\\n    function isPut() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IOtokenFactory {\\r\\n    function getOtoken(\\r\\n        address _underlyingAsset,\\r\\n        address _strikeAsset,\\r\\n        address _collateralAsset,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _expiry,\\r\\n        bool _isPut\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function createOtoken(\\r\\n        address _underlyingAsset,\\r\\n        address _strikeAsset,\\r\\n        address _collateralAsset,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _expiry,\\r\\n        bool _isPut\\r\\n    ) external returns (address);\\r\\n\\r\\n    function getTargetOtokenAddress(\\r\\n        address _underlyingAsset,\\r\\n        address _strikeAsset,\\r\\n        address _collateralAsset,\\r\\n        uint256 _strikePrice,\\r\\n        uint256 _expiry,\\r\\n        bool _isPut\\r\\n    ) external view returns (address);\\r\\n\\r\\n    event OtokenCreated(\\r\\n        address tokenAddress,\\r\\n        address creator,\\r\\n        address indexed underlying,\\r\\n        address indexed strike,\\r\\n        address indexed collateral,\\r\\n        uint256 strikePrice,\\r\\n        uint256 expiry,\\r\\n        bool isPut\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IController {\\r\\n    // possible actions that can be performed\\r\\n    enum ActionType {\\r\\n        OpenVault,\\r\\n        MintShortOption,\\r\\n        BurnShortOption,\\r\\n        DepositLongOption,\\r\\n        WithdrawLongOption,\\r\\n        DepositCollateral,\\r\\n        WithdrawCollateral,\\r\\n        SettleVault,\\r\\n        Redeem,\\r\\n        Call,\\r\\n        Liquidate\\r\\n    }\\r\\n\\r\\n    struct ActionArgs {\\r\\n        // type of action that is being performed on the system\\r\\n        ActionType actionType;\\r\\n        // address of the account owner\\r\\n        address owner;\\r\\n        // address which we move assets from or to (depending on the action type)\\r\\n        address secondAddress;\\r\\n        // asset that is to be transfered\\r\\n        address asset;\\r\\n        // index of the vault that is to be modified (if any)\\r\\n        uint256 vaultId;\\r\\n        // amount of asset that is to be transfered\\r\\n        uint256 amount;\\r\\n        // each vault can hold multiple short / long / collateral assets\\r\\n        // but we are restricting the scope to only 1 of each in this version\\r\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\r\\n        uint256 index;\\r\\n        // any other data that needs to be passed in for arbitrary function calls\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct RedeemArgs {\\r\\n        // address to which we pay out the oToken proceeds\\r\\n        address receiver;\\r\\n        // oToken that is to be redeemed\\r\\n        address otoken;\\r\\n        // amount of oTokens that is to be redeemed\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    function getPayout(address _otoken, uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function operate(ActionArgs[] calldata _actions) external;\\r\\n\\r\\n    function getAccountVaultCounter(address owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function oracle() external view returns (address);\\r\\n\\r\\n    function getVault(address _owner, uint256 _vaultId)\\r\\n        external\\r\\n        view\\r\\n        returns (GammaTypes.Vault memory);\\r\\n\\r\\n    function getProceed(address _owner, uint256 _vaultId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function isSettlementAllowed(\\r\\n        address _underlying,\\r\\n        address _strike,\\r\\n        address _collateral,\\r\\n        uint256 _expiry\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IOracle {\\r\\n    function setAssetPricer(address _asset, address _pricer) external;\\r\\n\\r\\n    function updateAssetPricer(address _asset, address _pricer) external;\\r\\n\\r\\n    function getPrice(address _asset) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xcefc766d0236f89d8dd8ab57ab91ece8bbef6c66f7d23cd4c0d0867e0225b1ea\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Detailed is IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string calldata);\\r\\n\\r\\n    function name() external view returns (string calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0xc64d7cba07bc7af4d625ee025b32e8af4b93e2b19093dc009114165cfa30862f\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary AuctionType {\\r\\n    struct AuctionData {\\r\\n        IERC20 auctioningToken;\\r\\n        IERC20 biddingToken;\\r\\n        uint256 orderCancellationEndDate;\\r\\n        uint256 auctionEndDate;\\r\\n        bytes32 initialAuctionOrder;\\r\\n        uint256 minimumBiddingAmountPerOrder;\\r\\n        uint256 interimSumBidAmount;\\r\\n        bytes32 interimOrder;\\r\\n        bytes32 clearingPriceOrder;\\r\\n        uint96 volumeClearingPriceOrder;\\r\\n        bool minFundingThresholdNotReached;\\r\\n        bool isAtomicClosureAllowed;\\r\\n        uint256 feeNumerator;\\r\\n        uint256 minFundingThreshold;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IGnosisAuction {\\r\\n    function initiateAuction(\\r\\n        address _auctioningToken,\\r\\n        address _biddingToken,\\r\\n        uint256 orderCancellationEndDate,\\r\\n        uint256 auctionEndDate,\\r\\n        uint96 _auctionedSellAmount,\\r\\n        uint96 _minBuyAmount,\\r\\n        uint256 minimumBiddingAmountPerOrder,\\r\\n        uint256 minFundingThreshold,\\r\\n        bool isAtomicClosureAllowed,\\r\\n        address accessManagerContract,\\r\\n        bytes memory accessManagerContractData\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function auctionCounter() external view returns (uint256);\\r\\n\\r\\n    function auctionData(uint256 auctionId)\\r\\n        external\\r\\n        view\\r\\n        returns (AuctionType.AuctionData memory);\\r\\n\\r\\n    function auctionAccessManager(uint256 auctionId)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function auctionAccessData(uint256 auctionId)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes memory);\\r\\n\\r\\n    function FEE_DENOMINATOR() external view returns (uint256);\\r\\n\\r\\n    function feeNumerator() external view returns (uint256);\\r\\n\\r\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\r\\n\\r\\n    function placeSellOrders(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        uint96[] memory _sellAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData\\r\\n    ) external returns (uint64);\\r\\n\\r\\n    function claimFromParticipantOrder(\\r\\n        uint256 auctionId,\\r\\n        bytes32[] memory orders\\r\\n    ) external returns (uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x62b2335e5e2410ce98120b2120246df2d78309b865bf82846c866e51f96ebf29\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\r\\n\\r\\ninterface IRibbonVault {\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositETH() external payable;\\r\\n\\r\\n    function cap() external view returns (uint256);\\r\\n\\r\\n    function depositFor(uint256 amount, address creditor) external;\\r\\n\\r\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\r\\n}\\r\\n\\r\\ninterface IStrikeSelection {\\r\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function delta() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IOptionsPremiumPricer {\\r\\n    function getPremium(\\r\\n        uint256 strikePrice,\\r\\n        uint256 timeToExpiry,\\r\\n        bool isPut\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getPremiumInStables(\\r\\n        uint256 strikePrice,\\r\\n        uint256 timeToExpiry,\\r\\n        bool isPut\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getOptionDelta(\\r\\n        uint256 spotPrice,\\r\\n        uint256 strikePrice,\\r\\n        uint256 volatility,\\r\\n        uint256 expiryTimestamp\\r\\n    ) external view returns (uint256 delta);\\r\\n\\r\\n    function getUnderlyingPrice() external view returns (uint256);\\r\\n\\r\\n    function priceOracle() external view returns (address);\\r\\n\\r\\n    function volatilityOracle() external view returns (address);\\r\\n\\r\\n    function optionId() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x39a7efb4c060290b5a8c0831de03c543f4a79a63e2a8d835696a82369abbe985\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\r\\n\\r\\ninterface IRibbonThetaVault {\\r\\n    function currentOption() external view returns (address);\\r\\n\\r\\n    function nextOption() external view returns (address);\\r\\n\\r\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\r\\n\\r\\n    function vaultState() external view returns (Vault.VaultState memory);\\r\\n\\r\\n    function optionState() external view returns (Vault.OptionState memory);\\r\\n\\r\\n    function optionAuctionID() external view returns (uint256);\\r\\n\\r\\n    function pricePerShare() external view returns (uint256);\\r\\n\\r\\n    function roundPricePerShare(uint256) external view returns (uint256);\\r\\n\\r\\n    function depositFor(uint256 amount, address creditor) external;\\r\\n\\r\\n    function initiateWithdraw(uint256 numShares) external;\\r\\n\\r\\n    function completeWithdraw() external;\\r\\n\\r\\n    function maxRedeem() external;\\r\\n\\r\\n    function depositYieldTokenFor(uint256 amount, address creditor) external;\\r\\n\\r\\n    function symbol() external view returns (string calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x770a1b5a914a593116a087f3bb711371da1b1121695c5ae05eae443d7a5c685c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decimals() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa949a6fcd7fa4cbd942f7bce2b719069760cc65950576059e4bbcf3a38c17b3b\",\"license\":\"MIT\"},\"contracts/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Source: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\r\\n// ----------------------------------------------------------------------------\\r\\n// BokkyPooBah's DateTime Library v1.01\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nlibrary DateTime {\\r\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\r\\n    int256 constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint256 constant DOW_MON = 1;\\r\\n    uint256 constant DOW_TUE = 2;\\r\\n    uint256 constant DOW_WED = 3;\\r\\n    uint256 constant DOW_THU = 4;\\r\\n    uint256 constant DOW_FRI = 5;\\r\\n    uint256 constant DOW_SAT = 6;\\r\\n    uint256 constant DOW_SUN = 7;\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // days = day\\r\\n    //      - 32075\\r\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\r\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\r\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\r\\n    //      - offset\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysFromDate(\\r\\n        uint256 year,\\r\\n        uint256 month,\\r\\n        uint256 day\\r\\n    ) internal pure returns (uint256 _days) {\\r\\n        require(year >= 1970);\\r\\n        int256 _year = int256(year);\\r\\n        int256 _month = int256(month);\\r\\n        int256 _day = int256(day);\\r\\n\\r\\n        int256 __days =\\r\\n            _day -\\r\\n                32075 +\\r\\n                (1461 * (_year + 4800 + (_month - 14) / 12)) /\\r\\n                4 +\\r\\n                (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\r\\n                12 -\\r\\n                (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\r\\n                4 -\\r\\n                OFFSET19700101;\\r\\n\\r\\n        _days = uint256(__days);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // int L = days + 68569 + offset\\r\\n    // int N = 4 * L / 146097\\r\\n    // L = L - (146097 * N + 3) / 4\\r\\n    // year = 4000 * (L + 1) / 1461001\\r\\n    // L = L - 1461 * year / 4 + 31\\r\\n    // month = 80 * L / 2447\\r\\n    // dd = L - 2447 * month / 80\\r\\n    // L = month / 11\\r\\n    // month = month + 2 - 12 * L\\r\\n    // year = 100 * (N - 49) + year + L\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysToDate(uint256 _days)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 year,\\r\\n            uint256 month,\\r\\n            uint256 day\\r\\n        )\\r\\n    {\\r\\n        int256 __days = int256(_days);\\r\\n\\r\\n        int256 L = __days + 68569 + OFFSET19700101;\\r\\n        int256 N = (4 * L) / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\r\\n        L = L - (1461 * _year) / 4 + 31;\\r\\n        int256 _month = (80 * L) / 2447;\\r\\n        int256 _day = L - (2447 * _month) / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint256(_year);\\r\\n        month = uint256(_month);\\r\\n        day = uint256(_day);\\r\\n    }\\r\\n\\r\\n    function isLeapYear(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool leapYear)\\r\\n    {\\r\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        leapYear = _isLeapYear(year);\\r\\n    }\\r\\n\\r\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n\\r\\n    function getDaysInMonth(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 daysInMonth)\\r\\n    {\\r\\n        (uint256 year, uint256 month, ) =\\r\\n            _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        daysInMonth = _getDaysInMonth(year, month);\\r\\n    }\\r\\n\\r\\n    function _getDaysInMonth(uint256 year, uint256 month)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 daysInMonth)\\r\\n    {\\r\\n        if (\\r\\n            month == 1 ||\\r\\n            month == 3 ||\\r\\n            month == 5 ||\\r\\n            month == 7 ||\\r\\n            month == 8 ||\\r\\n            month == 10 ||\\r\\n            month == 12\\r\\n        ) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // 1 = Monday, 7 = Sunday\\r\\n    function getDayOfWeek(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 dayOfWeek)\\r\\n    {\\r\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\r\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\r\\n    }\\r\\n\\r\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\r\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\r\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\r\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function timestampFromDate(\\r\\n        uint256 year,\\r\\n        uint256 month,\\r\\n        uint256 day\\r\\n    ) internal pure returns (uint256 timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the Friday of the same week\\r\\n     * @param timestamp is the given date and time\\r\\n     * @return the Friday of the same week in unix time\\r\\n     */\\r\\n    function getThisWeekFriday(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return timestamp + 5 days - getDayOfWeek(timestamp) * 1 days;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the next friday after the given date and time\\r\\n     * @param timestamp is the given date and time\\r\\n     * @return the next friday after the given date and time\\r\\n     */\\r\\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\\r\\n        uint256 friday = getThisWeekFriday(timestamp);\\r\\n        return friday >= timestamp ? friday : friday + 1 weeks;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the last day of the month\\r\\n     * @param timestamp is the given date and time\\r\\n     * @return the last day of the same month in unix time\\r\\n     */\\r\\n    function getLastDayOfMonth(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            timestampFromDate(getYear(timestamp), getMonth(timestamp) + 1, 1) -\\r\\n            1 days;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the last Friday of the month\\r\\n     * @param timestamp is the given date and time\\r\\n     * @return the last Friday of the same month in unix time\\r\\n     */\\r\\n    function getMonthLastFriday(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 lastDay = getLastDayOfMonth(timestamp);\\r\\n        uint256 friday = getThisWeekFriday(lastDay);\\r\\n\\r\\n        return friday > lastDay ? friday - 1 weeks : friday;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the last Friday of the quarter\\r\\n     * @param timestamp is the given date and time\\r\\n     * @return the last Friday of the quarter in unix time\\r\\n     */\\r\\n    function getQuarterLastFriday(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 month = getMonth(timestamp);\\r\\n        uint256 quarterMonth =\\r\\n            (month <= 3) ? 3 : (month <= 6) ? 6 : (month <= 9) ? 9 : 12;\\r\\n\\r\\n        uint256 quarterDate =\\r\\n            timestampFromDate(getYear(timestamp), quarterMonth, 1);\\r\\n\\r\\n        return getMonthLastFriday(quarterDate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the last Friday of the half-year\\r\\n     * @param timestamp is the given date and time\\r\\n     * @return the last friday of the half-year\\r\\n     */\\r\\n    function getBiannualLastFriday(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 month = getMonth(timestamp);\\r\\n        uint256 biannualMonth = (month <= 6) ? 6 : 12;\\r\\n\\r\\n        uint256 biannualDate =\\r\\n            timestampFromDate(getYear(timestamp), biannualMonth, 1);\\r\\n\\r\\n        return getMonthLastFriday(biannualDate);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7839c35c4e82f7c39a73aff0b450915cf79c18698da924474d9cb2b2d1287a12\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {\\r\\n    SafeERC20\\r\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\r\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\r\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\r\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\r\\nimport {Vault} from \\\"./Vault.sol\\\";\\r\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\r\\n\\r\\nlibrary GnosisAuction {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event InitiateGnosisAuction(\\r\\n        address indexed auctioningToken,\\r\\n        address indexed biddingToken,\\r\\n        uint256 auctionCounter,\\r\\n        address indexed manager\\r\\n    );\\r\\n\\r\\n    event PlaceAuctionBid(\\r\\n        uint256 auctionId,\\r\\n        address indexed auctioningToken,\\r\\n        uint256 sellAmount,\\r\\n        uint256 buyAmount,\\r\\n        address indexed bidder\\r\\n    );\\r\\n\\r\\n    struct AuctionDetails {\\r\\n        address oTokenAddress;\\r\\n        address gnosisEasyAuction;\\r\\n        address asset;\\r\\n        uint256 assetDecimals;\\r\\n        uint256 oTokenPremium;\\r\\n        uint256 duration;\\r\\n    }\\r\\n\\r\\n    struct BidDetails {\\r\\n        address oTokenAddress;\\r\\n        address gnosisEasyAuction;\\r\\n        address asset;\\r\\n        uint256 assetDecimals;\\r\\n        uint256 auctionId;\\r\\n        uint256 lockedBalance;\\r\\n        uint256 optionAllocation;\\r\\n        uint256 optionPremium;\\r\\n        address bidder;\\r\\n    }\\r\\n\\r\\n    function startAuction(AuctionDetails calldata auctionDetails)\\r\\n        internal\\r\\n        returns (uint256 auctionID)\\r\\n    {\\r\\n        uint256 oTokenSellAmount =\\r\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\r\\n        require(oTokenSellAmount > 0, \\\"No otokens to sell\\\");\\r\\n\\r\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\r\\n            auctionDetails.gnosisEasyAuction,\\r\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\r\\n        );\\r\\n\\r\\n        // minBidAmount is total oTokens to sell * premium per oToken\\r\\n        // shift decimals to correspond to decimals of USDC for puts\\r\\n        // and underlying for calls\\r\\n        uint256 minBidAmount =\\r\\n            DSMath.wmul(\\r\\n                oTokenSellAmount.mul(10**10),\\r\\n                auctionDetails.oTokenPremium\\r\\n            );\\r\\n\\r\\n        minBidAmount = auctionDetails.assetDecimals > 18\\r\\n            ? minBidAmount.mul(10**(auctionDetails.assetDecimals.sub(18)))\\r\\n            : minBidAmount.div(\\r\\n                10**(uint256(18).sub(auctionDetails.assetDecimals))\\r\\n            );\\r\\n\\r\\n        require(\\r\\n            minBidAmount <= type(uint96).max,\\r\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\r\\n        );\\r\\n\\r\\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\\r\\n\\r\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\r\\n            .initiateAuction(\\r\\n            // address of oToken we minted and are selling\\r\\n            auctionDetails.oTokenAddress,\\r\\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\\r\\n            auctionDetails.asset,\\r\\n            // orders can be cancelled at any time during the auction\\r\\n            auctionEnd,\\r\\n            // order will last for `duration`\\r\\n            auctionEnd,\\r\\n            // we are selling all of the otokens minus a fee taken by gnosis\\r\\n            uint96(oTokenSellAmount),\\r\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\r\\n            uint96(minBidAmount),\\r\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\r\\n            1,\\r\\n            // the min funding threshold\\r\\n            0,\\r\\n            // no atomic closure\\r\\n            false,\\r\\n            // access manager contract\\r\\n            address(0),\\r\\n            // bytes for storing info like a whitelist for who can bid\\r\\n            bytes(\\\"\\\")\\r\\n        );\\r\\n\\r\\n        emit InitiateGnosisAuction(\\r\\n            auctionDetails.oTokenAddress,\\r\\n            auctionDetails.asset,\\r\\n            auctionID,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function placeBid(BidDetails calldata bidDetails)\\r\\n        internal\\r\\n        returns (\\r\\n            uint256 sellAmount,\\r\\n            uint256 buyAmount,\\r\\n            uint64 userId\\r\\n        )\\r\\n    {\\r\\n        // calculate how much to allocate\\r\\n        sellAmount = bidDetails\\r\\n            .lockedBalance\\r\\n            .mul(bidDetails.optionAllocation)\\r\\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\r\\n\\r\\n        // divide the `asset` sellAmount by the target premium per oToken to\\r\\n        // get the number of oTokens to buy (8 decimals)\\r\\n        buyAmount = sellAmount\\r\\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\\r\\n            .div(bidDetails.optionPremium)\\r\\n            .div(10**bidDetails.assetDecimals);\\r\\n\\r\\n        require(\\r\\n            sellAmount <= type(uint96).max,\\r\\n            \\\"sellAmount > type(uint96) max value!\\\"\\r\\n        );\\r\\n        require(\\r\\n            buyAmount <= type(uint96).max,\\r\\n            \\\"buyAmount > type(uint96) max value!\\\"\\r\\n        );\\r\\n\\r\\n        // approve that amount\\r\\n        IERC20(bidDetails.asset).safeApprove(\\r\\n            bidDetails.gnosisEasyAuction,\\r\\n            sellAmount\\r\\n        );\\r\\n\\r\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\r\\n        uint96[] memory _sellAmounts = new uint96[](1);\\r\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\r\\n        _minBuyAmounts[0] = uint96(buyAmount);\\r\\n        _sellAmounts[0] = uint96(sellAmount);\\r\\n        _prevSellOrders[\\r\\n            0\\r\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\r\\n\\r\\n        // place sell order with that amount\\r\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\r\\n            bidDetails.auctionId,\\r\\n            _minBuyAmounts,\\r\\n            _sellAmounts,\\r\\n            _prevSellOrders,\\r\\n            \\\"0x\\\"\\r\\n        );\\r\\n\\r\\n        emit PlaceAuctionBid(\\r\\n            bidDetails.auctionId,\\r\\n            bidDetails.oTokenAddress,\\r\\n            sellAmount,\\r\\n            buyAmount,\\r\\n            bidDetails.bidder\\r\\n        );\\r\\n\\r\\n        return (sellAmount, buyAmount, userId);\\r\\n    }\\r\\n\\r\\n    function claimAuctionOtokens(\\r\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\r\\n        address gnosisEasyAuction,\\r\\n        address counterpartyThetaVault\\r\\n    ) internal {\\r\\n        bytes32 order =\\r\\n            encodeOrder(\\r\\n                auctionSellOrder.userId,\\r\\n                auctionSellOrder.buyAmount,\\r\\n                auctionSellOrder.sellAmount\\r\\n            );\\r\\n        bytes32[] memory orders = new bytes32[](1);\\r\\n        orders[0] = order;\\r\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\r\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\r\\n            orders\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getOTokenSellAmount(address oTokenAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // We take our current oToken balance. That will be our sell amount\\r\\n        // but otokens will be transferred to gnosis.\\r\\n        uint256 oTokenSellAmount =\\r\\n            IERC20(oTokenAddress).balanceOf(address(this));\\r\\n\\r\\n        require(\\r\\n            oTokenSellAmount <= type(uint96).max,\\r\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\r\\n        );\\r\\n\\r\\n        return oTokenSellAmount;\\r\\n    }\\r\\n\\r\\n    function getOTokenPremiumInStables(\\r\\n        address oTokenAddress,\\r\\n        address optionsPremiumPricer,\\r\\n        uint256 premiumDiscount\\r\\n    ) internal view returns (uint256) {\\r\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\r\\n        IOptionsPremiumPricer premiumPricer =\\r\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\r\\n\\r\\n        // Apply black-scholes formula (from rvol library) to option given its features\\r\\n        // and get price for 100 contracts denominated USDC for both call and put options\\r\\n        uint256 optionPremium =\\r\\n            premiumPricer.getPremiumInStables(\\r\\n                newOToken.strikePrice(),\\r\\n                newOToken.expiryTimestamp(),\\r\\n                newOToken.isPut()\\r\\n            );\\r\\n\\r\\n        // Apply a discount to incentivize arbitraguers\\r\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\r\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            optionPremium <= type(uint96).max,\\r\\n            \\\"optionPremium > type(uint96) max value!\\\"\\r\\n        );\\r\\n\\r\\n        return optionPremium;\\r\\n    }\\r\\n\\r\\n    function encodeOrder(\\r\\n        uint64 userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            bytes32(\\r\\n                (uint256(userId) << 192) +\\r\\n                    (uint256(buyAmount) << 96) +\\r\\n                    uint256(sellAmount)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e5b460d1ef3566344a8d2401eb54233cf9555c2306735628d921646496f006e\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {Vault} from \\\"./Vault.sol\\\";\\r\\n\\r\\nlibrary ShareMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\r\\n\\r\\n    function assetToShares(\\r\\n        uint256 assetAmount,\\r\\n        uint256 assetPerShare,\\r\\n        uint256 decimals\\r\\n    ) internal pure returns (uint256) {\\r\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\r\\n        // which should never happen.\\r\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\r\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\r\\n\\r\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\r\\n    }\\r\\n\\r\\n    function sharesToAsset(\\r\\n        uint256 shares,\\r\\n        uint256 assetPerShare,\\r\\n        uint256 decimals\\r\\n    ) internal pure returns (uint256) {\\r\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\r\\n        // which should never happen.\\r\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\r\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\r\\n\\r\\n        return shares.mul(assetPerShare).div(10**decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\r\\n     * @param depositReceipt is the user's deposit receipt\\r\\n     * @param currentRound is the `round` stored on the vault\\r\\n     * @param assetPerShare is the price in asset per share\\r\\n     * @param decimals is the number of decimals the asset/shares use\\r\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\r\\n     */\\r\\n    function getSharesFromReceipt(\\r\\n        Vault.DepositReceipt memory depositReceipt,\\r\\n        uint256 currentRound,\\r\\n        uint256 assetPerShare,\\r\\n        uint256 decimals\\r\\n    ) internal pure returns (uint256 unredeemedShares) {\\r\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\r\\n            uint256 sharesFromRound =\\r\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\r\\n\\r\\n            return\\r\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\r\\n        }\\r\\n        return depositReceipt.unredeemedShares;\\r\\n    }\\r\\n\\r\\n    function pricePerShare(\\r\\n        uint256 totalSupply,\\r\\n        uint256 totalBalance,\\r\\n        uint256 pendingAmount,\\r\\n        uint256 decimals\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 singleShare = 10**decimals;\\r\\n        return\\r\\n            totalSupply > 0\\r\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\r\\n                    totalSupply\\r\\n                )\\r\\n                : singleShare;\\r\\n    }\\r\\n\\r\\n    /************************************************\\r\\n     *  HELPERS\\r\\n     ***********************************************/\\r\\n\\r\\n    function assertUint104(uint256 num) internal pure {\\r\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\r\\n    }\\r\\n\\r\\n    function assertUint128(uint256 num) internal pure {\\r\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c7b4b506d89549589bd6aa5f59dfe4d21064d9518cdaf9b3e8af07845274dcb\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {\\r\\n    SafeERC20\\r\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * This library supports ERC20s that have quirks in their behavior.\\r\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\r\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\r\\n */\\r\\nlibrary SupportsNonCompliantERC20 {\\r\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\r\\n\\r\\n    function safeApproveNonCompliant(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (address(token) == USDT) {\\r\\n            SafeERC20.safeApprove(token, spender, 0);\\r\\n        }\\r\\n        SafeERC20.safeApprove(token, spender, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xba3df9681eda4b2be8cf3e8c036d87d9456d5ee77a94853acea358c53913779e\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nlibrary Vault {\\r\\n    /************************************************\\r\\n     *  IMMUTABLES & CONSTANTS\\r\\n     ***********************************************/\\r\\n\\r\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\r\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\r\\n\\r\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\r\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\r\\n\\r\\n    // Otokens have 8 decimal places.\\r\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\r\\n\\r\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\r\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\r\\n\\r\\n    // Placeholder uint value to prevent cold writes\\r\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\r\\n\\r\\n    struct VaultParams {\\r\\n        // Option type the vault is selling\\r\\n        bool isPut;\\r\\n        // Token decimals for vault shares\\r\\n        uint8 decimals;\\r\\n        // Asset used in Theta / Delta Vault\\r\\n        address asset;\\r\\n        // Underlying asset of the options sold by vault\\r\\n        address underlying;\\r\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\r\\n        uint56 minimumSupply;\\r\\n        // Vault cap\\r\\n        uint104 cap;\\r\\n    }\\r\\n\\r\\n    struct OptionState {\\r\\n        // Option that the vault is shorting / longing in the next cycle\\r\\n        address nextOption;\\r\\n        // Option that the vault is currently shorting / longing\\r\\n        address currentOption;\\r\\n        // The timestamp when the `nextOption` can be used by the vault\\r\\n        uint32 nextOptionReadyAt;\\r\\n    }\\r\\n\\r\\n    struct VaultState {\\r\\n        // 32 byte slot 1\\r\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\r\\n        uint16 round;\\r\\n        // Amount that is currently locked for selling options\\r\\n        uint104 lockedAmount;\\r\\n        // Amount that was locked for selling options in the previous round\\r\\n        // used for calculating performance fee deduction\\r\\n        uint104 lastLockedAmount;\\r\\n        // 32 byte slot 2\\r\\n        // Stores the total tally of how much of `asset` there is\\r\\n        // to be used to mint rTHETA tokens\\r\\n        uint128 totalPending;\\r\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\r\\n        uint128 queuedWithdrawShares;\\r\\n    }\\r\\n\\r\\n    struct DepositReceipt {\\r\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\r\\n        uint16 round;\\r\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\r\\n        uint104 amount;\\r\\n        // Unredeemed shares balance\\r\\n        uint128 unredeemedShares;\\r\\n    }\\r\\n\\r\\n    struct Withdrawal {\\r\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\r\\n        uint16 round;\\r\\n        // Number of shares withdrawn\\r\\n        uint128 shares;\\r\\n    }\\r\\n\\r\\n    struct AuctionSellOrder {\\r\\n        // Amount of `asset` token offered in auction\\r\\n        uint96 sellAmount;\\r\\n        // Amount of oToken requested in auction\\r\\n        uint96 buyAmount;\\r\\n        // User Id of delta vault in latest gnosis auction\\r\\n        uint64 userId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9a2b83f3c58a39446bbc2115cfd529e1ed9b83739cdea3e94098a3a01affb557\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycleTreasuryBare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Vault} from \\\"./Vault.sol\\\";\\r\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\r\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\r\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\r\\nimport {DateTime} from \\\"./DateTime.sol\\\";\\r\\nimport {\\r\\n    IOtokenFactory,\\r\\n    IOtoken,\\r\\n    IController,\\r\\n    GammaTypes\\r\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\r\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\r\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\r\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\r\\n\\r\\nlibrary VaultLifecycleTreasuryBare {\\r\\n    using SafeMath for uint256;\\r\\n    using SupportsNonCompliantERC20 for IERC20;\\r\\n\\r\\n    struct CloseParams {\\r\\n        address OTOKEN_FACTORY;\\r\\n        address USDC;\\r\\n        address currentOption;\\r\\n        uint256 delay;\\r\\n        uint16 lastStrikeOverrideRound;\\r\\n        uint256 overriddenStrikePrice;\\r\\n        uint256 period;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialization parameters for the vault.\\r\\n     * @param _owner is the owner of the vault with critical permissions\\r\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\r\\n     * @param _managementFee is the management fee pct.\\r\\n     * @param _performanceFee is the perfomance fee pct.\\r\\n     * @param _tokenName is the name of the token\\r\\n     * @param _tokenSymbol is the symbol of the token\\r\\n     * @param _optionsPremiumPricer is the address of the contract with the\\r\\n       black-scholes premium calculation logic\\r\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\r\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\r\\n     * @param _auctionDuration is the duration of the gnosis auction\\r\\n     * @param _period is the period between each option sales\\r\\n     */\\r\\n    struct InitParams {\\r\\n        address _owner;\\r\\n        address _keeper;\\r\\n        address _feeRecipient;\\r\\n        uint256 _managementFee;\\r\\n        uint256 _performanceFee;\\r\\n        string _tokenName;\\r\\n        string _tokenSymbol;\\r\\n        address _optionsPremiumPricer;\\r\\n        address _strikeSelection;\\r\\n        uint32 _premiumDiscount;\\r\\n        uint256 _auctionDuration;\\r\\n        uint256 _period;\\r\\n        uint256 _maxDepositors;\\r\\n        uint256 _minDeposit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\r\\n     * @param strikeSelection is the address of the contract with strike selection logic\\r\\n     * @param optionsPremiumPricer is the address of the contract with the\\r\\n       black-scholes premium calculation logic\\r\\n     * @param premiumDiscount is the vault's discount applied to the premium\\r\\n     * @param closeParams is the struct with details on previous option and strike selection details\\r\\n     * @param vaultParams is the struct with vault general data\\r\\n     * @param vaultState is the struct with vault accounting state\\r\\n     * @return otokenAddress is the address of the new option\\r\\n     * @return premium is the premium of the new option\\r\\n     * @return strikePrice is the strike price of the new option\\r\\n     * @return delta is the delta of the new option\\r\\n     */\\r\\n    function commitAndClose(\\r\\n        address strikeSelection,\\r\\n        address optionsPremiumPricer,\\r\\n        uint256 premiumDiscount,\\r\\n        CloseParams calldata closeParams,\\r\\n        Vault.VaultParams storage vaultParams,\\r\\n        Vault.VaultState storage vaultState\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            address otokenAddress,\\r\\n            uint256 premium,\\r\\n            uint256 strikePrice,\\r\\n            uint256 delta\\r\\n        )\\r\\n    {\\r\\n        uint256 expiry;\\r\\n\\r\\n        // uninitialized state\\r\\n        if (closeParams.currentOption == address(0)) {\\r\\n            expiry = getNextExpiry(block.timestamp, closeParams.period);\\r\\n        } else {\\r\\n            expiry = getNextExpiry(\\r\\n                IOtoken(closeParams.currentOption).expiryTimestamp(),\\r\\n                closeParams.period\\r\\n            );\\r\\n        }\\r\\n\\r\\n        bool isPut = vaultParams.isPut;\\r\\n        address underlying = vaultParams.underlying;\\r\\n        address asset = vaultParams.asset;\\r\\n\\r\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\r\\n            vaultState.round\\r\\n            ? (closeParams.overriddenStrikePrice, 0)\\r\\n            : IStrikeSelection(strikeSelection).getStrikePrice(expiry, isPut);\\r\\n\\r\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\r\\n\\r\\n        // retrieve address if option already exists, or deploy it\\r\\n        otokenAddress = getOrDeployOtoken(\\r\\n            closeParams,\\r\\n            vaultParams,\\r\\n            underlying,\\r\\n            asset,\\r\\n            strikePrice,\\r\\n            expiry,\\r\\n            isPut\\r\\n        );\\r\\n\\r\\n        // get the black scholes premium of the option\\r\\n        premium = optionsPremiumPricer == address(1)\\r\\n            ? 1\\r\\n            : GnosisAuction.getOTokenPremiumInStables(\\r\\n                otokenAddress,\\r\\n                optionsPremiumPricer,\\r\\n                premiumDiscount\\r\\n            );\\r\\n\\r\\n        require(premium > 0, \\\"!premium\\\");\\r\\n\\r\\n        return (otokenAddress, premium, strikePrice, delta);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\r\\n     * @param otokenAddress is the address of the otoken\\r\\n     * @param vaultParams is the struct with vault general data\\r\\n     * @param collateralAsset is the address of the collateral asset\\r\\n     * @param USDC is the address of usdc\\r\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\r\\n     */\\r\\n    function verifyOtoken(\\r\\n        address otokenAddress,\\r\\n        Vault.VaultParams storage vaultParams,\\r\\n        address collateralAsset,\\r\\n        address USDC,\\r\\n        uint256 delay\\r\\n    ) private view {\\r\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\r\\n\\r\\n        IOtoken otoken = IOtoken(otokenAddress);\\r\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\r\\n        require(\\r\\n            otoken.underlyingAsset() == vaultParams.underlying,\\r\\n            \\\"Wrong underlyingAsset\\\"\\r\\n        );\\r\\n        require(\\r\\n            otoken.collateralAsset() == collateralAsset,\\r\\n            \\\"Wrong collateralAsset\\\"\\r\\n        );\\r\\n\\r\\n        // we just assume all options use USDC as the strike\\r\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\r\\n\\r\\n        uint256 readyAt = block.timestamp.add(delay);\\r\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\r\\n     * @param asset is the address of the vault's asset\\r\\n     * @param decimals is the decimals of the asset\\r\\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\\r\\n     * @param managementFee is the management fee percent to charge on the AUM\\r\\n     */\\r\\n    struct RolloverParams {\\r\\n        uint256 decimals;\\r\\n        uint256 totalBalance;\\r\\n        uint256 currentShareSupply;\\r\\n        uint256 lastQueuedWithdrawAmount;\\r\\n        uint256 managementFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the shares to mint, new price per share, and\\r\\n      amount of funds to re-allocate as collateral for the new round\\r\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\r\\n     * @param params is the rollover parameters passed to compute the next state\\r\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\r\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\r\\n     * @return newPricePerShare is the price per share of the new round\\r\\n     * @return mintShares is the amount of shares to mint from deposits\\r\\n     * @return managementFeeInAsset is the amount of management fee charged by vault\\r\\n     */\\r\\n    function rollover(\\r\\n        Vault.VaultState storage vaultState,\\r\\n        RolloverParams calldata params\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 newLockedAmount,\\r\\n            uint256 queuedWithdrawAmount,\\r\\n            uint256 newPricePerShare,\\r\\n            uint256 mintShares,\\r\\n            uint256 managementFeeInAsset\\r\\n        )\\r\\n    {\\r\\n        uint256 currentBalance = params.totalBalance;\\r\\n        uint256 pendingAmount = vaultState.totalPending;\\r\\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\\r\\n\\r\\n        uint256 balanceForVaultFees;\\r\\n        {\\r\\n            uint256 pricePerShareBeforeFee =\\r\\n                ShareMath.pricePerShare(\\r\\n                    params.currentShareSupply,\\r\\n                    currentBalance,\\r\\n                    pendingAmount,\\r\\n                    params.decimals\\r\\n                );\\r\\n\\r\\n            uint256 queuedWithdrawBeforeFee =\\r\\n                params.currentShareSupply > 0\\r\\n                    ? ShareMath.sharesToAsset(\\r\\n                        queuedWithdrawShares,\\r\\n                        pricePerShareBeforeFee,\\r\\n                        params.decimals\\r\\n                    )\\r\\n                    : 0;\\r\\n\\r\\n            // Deduct the difference between the newly scheduled withdrawals\\r\\n            // and the older withdrawals\\r\\n            // so we can charge them fees before they leave\\r\\n            uint256 withdrawAmountDiff =\\r\\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\\r\\n                    ? queuedWithdrawBeforeFee.sub(\\r\\n                        params.lastQueuedWithdrawAmount\\r\\n                    )\\r\\n                    : 0;\\r\\n\\r\\n            balanceForVaultFees = currentBalance\\r\\n                .sub(queuedWithdrawBeforeFee)\\r\\n                .add(withdrawAmountDiff);\\r\\n        }\\r\\n\\r\\n        managementFeeInAsset = getManagementFee(\\r\\n            balanceForVaultFees,\\r\\n            vaultState.totalPending,\\r\\n            params.managementFee\\r\\n        );\\r\\n\\r\\n        // Take into account the fee\\r\\n        // so we can calculate the newPricePerShare\\r\\n        currentBalance = currentBalance.sub(managementFeeInAsset);\\r\\n\\r\\n        {\\r\\n            newPricePerShare = ShareMath.pricePerShare(\\r\\n                params.currentShareSupply,\\r\\n                currentBalance,\\r\\n                pendingAmount,\\r\\n                params.decimals\\r\\n            );\\r\\n\\r\\n            // After closing the short, if the options expire in-the-money\\r\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\r\\n            // This ensures that the newly-minted shares do not take on the loss.\\r\\n            mintShares = ShareMath.assetToShares(\\r\\n                pendingAmount,\\r\\n                newPricePerShare,\\r\\n                params.decimals\\r\\n            );\\r\\n\\r\\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\\r\\n\\r\\n            queuedWithdrawAmount = newSupply > 0\\r\\n                ? ShareMath.sharesToAsset(\\r\\n                    queuedWithdrawShares,\\r\\n                    newPricePerShare,\\r\\n                    params.decimals\\r\\n                )\\r\\n                : 0;\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\r\\n            queuedWithdrawAmount,\\r\\n            newPricePerShare,\\r\\n            mintShares,\\r\\n            managementFeeInAsset\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\r\\n     * @param gammaController is the address of the opyn controller contract\\r\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\r\\n     * @param oTokenAddress is the address of the otoken to mint\\r\\n     * @param depositAmount is the amount of collateral to deposit\\r\\n     * @return the otoken mint amount\\r\\n     */\\r\\n    function createShort(\\r\\n        address gammaController,\\r\\n        address marginPool,\\r\\n        address oTokenAddress,\\r\\n        uint256 depositAmount\\r\\n    ) external returns (uint256) {\\r\\n        IController controller = IController(gammaController);\\r\\n        uint256 newVaultID =\\r\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\r\\n\\r\\n        // An otoken's collateralAsset is the vault's `asset`\\r\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\r\\n        IOtoken oToken = IOtoken(oTokenAddress);\\r\\n        address collateralAsset = oToken.collateralAsset();\\r\\n\\r\\n        uint256 collateralDecimals =\\r\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\r\\n        uint256 mintAmount;\\r\\n\\r\\n        if (oToken.isPut()) {\\r\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\r\\n            // This is because of an issue with precision.\\r\\n            //\\r\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\r\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\r\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\r\\n            //\\r\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\r\\n            // We retain the dust in the vault so the calling contract can withdraw the\\r\\n            // actual locked amount + dust at settlement.\\r\\n            //\\r\\n            // To test this behavior, we can console.log\\r\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\r\\n            // to see how much dust (or excess collateral) is left behind.\\r\\n            mintAmount = depositAmount\\r\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\r\\n                .mul(10**18) // we use 10**18 to give extra precision\\r\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\r\\n        } else {\\r\\n            mintAmount = depositAmount;\\r\\n\\r\\n            if (collateralDecimals > 8) {\\r\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\r\\n                if (mintAmount > scaleBy) {\\r\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // double approve to fix non-compliant ERC20s\\r\\n        IERC20 collateralToken = IERC20(collateralAsset);\\r\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\r\\n\\r\\n        IController.ActionArgs[] memory actions =\\r\\n            new IController.ActionArgs[](3);\\r\\n\\r\\n        actions[0] = IController.ActionArgs(\\r\\n            IController.ActionType.OpenVault,\\r\\n            address(this), // owner\\r\\n            address(this), // receiver\\r\\n            address(0), // asset, otoken\\r\\n            newVaultID, // vaultId\\r\\n            0, // amount\\r\\n            0, //index\\r\\n            \\\"\\\" //data\\r\\n        );\\r\\n\\r\\n        actions[1] = IController.ActionArgs(\\r\\n            IController.ActionType.DepositCollateral,\\r\\n            address(this), // owner\\r\\n            address(this), // address to transfer from\\r\\n            collateralAsset, // deposited asset\\r\\n            newVaultID, // vaultId\\r\\n            depositAmount, // amount\\r\\n            0, //index\\r\\n            \\\"\\\" //data\\r\\n        );\\r\\n\\r\\n        actions[2] = IController.ActionArgs(\\r\\n            IController.ActionType.MintShortOption,\\r\\n            address(this), // owner\\r\\n            address(this), // address to transfer to\\r\\n            oTokenAddress, // option address\\r\\n            newVaultID, // vaultId\\r\\n            mintAmount, // amount\\r\\n            0, //index\\r\\n            \\\"\\\" //data\\r\\n        );\\r\\n\\r\\n        controller.operate(actions);\\r\\n\\r\\n        return mintAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\r\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\r\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\r\\n     calling SettleVault action, this assumption should hold.\\r\\n     * @param gammaController is the address of the opyn controller contract\\r\\n     * @return amount of collateral redeemed from the vault\\r\\n     */\\r\\n    function settleShort(address gammaController) external returns (uint256) {\\r\\n        IController controller = IController(gammaController);\\r\\n\\r\\n        // gets the currently active vault ID\\r\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\r\\n\\r\\n        GammaTypes.Vault memory vault =\\r\\n            controller.getVault(address(this), vaultID);\\r\\n\\r\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\r\\n\\r\\n        // An otoken's collateralAsset is the vault's `asset`\\r\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\r\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\r\\n\\r\\n        // The short position has been previously closed, or all the otokens have been burned.\\r\\n        // So we return early.\\r\\n        if (address(collateralToken) == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\r\\n        uint256 startCollateralBalance =\\r\\n            collateralToken.balanceOf(address(this));\\r\\n\\r\\n        // If it is after expiry, we need to settle the short position using the normal way\\r\\n        // Delete the vault and withdraw all remaining collateral from the vault\\r\\n        IController.ActionArgs[] memory actions =\\r\\n            new IController.ActionArgs[](1);\\r\\n\\r\\n        actions[0] = IController.ActionArgs(\\r\\n            IController.ActionType.SettleVault,\\r\\n            address(this), // owner\\r\\n            address(this), // address to transfer to\\r\\n            address(0), // not used\\r\\n            vaultID, // vaultId\\r\\n            0, // not used\\r\\n            0, // not used\\r\\n            \\\"\\\" // not used\\r\\n        );\\r\\n\\r\\n        controller.operate(actions);\\r\\n\\r\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\r\\n\\r\\n        return endCollateralBalance.sub(startCollateralBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\r\\n     * It calls the `Redeem` action to claim the payout.\\r\\n     * @param gammaController is the address of the opyn controller contract\\r\\n     * @param oldOption is the address of the old option\\r\\n     * @param asset is the address of the vault's asset\\r\\n     * @return amount of asset received by exercising the option\\r\\n     */\\r\\n    function settleLong(\\r\\n        address gammaController,\\r\\n        address oldOption,\\r\\n        address asset\\r\\n    ) external returns (uint256) {\\r\\n        IController controller = IController(gammaController);\\r\\n\\r\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\r\\n\\r\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\r\\n\\r\\n        // If it is after expiry, we need to redeem the profits\\r\\n        IController.ActionArgs[] memory actions =\\r\\n            new IController.ActionArgs[](1);\\r\\n\\r\\n        actions[0] = IController.ActionArgs(\\r\\n            IController.ActionType.Redeem,\\r\\n            address(0), // not used\\r\\n            address(this), // address to send profits to\\r\\n            oldOption, // address of otoken\\r\\n            0, // not used\\r\\n            oldOptionBalance, // otoken balance\\r\\n            0, // not used\\r\\n            \\\"\\\" // not used\\r\\n        );\\r\\n\\r\\n        controller.operate(actions);\\r\\n\\r\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\r\\n\\r\\n        return endAssetBalance.sub(startAssetBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\r\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\r\\n     * only have a single vault open at any given time.\\r\\n     * @param gammaController is the address of the opyn controller contract\\r\\n     * @param currentOption is the address of the current option\\r\\n     * @return amount of collateral redeemed by burning otokens\\r\\n     */\\r\\n    function burnOtokens(address gammaController, address currentOption)\\r\\n        external\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 numOTokensToBurn =\\r\\n            IERC20(currentOption).balanceOf(address(this));\\r\\n\\r\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\r\\n\\r\\n        IController controller = IController(gammaController);\\r\\n\\r\\n        // gets the currently active vault ID\\r\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\r\\n\\r\\n        GammaTypes.Vault memory vault =\\r\\n            controller.getVault(address(this), vaultID);\\r\\n\\r\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\r\\n\\r\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\r\\n\\r\\n        uint256 startCollateralBalance =\\r\\n            collateralToken.balanceOf(address(this));\\r\\n\\r\\n        // Burning `amount` of oTokens from the ribbon vault,\\r\\n        // then withdrawing the corresponding collateral amount from the vault\\r\\n        IController.ActionArgs[] memory actions =\\r\\n            new IController.ActionArgs[](2);\\r\\n\\r\\n        actions[0] = IController.ActionArgs(\\r\\n            IController.ActionType.BurnShortOption,\\r\\n            address(this), // owner\\r\\n            address(this), // address to transfer from\\r\\n            address(vault.shortOtokens[0]), // otoken address\\r\\n            vaultID, // vaultId\\r\\n            numOTokensToBurn, // amount\\r\\n            0, //index\\r\\n            \\\"\\\" //data\\r\\n        );\\r\\n\\r\\n        actions[1] = IController.ActionArgs(\\r\\n            IController.ActionType.WithdrawCollateral,\\r\\n            address(this), // owner\\r\\n            address(this), // address to transfer to\\r\\n            address(collateralToken), // withdrawn asset\\r\\n            vaultID, // vaultId\\r\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\r\\n                vault.shortAmounts[0]\\r\\n            ), // amount\\r\\n            0, //index\\r\\n            \\\"\\\" //data\\r\\n        );\\r\\n\\r\\n        controller.operate(actions);\\r\\n\\r\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\r\\n\\r\\n        return endCollateralBalance.sub(startCollateralBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the management fee for this week's round\\r\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\r\\n     * @param pendingAmount is the pending deposit amount\\r\\n     * @param managementFeePercent is the management fee pct.\\r\\n     * @return managementFeeInAsset is the management fee\\r\\n     */\\r\\n    function getManagementFee(\\r\\n        uint256 currentBalance,\\r\\n        uint256 pendingAmount,\\r\\n        uint256 managementFeePercent\\r\\n    ) internal pure returns (uint256 managementFeeInAsset) {\\r\\n        // At the first round, currentBalance=0, pendingAmount>0\\r\\n        // so we just do not charge anything on the first round\\r\\n        uint256 lockedBalanceSansPending =\\r\\n            currentBalance > pendingAmount\\r\\n                ? currentBalance.sub(pendingAmount)\\r\\n                : 0;\\r\\n\\r\\n        uint256 _managementFeeInAsset;\\r\\n\\r\\n        // Always charge management fee regardless of whether the vault is\\r\\n        // making a profit from the previous options sale\\r\\n        _managementFeeInAsset = managementFeePercent > 0\\r\\n            ? lockedBalanceSansPending.mul(managementFeePercent).div(\\r\\n                100 * Vault.FEE_MULTIPLIER\\r\\n            )\\r\\n            : 0;\\r\\n\\r\\n        return _managementFeeInAsset;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\r\\n     * @param closeParams is the struct with details on previous option and strike selection details\\r\\n     * @param vaultParams is the struct with vault general data\\r\\n     * @param underlying is the address of the underlying asset of the option\\r\\n     * @param collateralAsset is the address of the collateral asset of the option\\r\\n     * @param strikePrice is the strike price of the option\\r\\n     * @param expiry is the expiry timestamp of the option\\r\\n     * @param isPut is whether the option is a put\\r\\n     * @return the address of the option\\r\\n     */\\r\\n    function getOrDeployOtoken(\\r\\n        CloseParams calldata closeParams,\\r\\n        Vault.VaultParams storage vaultParams,\\r\\n        address underlying,\\r\\n        address collateralAsset,\\r\\n        uint256 strikePrice,\\r\\n        uint256 expiry,\\r\\n        bool isPut\\r\\n    ) internal returns (address) {\\r\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\r\\n\\r\\n        address otokenFromFactory =\\r\\n            factory.getOtoken(\\r\\n                underlying,\\r\\n                closeParams.USDC,\\r\\n                collateralAsset,\\r\\n                strikePrice,\\r\\n                expiry,\\r\\n                isPut\\r\\n            );\\r\\n\\r\\n        if (otokenFromFactory != address(0)) {\\r\\n            return otokenFromFactory;\\r\\n        }\\r\\n\\r\\n        address otoken =\\r\\n            factory.createOtoken(\\r\\n                underlying,\\r\\n                closeParams.USDC,\\r\\n                collateralAsset,\\r\\n                strikePrice,\\r\\n                expiry,\\r\\n                isPut\\r\\n            );\\r\\n\\r\\n        verifyOtoken(\\r\\n            otoken,\\r\\n            vaultParams,\\r\\n            collateralAsset,\\r\\n            closeParams.USDC,\\r\\n            closeParams.delay\\r\\n        );\\r\\n\\r\\n        return otoken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Starts the gnosis auction\\r\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\r\\n     * @return the auction id of the newly created auction\\r\\n     */\\r\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\r\\n        external\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return GnosisAuction.startAuction(auctionDetails);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Settles the gnosis auction\\r\\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\\r\\n     * @param auctionID is the auction ID of the gnosis easy auction\\r\\n     */\\r\\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\\r\\n        internal\\r\\n    {\\r\\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Places a bid in an auction\\r\\n     * @param bidDetails is the struct with all the details of the\\r\\n      bid including the auction's id and how much to bid\\r\\n     */\\r\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 sellAmount,\\r\\n            uint256 buyAmount,\\r\\n            uint64 userId\\r\\n        )\\r\\n    {\\r\\n        return GnosisAuction.placeBid(bidDetails);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claims the oTokens belonging to the vault\\r\\n     * @param auctionSellOrder is the sell order of the bid\\r\\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\\r\\n     holding custody to the funds\\r\\n     * @param counterpartyThetaVault is the address of the counterparty theta\\r\\n     vault of this delta vault\\r\\n     */\\r\\n    function claimAuctionOtokens(\\r\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\r\\n        address gnosisEasyAuction,\\r\\n        address counterpartyThetaVault\\r\\n    ) external {\\r\\n        GnosisAuction.claimAuctionOtokens(\\r\\n            auctionSellOrder,\\r\\n            gnosisEasyAuction,\\r\\n            counterpartyThetaVault\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verify the constructor params satisfy requirements\\r\\n     * @param _initParams is the initialization parameter including owner, keeper, etc.\\r\\n     * @param _vaultParams is the struct with vault general data\\r\\n     */\\r\\n    function verifyInitializerParams(\\r\\n        InitParams calldata _initParams,\\r\\n        Vault.VaultParams calldata _vaultParams,\\r\\n        uint256 _min_auction_duration\\r\\n    ) external pure {\\r\\n        require(_initParams._owner != address(0), \\\"!_owner\\\");\\r\\n        require(_initParams._keeper != address(0), \\\"!_keeper\\\");\\r\\n        require(_initParams._feeRecipient != address(0), \\\"!_feeRecipient\\\");\\r\\n        require(\\r\\n            _initParams._performanceFee < 100 * Vault.FEE_MULTIPLIER,\\r\\n            \\\"performanceFee >= 100%\\\"\\r\\n        );\\r\\n        require(\\r\\n            _initParams._managementFee < 100 * Vault.FEE_MULTIPLIER,\\r\\n            \\\"managementFee >= 100%\\\"\\r\\n        );\\r\\n        require(bytes(_initParams._tokenName).length > 0, \\\"!_tokenName\\\");\\r\\n        require(bytes(_initParams._tokenSymbol).length > 0, \\\"!_tokenSymbol\\\");\\r\\n        require(\\r\\n            (_initParams._period == 7) ||\\r\\n                (_initParams._period == 14) ||\\r\\n                (_initParams._period == 30) ||\\r\\n                (_initParams._period == 90) ||\\r\\n                (_initParams._period == 180),\\r\\n            \\\"!_period\\\"\\r\\n        );\\r\\n        require(\\r\\n            _initParams._optionsPremiumPricer != address(0),\\r\\n            \\\"!_optionsPremiumPricer\\\"\\r\\n        );\\r\\n        require(\\r\\n            _initParams._strikeSelection != address(0),\\r\\n            \\\"!_strikeSelection\\\"\\r\\n        );\\r\\n        require(\\r\\n            _initParams._premiumDiscount > 0 &&\\r\\n                _initParams._premiumDiscount <\\r\\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\r\\n            \\\"!_premiumDiscount\\\"\\r\\n        );\\r\\n        require(\\r\\n            _initParams._auctionDuration >= _min_auction_duration,\\r\\n            \\\"!_auctionDuration\\\"\\r\\n        );\\r\\n        require(_initParams._maxDepositors > 0, \\\"!_maxDepositors\\\");\\r\\n        require(_initParams._minDeposit > 0, \\\"!_minDeposit\\\");\\r\\n\\r\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\r\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\r\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\r\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\r\\n        require(\\r\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\r\\n            \\\"cap has to be higher than minimumSupply\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the next options expiry timestamp, this function should be called\\r\\n     when there is sufficient guard to ensure valid period\\r\\n     * @param timestamp is the expiry timestamp of the current option\\r\\n     * @param period is no. of days in between option sales. Available periods are: \\r\\n     * 7(1w), 14(2w), 30(1m), 90(3m), 180(6m)\\r\\n     */\\r\\n    function getNextExpiry(uint256 timestamp, uint256 period)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 nextExpiry)\\r\\n    {\\r\\n        if (period == 7) {\\r\\n            nextExpiry = DateTime.getNextFriday(timestamp);\\r\\n            nextExpiry = nextExpiry <= timestamp\\r\\n                ? nextExpiry + 1 weeks\\r\\n                : nextExpiry;\\r\\n        } else if (period == 14) {\\r\\n            nextExpiry = DateTime.getNextFriday(timestamp);\\r\\n            nextExpiry = nextExpiry <= timestamp\\r\\n                ? nextExpiry + 2 weeks\\r\\n                : nextExpiry;\\r\\n        } else if (period == 30) {\\r\\n            nextExpiry = DateTime.getMonthLastFriday(timestamp);\\r\\n            nextExpiry = nextExpiry <= timestamp\\r\\n                ? DateTime.getMonthLastFriday(nextExpiry + 1 weeks)\\r\\n                : nextExpiry;\\r\\n        } else if (period == 90) {\\r\\n            nextExpiry = DateTime.getQuarterLastFriday(timestamp);\\r\\n            nextExpiry = nextExpiry <= timestamp\\r\\n                ? DateTime.getQuarterLastFriday(nextExpiry + 1 weeks)\\r\\n                : nextExpiry;\\r\\n        } else if (period == 180) {\\r\\n            nextExpiry = DateTime.getBiannualLastFriday(timestamp);\\r\\n            nextExpiry = nextExpiry <= timestamp\\r\\n                ? DateTime.getBiannualLastFriday(nextExpiry + 1 weeks)\\r\\n                : nextExpiry;\\r\\n        }\\r\\n\\r\\n        nextExpiry = nextExpiry - (nextExpiry % (24 hours)) + (8 hours);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2d7d64014da968acdb73718d8209dace12f898a9a3782858aaabb5adf83b1684\",\"license\":\"MIT\"},\"contracts/storage/RibbonTreasuryVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\r\\n\\r\\nabstract contract RibbonTreasuryVaultStorageV1 {\\r\\n    /// @notice Vault's parameters like cap, decimals\\r\\n    Vault.VaultParams public vaultParams;\\r\\n\\r\\n    /// @notice Vault's lifecycle state like round and locked amounts\\r\\n    Vault.VaultState public vaultState;\\r\\n\\r\\n    /// @notice Vault's state of the options sold and the timelocked option\\r\\n    Vault.OptionState public optionState;\\r\\n\\r\\n    /// @notice Stores the user's pending deposit for the round\\r\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\r\\n\\r\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\r\\n    /// This is used to determine the number of shares to be returned\\r\\n    /// to a user with their DepositReceipt.depositAmount\\r\\n    mapping(uint256 => uint256) public roundPricePerShare;\\r\\n\\r\\n    /// @notice Stores pending user withdrawals\\r\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\r\\n\\r\\n    /// @notice Mapping of depositors in the vault\\r\\n    mapping(address => bool) public depositorsMap;\\r\\n\\r\\n    /// @notice Array of depositors in the vault\\r\\n    address[] public depositorsArray;\\r\\n\\r\\n    /// @notice Fee recipient for the performance and management fees\\r\\n    address public feeRecipient;\\r\\n\\r\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\r\\n    // no access to critical vault changes\\r\\n    address public keeper;\\r\\n\\r\\n    /// @notice Logic contract used to price options\\r\\n    address public optionsPremiumPricer;\\r\\n\\r\\n    /// @notice Logic contract used to select strike prices\\r\\n    address public strikeSelection;\\r\\n\\r\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\r\\n    uint256 public performanceFee;\\r\\n\\r\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\r\\n    uint256 public managementFee;\\r\\n\\r\\n    /// @notice Premium discount on options we are selling (thousandths place: 000 - 999)\\r\\n    uint256 public premiumDiscount;\\r\\n\\r\\n    /// @notice Current oToken premium\\r\\n    uint256 public currentOtokenPremium;\\r\\n\\r\\n    /// @notice Price last overridden strike set to\\r\\n    uint256 public overriddenStrikePrice;\\r\\n\\r\\n    /// @notice Auction duration\\r\\n    uint256 public auctionDuration;\\r\\n\\r\\n    /// @notice Auction id of current option\\r\\n    uint256 public optionAuctionID;\\r\\n\\r\\n    /// @notice Amount locked for scheduled withdrawals last week;\\r\\n    uint256 public lastQueuedWithdrawAmount;\\r\\n\\r\\n    /// @notice Period between each options sale.\\r\\n    /// Available options 7 (weekly), 14 (biweekly), 30 (monthly), 90 (quarterly), 180 (biannually)\\r\\n    uint256 public period;\\r\\n\\r\\n    /// @notice Maximum number of depositors\\r\\n    uint256 public maxDepositors;\\r\\n\\r\\n    /// @notice Minimum amount to deposit\\r\\n    uint256 public minDeposit;\\r\\n\\r\\n    /// @notice Last round id at which the strike was manually overridden\\r\\n    uint16 public lastStrikeOverrideRound;\\r\\n}\\r\\n\\r\\n// We are following Compound's method of upgrading new contract implementations\\r\\n// When we need to add new storage variables, we create a new version of RibbonTreasuryVaultStorage\\r\\n// e.g. RibbonTreasuryVaultStorage<versionNumber>, so finally it would look like\\r\\n// contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1, RibbonTreasuryVaultStorageV2\\r\\nabstract contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1 {\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x33e6b25235c19cdc21ed325e08efcbb89ffffbc8c4841f85de2d39695f992c8e\",\"license\":\"MIT\"},\"contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {\\r\\n    SafeERC20\\r\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {\\r\\n    ReentrancyGuardUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport {\\r\\n    OwnableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {\\r\\n    ERC20Upgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\r\\nimport {\\r\\n    VaultLifecycleTreasuryBare\\r\\n} from \\\"../../libraries/VaultLifecycleTreasuryBare.sol\\\";\\r\\nimport {\\r\\n    RibbonTreasuryVaultStorage\\r\\n} from \\\"../../storage/RibbonTreasuryVaultStorage.sol\\\";\\r\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\r\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\r\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\r\\nimport {IERC20Detailed} from \\\"../../interfaces/IERC20Detailed.sol\\\";\\r\\n\\r\\ncontract RibbonTreasuryVault is\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    OwnableUpgradeable,\\r\\n    ERC20Upgradeable,\\r\\n    RibbonTreasuryVaultStorage\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using ShareMath for Vault.DepositReceipt;\\r\\n\\r\\n    /************************************************\\r\\n     *  IMMUTABLES & CONSTANTS\\r\\n     ***********************************************/\\r\\n\\r\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\r\\n    address public immutable WETH;\\r\\n\\r\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\r\\n    address public immutable USDC;\\r\\n\\r\\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\\r\\n    uint256 public constant DELAY = 0;\\r\\n\\r\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\r\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\r\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\r\\n\\r\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\r\\n    // which allows users to perform multiple actions on their vaults\\r\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\r\\n    address public immutable GAMMA_CONTROLLER;\\r\\n\\r\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\r\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\r\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\r\\n    address public immutable MARGIN_POOL;\\r\\n\\r\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\r\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\r\\n    address public immutable GNOSIS_EASY_AUCTION;\\r\\n\\r\\n    /// OTOKEN_FACTORY is the factory contract used to spawn otokens. Used to lookup otokens.\\r\\n    address public immutable OTOKEN_FACTORY;\\r\\n\\r\\n    // The minimum duration for an option auction.\\r\\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\\r\\n\\r\\n    // The minimum amount above which premium distribution will occur during commitAndClose\\r\\n    uint256 private constant MIN_DUST_AMOUNT = 10000000;\\r\\n\\r\\n    /************************************************\\r\\n     *  EVENTS\\r\\n     ***********************************************/\\r\\n\\r\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\r\\n\\r\\n    event InitiateWithdraw(\\r\\n        address indexed account,\\r\\n        uint256 shares,\\r\\n        uint256 round\\r\\n    );\\r\\n\\r\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\r\\n\\r\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\r\\n\\r\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\r\\n\\r\\n    event CapSet(uint256 oldCap, uint256 newCap);\\r\\n\\r\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\r\\n\\r\\n    event CollectManagementFee(\\r\\n        uint256 managementFee,\\r\\n        uint256 round,\\r\\n        address indexed feeRecipient\\r\\n    );\\r\\n\\r\\n    event CollectPerformanceFee(\\r\\n        uint256 performanceFee,\\r\\n        uint256 round,\\r\\n        address indexed feeRecipient\\r\\n    );\\r\\n\\r\\n    event DistributePremium(\\r\\n        uint256 amount,\\r\\n        uint256[] amounts,\\r\\n        address[] recipients,\\r\\n        uint256 round\\r\\n    );\\r\\n\\r\\n    event OpenShort(\\r\\n        address indexed options,\\r\\n        uint256 depositAmount,\\r\\n        address indexed manager\\r\\n    );\\r\\n\\r\\n    event CloseShort(\\r\\n        address indexed options,\\r\\n        uint256 withdrawAmount,\\r\\n        address indexed manager\\r\\n    );\\r\\n\\r\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\r\\n\\r\\n    event PremiumDiscountSet(\\r\\n        uint256 premiumDiscount,\\r\\n        uint256 newPremiumDiscount\\r\\n    );\\r\\n\\r\\n    event AuctionDurationSet(\\r\\n        uint256 auctionDuration,\\r\\n        uint256 newAuctionDuration\\r\\n    );\\r\\n\\r\\n    event InstantWithdraw(\\r\\n        address indexed account,\\r\\n        uint256 amount,\\r\\n        uint256 round\\r\\n    );\\r\\n\\r\\n    event InitiateGnosisAuction(\\r\\n        address indexed auctioningToken,\\r\\n        address indexed biddingToken,\\r\\n        uint256 auctionCounter,\\r\\n        address indexed manager\\r\\n    );\\r\\n\\r\\n    /************************************************\\r\\n     *  CONSTRUCTOR & INITIALIZATION\\r\\n     ***********************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the contract with immutable variables\\r\\n     * @param _weth is the Wrapped Ether contract\\r\\n     * @param _usdc is the USDC contract\\r\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\r\\n     * @param _gammaController is the contract address for opyn actions\\r\\n     * @param _marginPool is the contract address for providing collateral to opyn\\r\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\r\\n     */\\r\\n    constructor(\\r\\n        address _weth,\\r\\n        address _usdc,\\r\\n        address _oTokenFactory,\\r\\n        address _gammaController,\\r\\n        address _marginPool,\\r\\n        address _gnosisEasyAuction\\r\\n    ) {\\r\\n        require(_weth != address(0), \\\"!_weth\\\");\\r\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\r\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\r\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\r\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\r\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\r\\n\\r\\n        WETH = _weth;\\r\\n        USDC = _usdc;\\r\\n        OTOKEN_FACTORY = _oTokenFactory;\\r\\n        GAMMA_CONTROLLER = _gammaController;\\r\\n        MARGIN_POOL = _marginPool;\\r\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the OptionVault contract with storage variables.\\r\\n     */\\r\\n    function initialize(\\r\\n        VaultLifecycleTreasuryBare.InitParams calldata _initParams,\\r\\n        Vault.VaultParams calldata _vaultParams\\r\\n    ) external initializer {\\r\\n        VaultLifecycleTreasuryBare.verifyInitializerParams(\\r\\n            _initParams,\\r\\n            _vaultParams,\\r\\n            MIN_AUCTION_DURATION\\r\\n        );\\r\\n\\r\\n        __ReentrancyGuard_init();\\r\\n        __ERC20_init(_initParams._tokenName, _initParams._tokenSymbol);\\r\\n        __Ownable_init();\\r\\n        transferOwnership(_initParams._owner);\\r\\n\\r\\n        keeper = _initParams._keeper;\\r\\n        period = _initParams._period;\\r\\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\\r\\n        strikeSelection = _initParams._strikeSelection;\\r\\n        premiumDiscount = _initParams._premiumDiscount;\\r\\n        auctionDuration = _initParams._auctionDuration;\\r\\n        feeRecipient = _initParams._feeRecipient;\\r\\n        performanceFee = _initParams._performanceFee;\\r\\n        managementFee = _perRoundManagementFee(_initParams._managementFee);\\r\\n        maxDepositors = _initParams._maxDepositors;\\r\\n        minDeposit = _initParams._minDeposit;\\r\\n\\r\\n        vaultParams = _vaultParams;\\r\\n        vaultState.round = 1;\\r\\n\\r\\n        uint256 assetBalance =\\r\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\r\\n        ShareMath.assertUint104(assetBalance);\\r\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the keeper.\\r\\n     */\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /************************************************\\r\\n     *  SETTERS\\r\\n     ***********************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the new keeper\\r\\n     * @param newKeeper is the address of the new keeper\\r\\n     */\\r\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\r\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\r\\n        keeper = newKeeper;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the new fee recipient\\r\\n     * @param newFeeRecipient is the address of the new fee recipient\\r\\n     */\\r\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\r\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\r\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\r\\n        feeRecipient = newFeeRecipient;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the management fee for the vault\\r\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\r\\n     */\\r\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\r\\n        require(\\r\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\r\\n            \\\"Invalid management fee\\\"\\r\\n        );\\r\\n\\r\\n        managementFee = _perRoundManagementFee(newManagementFee);\\r\\n\\r\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to set the management fee for the vault\\r\\n     * @param managementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2\\r\\n     * @return perRoundManagementFee is the management divided by the number of rounds per year\\r\\n     */\\r\\n    function _perRoundManagementFee(uint256 managementFee)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _period = period;\\r\\n        uint256 feeDivider =\\r\\n            _period % 30 == 0\\r\\n                ? Vault.FEE_MULTIPLIER * (12 / (_period / 30))\\r\\n                : WEEKS_PER_YEAR / (_period / 7);\\r\\n\\r\\n        // We are dividing annualized management fee by num weeks in a year\\r\\n        return managementFee.mul(Vault.FEE_MULTIPLIER).div(feeDivider);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the performance fee for the vault\\r\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\r\\n     */\\r\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\r\\n        require(\\r\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\r\\n            \\\"Invalid performance fee\\\"\\r\\n        );\\r\\n\\r\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\r\\n\\r\\n        performanceFee = newPerformanceFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new cap for deposits\\r\\n     * @param newCap is the new cap for deposits\\r\\n     */\\r\\n    function setCap(uint256 newCap) external onlyOwner {\\r\\n        require(newCap > 0, \\\"!newCap\\\");\\r\\n        ShareMath.assertUint104(newCap);\\r\\n        emit CapSet(vaultParams.cap, newCap);\\r\\n        vaultParams.cap = uint104(newCap);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the new discount on premiums for options we are selling\\r\\n     * @param newPremiumDiscount is the premium discount\\r\\n     */\\r\\n    function setPremiumDiscount(uint256 newPremiumDiscount) external onlyOwner {\\r\\n        require(\\r\\n            newPremiumDiscount > 0 &&\\r\\n                newPremiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\r\\n            \\\"Invalid discount\\\"\\r\\n        );\\r\\n\\r\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\r\\n\\r\\n        premiumDiscount = newPremiumDiscount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the new auction duration\\r\\n     * @param newAuctionDuration is the auction duration\\r\\n     */\\r\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\r\\n        require(\\r\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\r\\n            \\\"Invalid auction duration\\\"\\r\\n        );\\r\\n\\r\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\r\\n\\r\\n        auctionDuration = newAuctionDuration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the new strike selection contract\\r\\n     * @param newStrikeSelection is the address of the new strike selection contract\\r\\n     */\\r\\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\\r\\n        require(newStrikeSelection != address(0), \\\"!newStrikeSelection\\\");\\r\\n        strikeSelection = newStrikeSelection;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the new options premium pricer contract\\r\\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\\r\\n     */\\r\\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            newOptionsPremiumPricer != address(0),\\r\\n            \\\"!newOptionsPremiumPricer\\\"\\r\\n        );\\r\\n        optionsPremiumPricer = newOptionsPremiumPricer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Optionality to set strike price manually\\r\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\r\\n     */\\r\\n    function setStrikePrice(uint128 strikePrice)\\r\\n        external\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\r\\n        overriddenStrikePrice = strikePrice;\\r\\n        lastStrikeOverrideRound = vaultState.round;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the maximum number of depositors\\r\\n     * @param newMaxDepositors is the new cap for number of depositors\\r\\n     */\\r\\n    function setMaxDepositors(uint256 newMaxDepositors)\\r\\n        external\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(newMaxDepositors > 0, \\\"!newMaxDepositors\\\");\\r\\n        maxDepositors = newMaxDepositors;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the minimum deposit amount\\r\\n     * @param newMinDeposit is the new minimum amount for deposit\\r\\n     */\\r\\n    function setMinDeposit(uint256 newMinDeposit)\\r\\n        external\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(newMinDeposit > 0, \\\"!newMinDeposit\\\");\\r\\n        minDeposit = newMinDeposit;\\r\\n    }\\r\\n\\r\\n    /************************************************\\r\\n     *  DEPOSIT & WITHDRAWALS\\r\\n     ***********************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to add new depositor address\\r\\n     * @param newDepositor is the address to include in the depositors list\\r\\n     */\\r\\n    function _addDepositor(address newDepositor) internal {\\r\\n        if (!depositorsMap[newDepositor]) {\\r\\n            require(newDepositor != address(0), \\\"Depositor address null\\\");\\r\\n            require(\\r\\n                (depositorsArray.length + 1) <= maxDepositors,\\r\\n                \\\"Number of depositors exceeds limit\\\"\\r\\n            );\\r\\n\\r\\n            depositorsMap[newDepositor] = true;\\r\\n            depositorsArray.push(newDepositor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove addresses from depositors list\\r\\n     * @param excludeDepositor is the address to exclude from the depositors list\\r\\n     */\\r\\n    function _removeDepositor(address excludeDepositor) internal {\\r\\n        address[] storage array = depositorsArray;\\r\\n        uint256 arrayLength = array.length;\\r\\n\\r\\n        require(depositorsMap[excludeDepositor], \\\"Depositor does not exist\\\");\\r\\n\\r\\n        depositorsMap[excludeDepositor] = false;\\r\\n\\r\\n        for (uint256 i = 0; i < arrayLength - 1; i++) {\\r\\n            if (excludeDepositor == array[i]) {\\r\\n                (array[i], array[arrayLength - 1]) = (\\r\\n                    array[arrayLength - 1],\\r\\n                    array[i]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposits the `asset` from msg.sender.\\r\\n     * @param amount is the amount of `asset` to deposit\\r\\n     */\\r\\n    function deposit(uint256 amount) external nonReentrant {\\r\\n        require(amount > 0, \\\"!amount\\\");\\r\\n\\r\\n        _addDepositor(msg.sender);\\r\\n\\r\\n        _depositFor(amount, msg.sender);\\r\\n\\r\\n        // An approve() by the msg.sender is required beforehand\\r\\n        IERC20(vaultParams.asset).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints the vault shares to the creditor\\r\\n     * @param amount is the amount of `asset` deposited\\r\\n     * @param creditor is the address to receieve the deposit\\r\\n     */\\r\\n    function _depositFor(uint256 amount, address creditor) private {\\r\\n        uint256 currentRound = vaultState.round;\\r\\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\\r\\n\\r\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\r\\n        uint256 totalUserDeposit =\\r\\n            accountVaultBalance(msg.sender).add(depositReceipt.amount).add(\\r\\n                amount\\r\\n            );\\r\\n\\r\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\r\\n        require(\\r\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        require(totalUserDeposit >= minDeposit, \\\"Minimum deposit not reached\\\");\\r\\n\\r\\n        emit Deposit(creditor, amount, currentRound);\\r\\n\\r\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\r\\n        uint256 unredeemedShares =\\r\\n            depositReceipt.getSharesFromReceipt(\\r\\n                currentRound,\\r\\n                roundPricePerShare[depositReceipt.round],\\r\\n                vaultParams.decimals\\r\\n            );\\r\\n\\r\\n        uint256 depositAmount = amount;\\r\\n\\r\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\r\\n        if (currentRound == depositReceipt.round) {\\r\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\r\\n            depositAmount = newAmount;\\r\\n        }\\r\\n\\r\\n        ShareMath.assertUint104(depositAmount);\\r\\n\\r\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\r\\n            round: uint16(currentRound),\\r\\n            amount: uint104(depositAmount),\\r\\n            unredeemedShares: uint128(unredeemedShares)\\r\\n        });\\r\\n\\r\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\r\\n        ShareMath.assertUint128(newTotalPending);\\r\\n\\r\\n        vaultState.totalPending = uint128(newTotalPending);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\r\\n     * @param numShares is the number of shares to withdraw\\r\\n     */\\r\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\r\\n        require(numShares > 0, \\\"!numShares\\\");\\r\\n\\r\\n        // We do a max redeem before initiating a withdrawal\\r\\n        // But we check if they must first have unredeemed shares\\r\\n        Vault.DepositReceipt storage depositReceipt =\\r\\n            depositReceipts[msg.sender];\\r\\n\\r\\n        if (depositReceipt.amount > 0 || depositReceipt.unredeemedShares > 0) {\\r\\n            _redeem(0, true);\\r\\n        }\\r\\n\\r\\n        // This caches the `round` variable used in shareBalances\\r\\n        uint256 currentRound = vaultState.round;\\r\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\r\\n        uint256 withdrawalRound = withdrawal.round;\\r\\n\\r\\n        bool withdrawalIsSameRound = withdrawalRound == currentRound;\\r\\n\\r\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\r\\n\\r\\n        uint256 existingShares = uint256(withdrawal.shares);\\r\\n\\r\\n        uint256 withdrawalShares;\\r\\n        if (withdrawalIsSameRound) {\\r\\n            withdrawalShares = existingShares.add(numShares);\\r\\n        } else {\\r\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\r\\n            withdrawalShares = numShares;\\r\\n            withdrawals[msg.sender].round = uint16(currentRound);\\r\\n        }\\r\\n\\r\\n        // Ensure withdrawal does not reduce user deposit below the minimum amount\\r\\n        uint256 vaultDecimals = vaultParams.decimals;\\r\\n        uint256 userBalance = accountVaultBalance(msg.sender);\\r\\n\\r\\n        uint256 withdrawAmount =\\r\\n            ShareMath.sharesToAsset(\\r\\n                numShares,\\r\\n                currentRound != 1\\r\\n                    ? roundPricePerShare[currentRound - 1]\\r\\n                    : 10**vaultDecimals,\\r\\n                vaultDecimals\\r\\n            );\\r\\n\\r\\n        if (userBalance > withdrawAmount) {\\r\\n            uint256 totalDeposit = userBalance.sub(withdrawAmount);\\r\\n            require(totalDeposit >= minDeposit, \\\"Minimum deposit not reached\\\");\\r\\n        }\\r\\n\\r\\n        ShareMath.assertUint128(withdrawalShares);\\r\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\r\\n\\r\\n        uint256 newQueuedWithdrawShares =\\r\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\r\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\r\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\r\\n\\r\\n        if (depositReceipt.amount == 0 && balanceOf(msg.sender) == numShares) {\\r\\n            _removeDepositor(msg.sender);\\r\\n        }\\r\\n\\r\\n        _transfer(msg.sender, address(this), numShares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\r\\n     * @return withdrawAmount the current withdrawal amount\\r\\n     */\\r\\n    function _completeWithdraw() internal returns (uint256) {\\r\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\r\\n\\r\\n        uint256 withdrawalShares = withdrawal.shares;\\r\\n        uint256 withdrawalRound = withdrawal.round;\\r\\n\\r\\n        // This checks if there is a withdrawal\\r\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\r\\n\\r\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\r\\n\\r\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\r\\n        withdrawals[msg.sender].shares = 0;\\r\\n        vaultState.queuedWithdrawShares = uint128(\\r\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\r\\n        );\\r\\n\\r\\n        uint256 withdrawAmount =\\r\\n            ShareMath.sharesToAsset(\\r\\n                withdrawalShares,\\r\\n                roundPricePerShare[withdrawalRound],\\r\\n                vaultParams.decimals\\r\\n            );\\r\\n\\r\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\r\\n\\r\\n        _burn(address(this), withdrawalShares);\\r\\n\\r\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\r\\n        transferAsset(msg.sender, withdrawAmount);\\r\\n\\r\\n        return withdrawAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems shares that are owed to the account\\r\\n     * @param numShares is the number of shares to redeem\\r\\n     */\\r\\n    function redeem(uint256 numShares) external nonReentrant {\\r\\n        require(numShares > 0, \\\"!numShares\\\");\\r\\n        _redeem(numShares, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\r\\n     */\\r\\n    function maxRedeem() external nonReentrant {\\r\\n        _redeem(0, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems shares that are owed to the account\\r\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\r\\n     * @param isMax is flag for when callers do a max redemption\\r\\n     */\\r\\n    function _redeem(uint256 numShares, bool isMax) internal {\\r\\n        Vault.DepositReceipt memory depositReceipt =\\r\\n            depositReceipts[msg.sender];\\r\\n\\r\\n        // This handles the null case when depositReceipt.round = 0\\r\\n        // Because we start with round = 1 at `initialize`\\r\\n        uint256 currentRound = vaultState.round;\\r\\n\\r\\n        uint256 unredeemedShares =\\r\\n            depositReceipt.getSharesFromReceipt(\\r\\n                currentRound,\\r\\n                roundPricePerShare[depositReceipt.round],\\r\\n                vaultParams.decimals\\r\\n            );\\r\\n\\r\\n        numShares = isMax ? unredeemedShares : numShares;\\r\\n        if (numShares == 0) {\\r\\n            return;\\r\\n        }\\r\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\r\\n\\r\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\r\\n        // we debit from the unredeemedShares, but leave the amount field intact\\r\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\r\\n        if (depositReceipt.round < currentRound) {\\r\\n            depositReceipts[msg.sender].amount = 0;\\r\\n        }\\r\\n\\r\\n        ShareMath.assertUint128(numShares);\\r\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\r\\n            unredeemedShares.sub(numShares)\\r\\n        );\\r\\n\\r\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\r\\n\\r\\n        _transfer(address(this), msg.sender, numShares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\r\\n     * @param amount is the amount to withdraw\\r\\n     */\\r\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\r\\n        Vault.DepositReceipt storage depositReceipt =\\r\\n            depositReceipts[msg.sender];\\r\\n\\r\\n        uint256 currentRound = vaultState.round;\\r\\n        require(amount > 0, \\\"!amount\\\");\\r\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\r\\n\\r\\n        uint256 receiptAmount = depositReceipt.amount;\\r\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\r\\n\\r\\n        uint256 userBalance =\\r\\n            accountVaultBalance(msg.sender).add(receiptAmount);\\r\\n\\r\\n        if (userBalance > amount) {\\r\\n            uint256 totalUserDeposit = userBalance.sub(amount);\\r\\n            require(\\r\\n                totalUserDeposit >= minDeposit,\\r\\n                \\\"Minimum deposit not reached\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\r\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\r\\n        vaultState.totalPending = uint128(\\r\\n            uint256(vaultState.totalPending).sub(amount)\\r\\n        );\\r\\n\\r\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\r\\n\\r\\n        if (depositReceipt.amount == 0 && shares(msg.sender) == 0) {\\r\\n            _removeDepositor(msg.sender);\\r\\n        }\\r\\n\\r\\n        transferAsset(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\r\\n     */\\r\\n    function completeWithdraw() external nonReentrant {\\r\\n        uint256 withdrawAmount = _completeWithdraw();\\r\\n        lastQueuedWithdrawAmount = uint128(\\r\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /************************************************\\r\\n     *  VAULT OPERATIONS\\r\\n     ***********************************************/\\r\\n\\r\\n    /*\\r\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\r\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\r\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\r\\n     * @param numRounds is the number of rounds to initialize in the map\\r\\n     */\\r\\n    function initRounds(uint256 numRounds) external nonReentrant {\\r\\n        require(numRounds > 0, \\\"!numRounds\\\");\\r\\n\\r\\n        uint256 _round = vaultState.round;\\r\\n        for (uint256 i = 0; i < numRounds; i++) {\\r\\n            uint256 index = _round + i;\\r\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\r\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Helper function that performs most administrative tasks\\r\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\r\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\r\\n     * @return newOption is the new option address\\r\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\r\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\r\\n     */\\r\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\r\\n        internal\\r\\n        returns (\\r\\n            address newOption,\\r\\n            uint256 lockedBalance,\\r\\n            uint256 queuedWithdrawAmount\\r\\n        )\\r\\n    {\\r\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\r\\n\\r\\n        newOption = optionState.nextOption;\\r\\n        require(newOption != address(0), \\\"!nextOption\\\");\\r\\n\\r\\n        uint256 currentRound = vaultState.round;\\r\\n        address recipient = feeRecipient;\\r\\n        uint256 mintShares;\\r\\n        uint256 managementFeeInAsset;\\r\\n        {\\r\\n            uint256 newPricePerShare;\\r\\n            (\\r\\n                lockedBalance,\\r\\n                queuedWithdrawAmount,\\r\\n                newPricePerShare,\\r\\n                mintShares,\\r\\n                managementFeeInAsset\\r\\n            ) = VaultLifecycleTreasuryBare.rollover(\\r\\n                vaultState,\\r\\n                VaultLifecycleTreasuryBare.RolloverParams(\\r\\n                    vaultParams.decimals,\\r\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\r\\n                    totalSupply(),\\r\\n                    lastQueuedWithdrawAmount,\\r\\n                    currentRound != 1 ? managementFee : 0\\r\\n                )\\r\\n            );\\r\\n\\r\\n            optionState.currentOption = newOption;\\r\\n            optionState.nextOption = address(0);\\r\\n\\r\\n            // Finalize the pricePerShare at the end of the round\\r\\n\\r\\n            roundPricePerShare[currentRound] = newPricePerShare;\\r\\n\\r\\n            emit CollectManagementFee(\\r\\n                managementFeeInAsset,\\r\\n                currentRound,\\r\\n                recipient\\r\\n            );\\r\\n\\r\\n            vaultState.totalPending = 0;\\r\\n            vaultState.round = uint16(currentRound + 1);\\r\\n        }\\r\\n\\r\\n        _mint(address(this), mintShares);\\r\\n\\r\\n        if (managementFeeInAsset > 0) {\\r\\n            transferAsset(payable(recipient), managementFeeInAsset);\\r\\n        }\\r\\n\\r\\n        return (newOption, lockedBalance, queuedWithdrawAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to make an ERC20 transfer\\r\\n     * @param recipient is the receiving address\\r\\n     * @param amount is the transfer amount\\r\\n     */\\r\\n    function transferAsset(address recipient, uint256 amount) internal {\\r\\n        address asset = vaultParams.asset;\\r\\n        IERC20(asset).safeTransfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\r\\n     *         This allows all the users to withdraw if the next option is malicious.\\r\\n     */\\r\\n    function commitAndClose() external nonReentrant {\\r\\n        address oldOption = optionState.currentOption;\\r\\n\\r\\n        VaultLifecycleTreasuryBare.CloseParams memory closeParams =\\r\\n            VaultLifecycleTreasuryBare.CloseParams({\\r\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\r\\n                USDC: USDC,\\r\\n                currentOption: oldOption,\\r\\n                delay: DELAY,\\r\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\r\\n                overriddenStrikePrice: overriddenStrikePrice,\\r\\n                period: period\\r\\n            });\\r\\n\\r\\n        (\\r\\n            address otokenAddress,\\r\\n            uint256 premium,\\r\\n            uint256 strikePrice,\\r\\n            uint256 delta\\r\\n        ) =\\r\\n            VaultLifecycleTreasuryBare.commitAndClose(\\r\\n                strikeSelection,\\r\\n                optionsPremiumPricer,\\r\\n                premiumDiscount,\\r\\n                closeParams,\\r\\n                vaultParams,\\r\\n                vaultState\\r\\n            );\\r\\n\\r\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\r\\n\\r\\n        ShareMath.assertUint104(premium);\\r\\n        currentOtokenPremium = uint104(premium);\\r\\n        optionState.nextOption = otokenAddress;\\r\\n\\r\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\r\\n        require(\\r\\n            nextOptionReady <= type(uint32).max,\\r\\n            \\\"Overflow nextOptionReady\\\"\\r\\n        );\\r\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\r\\n\\r\\n        _closeShort(oldOption);\\r\\n\\r\\n        // In case chargeAndDistribute was not called last round, call\\r\\n        // the function to conclude last round's performance fee and distribution\\r\\n        if (IERC20(USDC).balanceOf(address(this)) > MIN_DUST_AMOUNT) {\\r\\n            _chargeAndDistribute();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Closes the existing short position for the vault.\\r\\n     */\\r\\n    function _closeShort(address oldOption) private {\\r\\n        uint256 lockedAmount = vaultState.lockedAmount;\\r\\n        if (oldOption != address(0)) {\\r\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\r\\n        }\\r\\n        vaultState.lockedAmount = 0;\\r\\n\\r\\n        optionState.currentOption = address(0);\\r\\n\\r\\n        if (oldOption != address(0)) {\\r\\n            uint256 withdrawAmount =\\r\\n                VaultLifecycleTreasuryBare.settleShort(GAMMA_CONTROLLER);\\r\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Rolls the vault's funds into a new short position.\\r\\n     */\\r\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\r\\n        (\\r\\n            address newOption,\\r\\n            uint256 lockedBalance,\\r\\n            uint256 queuedWithdrawAmount\\r\\n        ) = _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\r\\n\\r\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\r\\n\\r\\n        ShareMath.assertUint104(lockedBalance);\\r\\n        vaultState.lockedAmount = uint104(lockedBalance);\\r\\n\\r\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\r\\n\\r\\n        VaultLifecycleTreasuryBare.createShort(\\r\\n            GAMMA_CONTROLLER,\\r\\n            MARGIN_POOL,\\r\\n            newOption,\\r\\n            lockedBalance\\r\\n        );\\r\\n\\r\\n        _startAuction();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initiate the gnosis auction.\\r\\n     */\\r\\n    function startAuction() external onlyKeeper nonReentrant {\\r\\n        _startAuction();\\r\\n    }\\r\\n\\r\\n    function _startAuction() private {\\r\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\r\\n\\r\\n        uint256 currOtokenPremium = currentOtokenPremium;\\r\\n\\r\\n        require(currOtokenPremium > 0, \\\"!currentOtokenPremium\\\");\\r\\n\\r\\n        uint256 stableDecimals = IERC20Detailed(USDC).decimals();\\r\\n\\r\\n        auctionDetails.oTokenAddress = optionState.currentOption;\\r\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\r\\n        auctionDetails.asset = USDC;\\r\\n        auctionDetails.assetDecimals = stableDecimals;\\r\\n        auctionDetails.oTokenPremium = currOtokenPremium;\\r\\n        auctionDetails.duration = auctionDuration;\\r\\n\\r\\n        optionAuctionID = VaultLifecycleTreasuryBare.startAuction(auctionDetails);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\r\\n     */\\r\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\r\\n        uint256 unlockedAssetAmount =\\r\\n            VaultLifecycleTreasuryBare.burnOtokens(\\r\\n                GAMMA_CONTROLLER,\\r\\n                optionState.currentOption\\r\\n            );\\r\\n\\r\\n        vaultState.lockedAmount = uint104(\\r\\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Settles the round's Gnosis auction and distribute the premiums earned\\r\\n     */\\r\\n    function concludeOptionsSale() external onlyKeeper nonReentrant {\\r\\n        VaultLifecycleTreasuryBare.settleAuction(\\r\\n            GNOSIS_EASY_AUCTION,\\r\\n            optionAuctionID\\r\\n        );\\r\\n\\r\\n        if (IERC20(USDC).balanceOf(address(this)) > MIN_DUST_AMOUNT) {\\r\\n            _chargeAndDistribute();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Charge performance fee and distribute remaining to depositors addresses\\r\\n     */\\r\\n    function chargeAndDistribute() external onlyKeeper nonReentrant {\\r\\n        _chargeAndDistribute();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate performance fee and transfer to fee recipient\\r\\n     */\\r\\n    function _chargeAndDistribute() internal {\\r\\n        IERC20 stableAsset = IERC20(USDC);\\r\\n        uint256 stableBalance = stableAsset.balanceOf(address(this));\\r\\n\\r\\n        require(stableBalance > 0, \\\"no premium to distribute\\\");\\r\\n\\r\\n        _chargePerformanceFee(stableAsset, stableBalance);\\r\\n\\r\\n        _distributePremium(\\r\\n            stableAsset,\\r\\n            stableAsset.balanceOf(address(this)) // Get the new balance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Charge performance fee\\r\\n     */\\r\\n    function _chargePerformanceFee(IERC20 token, uint256 amount) internal {\\r\\n        address recipient = feeRecipient;\\r\\n        uint256 transferAmount =\\r\\n            amount.mul(performanceFee).div(100 * Vault.FEE_MULTIPLIER);\\r\\n\\r\\n        token.safeTransfer(recipient, transferAmount);\\r\\n\\r\\n        // Performance fee for the round is charged after rollover\\r\\n        // hence we need to adjust the round to the previous\\r\\n        emit CollectPerformanceFee(\\r\\n            transferAmount,\\r\\n            vaultState.round - 1,\\r\\n            recipient\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Distribute the premium to depositor addresses\\r\\n     */\\r\\n    function _distributePremium(IERC20 token, uint256 amount) internal {\\r\\n        // Distribute to depositor address\\r\\n        address[] storage _depositors = depositorsArray;\\r\\n        uint256[] memory _amounts = new uint256[](_depositors.length);\\r\\n        uint256 totalSupply = totalSupply() - lastQueuedWithdrawAmount;\\r\\n\\r\\n        for (uint256 i = 0; i < _depositors.length; i++) {\\r\\n            // Distribute to depositors proportional to the amount of\\r\\n            // shares they own\\r\\n            address depositorAddress = _depositors[i];\\r\\n            _amounts[i] = shares(depositorAddress).mul(amount).div(totalSupply);\\r\\n\\r\\n            token.safeTransfer(depositorAddress, _amounts[i]);\\r\\n        }\\r\\n\\r\\n        emit DistributePremium(\\r\\n            amount,\\r\\n            _amounts,\\r\\n            _depositors,\\r\\n            vaultState.round - 1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setCurrentOtokenPremium(uint256 newOtokenPremium) public onlyKeeper {\\r\\n        currentOtokenPremium = newOtokenPremium;\\r\\n    }\\r\\n\\r\\n    /************************************************\\r\\n     *  GETTERS\\r\\n     ***********************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the asset balance held on the vault for the account\\r\\n     * @param account is the address to lookup balance for\\r\\n     * @return the amount of `asset` custodied by the vault for the user\\r\\n     */\\r\\n    function accountVaultBalance(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _decimals = vaultParams.decimals;\\r\\n        uint256 assetPerShare =\\r\\n            ShareMath.pricePerShare(\\r\\n                totalSupply(),\\r\\n                totalBalance(),\\r\\n                vaultState.totalPending,\\r\\n                _decimals\\r\\n            );\\r\\n        return\\r\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\r\\n     * @param account is the account to lookup share balance for\\r\\n     * @return the share balance\\r\\n     */\\r\\n    function shares(address account) public view returns (uint256) {\\r\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\r\\n        return heldByAccount.add(heldByVault);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\r\\n     * @param account is the account to lookup share balance for\\r\\n     * @return heldByAccount is the shares held by account\\r\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\r\\n     */\\r\\n    function shareBalances(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\r\\n    {\\r\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\r\\n\\r\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\r\\n            return (balanceOf(account), 0);\\r\\n        }\\r\\n\\r\\n        uint256 unredeemedShares =\\r\\n            depositReceipt.getSharesFromReceipt(\\r\\n                vaultState.round,\\r\\n                roundPricePerShare[depositReceipt.round],\\r\\n                vaultParams.decimals\\r\\n            );\\r\\n\\r\\n        return (balanceOf(account), unredeemedShares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The price of a unit of share denominated in the `asset`\\r\\n     */\\r\\n    function pricePerShare() external view returns (uint256) {\\r\\n        return\\r\\n            ShareMath.pricePerShare(\\r\\n                totalSupply(),\\r\\n                totalBalance(),\\r\\n                vaultState.totalPending,\\r\\n                vaultParams.decimals\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\r\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\r\\n     */\\r\\n    function totalBalance() public view returns (uint256) {\\r\\n        return\\r\\n            uint256(vaultState.lockedAmount).add(\\r\\n                IERC20(vaultParams.asset).balanceOf(address(this))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the token decimals\\r\\n     */\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return vaultParams.decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the maximum capacity of the vault in terms of the vault's asset\\r\\n     */\\r\\n    function cap() external view returns (uint256) {\\r\\n        return vaultParams.cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the date and time for the next options sale\\r\\n     */\\r\\n    function nextOptionReadyAt() external view returns (uint256) {\\r\\n        return optionState.nextOptionReadyAt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the options specification for the current round\\r\\n     */\\r\\n    function currentOption() external view returns (address) {\\r\\n        return optionState.currentOption;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the options specification for the next round\\r\\n     */\\r\\n    function nextOption() external view returns (address) {\\r\\n        return optionState.nextOption;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns total pending deposit for the current round\\r\\n     */\\r\\n    function totalPending() external view returns (uint256) {\\r\\n        return vaultState.totalPending;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ERC20 _transfer override function\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(\\r\\n            recipient == address(this) || sender == address(this),\\r\\n            \\\"Treasury rToken is not transferrable\\\"\\r\\n        );\\r\\n        return ERC20Upgradeable._transfer(sender, recipient, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x707c4555f81ef0c94cce1e3975518936f70d3b31552d38bb5649bafa058d1b3e\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// math.sol -- mixin for inline numerical wizardry\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >0.4.13;\\r\\n\\r\\nlibrary DSMath {\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        return x >= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        return x <= y ? x : y;\\r\\n    }\\r\\n\\r\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        return x >= y ? x : y;\\r\\n    }\\r\\n\\r\\n    uint256 constant WAD = 10**18;\\r\\n    uint256 constant RAY = 10**27;\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = add(mul(x, y), WAD / 2) / WAD;\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = add(mul(x, y), RAY / 2) / RAY;\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = add(mul(x, WAD), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < RAY / 2\\r\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = add(mul(x, RAY), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\r\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\r\\n    //\\r\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\r\\n    //\\r\\n    // These facts are why it works:\\r\\n    //\\r\\n    //  If n is even, then x^n = (x^2)^(n/2).\\r\\n    //  If n is odd,  then x^n = x * x^(n-1),\\r\\n    //   and applying the equation for even x gives\\r\\n    //    x^n = x * (x^2)^((n-1) / 2).\\r\\n    //\\r\\n    //  Also, EVM division is flooring and\\r\\n    //    floor[(n-1) / 2] = floor[n / 2].\\r\\n    //\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\r\\n        z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            x = rmul(x, x);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = rmul(z, x);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf1bde03e89c8f966ba280d1824e49d171cb36e0e7bcb69d47877d6d35f55307b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$96b216381db19e3be8352ccbc8a6bfdf78$__90636a1f21379061139f908690869061012c90600401615764565b60006040518083038186803b1580156113b757600080fd5b505af41580156113cb573d6000803e3d6000fd5b505050506113d76133e5565b6114636113e760a085018561596f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114299250505060c086018661596f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061345892505050565b61146b6134d7565b61147b610c3b6020850185615303565b61148b6040840160208501615303565b60d680546001600160a01b0319166001600160a01b039290921691909117905561016083013560e1556114c5610100840160e08501615303565b60d780546001600160a01b0319166001600160a01b03929092169190911790556114f761012084016101008501615303565b60d880546001600160a01b0319166001600160a01b03929092169190911790556115296101408401610120850161550e565b63ffffffff1660db5561014083013560de5561154b6060840160408501615303565b60d580546001600160a01b0319166001600160a01b0392909216919091179055608083013560d955611580606084013561353e565b60da5561018083013560e2556101a083013560e3558160c96115a28282615c59565b505060cc805461ffff1916600117905560c9546040516370a0823160e01b81523060048201526000916001600160a01b036201000090910416906370a082319060240160206040518083038186803b1580156115fd57600080fd5b505afa158015611611573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611635919061541c565b90506116408161339b565b60cc80546001600160681b03909216600160781b02600160781b600160e01b0319909216919091179055801561167c576000805461ff00191690555b505050565b6065546001600160a01b031633146116ab5760405162461bcd60e51b8152600401610e03906156c1565b600260015414156116ce5760405162461bcd60e51b8152600401610e039061572d565b60026001556001600160801b0381166117185760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b6044820152606401610e03565b6001600160801b031660dd5560cc5460e4805461ffff191661ffff90921691909117905560018055565b60d6546001600160a01b0316331461176c5760405162461bcd60e51b8152600401610e0390615652565b6002600154141561178f5760405162461bcd60e51b8152600401610e039061572d565b600260015560cf546040516358ffbb3d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116602482015260009073__$96b216381db19e3be8352ccbc8a6bfdf78$__906358ffbb3d9060440160206040518083038186803b15801561181657600080fd5b505af415801561182a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184e919061541c565b60cc5490915061186d906201000090046001600160681b031682613079565b60cc80546001600160681b0392909216620100000262010000600160781b03199092169190911790555060018055565b60d481815481106118ad57600080fd5b6000918252602090912001546001600160a01b0316905081565b60d6546001600160a01b031633146118f15760405162461bcd60e51b8152600401610e0390615652565b600260015414156119145760405162461bcd60e51b8152600401610e039061572d565b60026001556119216135a9565b60018055565b6002600154141561194a5760405162461bcd60e51b8152600401610e039061572d565b6002600181905550611921600060016137ee565b6065546001600160a01b031633146119885760405162461bcd60e51b8152600401610e03906156c1565b611996620f42406064615b17565b81106119e45760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e6365206665650000000000000000006044820152606401610e03565b60d95460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160d955565b6065546001600160a01b03163314611a4f5760405162461bcd60e51b8152600401610e03906156c1565b611a59600061399d565b565b60026001541415611a7e5760405162461bcd60e51b8152600401610e039061572d565b600260015580611abd5760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401610e03565b33600090815260d06020526040902080546201000090046001600160681b0316151580611afa57508054600160781b90046001600160801b031615155b15611b0b57611b0b600060016137ee565b60cc5433600081815260d260209081526040918290208054835188815261ffff96871693810184905292959194911692838614927f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a282546201000090046001600160801b031660008215611b9457611b8d828961306d565b9050611bf7565b8115611bd65760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b6044820152606401610e03565b5033600090815260d260205260409020805461ffff191661ffff8716179055865b60c954610100900460ff166000611c0d3361113b565b90506000611c538b8a60011415611c2e57611c2985600a615a6f565b611c4d565b60d16000611c3d60018e615b59565b8152602001908152602001600020545b85613339565b905080821115611c8f576000611c698383613079565b905060e354811015611c8d5760405162461bcd60e51b8152600401610e03906156f6565b505b611c98846139ef565b33600090815260d26020526040812080546001600160801b03808816620100000262010000600160901b03199092169190911790915560cd54611ce491600160801b909104168d61306d565b9050611cef816139ef565b60cd80546001600160801b03808416600160801b0291161790558a546001600160681b036201000090910416158015611d365750336000908152609760205260409020548c145b15611d4457611d4433613085565b611d4f33308e612feb565b50506001805550505050505050505050565b6065546001600160a01b03163314611d8b5760405162461bcd60e51b8152600401610e03906156c1565b60026001541415611dae5760405162461bcd60e51b8152600401610e039061572d565b600260015580611df15760405162461bcd60e51b815260206004820152600e60248201526d085b995dd35a5b91195c1bdcda5d60921b6044820152606401610e03565b60e35560018055565b6060609b8054610cdb90615b9c565b60d6546001600160a01b03163314611e335760405162461bcd60e51b8152600401610e0390615652565b60026001541415611e565760405162461bcd60e51b8152600401610e039061572d565b6002600155611921613a39565b60d6546001600160a01b03163314611e8d5760405162461bcd60e51b8152600401610e0390615652565b60026001541415611eb05760405162461bcd60e51b8152600401610e039061572d565b600260015560df54611ee3907f000000000000000000000000000000000000000000000000000000000000000090613bb7565b6040516370a0823160e01b815230600482015262989680907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611f4757600080fd5b505afa158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f919061541c565b111561192157611921613a39565b6000611fc2611f9b60995490565b611fa3612224565b60cd5460c9546001600160801b0390911690610100900460ff166132f3565b905090565b60026001541415611fea5760405162461bcd60e51b8152600401610e039061572d565b6002600155806120295760405162461bcd60e51b815260206004820152600a602482015269216e756d526f756e647360b01b6044820152606401610e03565b60cc5461ffff1660005b828110156120b85760006120478284615a00565b600081815260d16020526040902054909150156120945760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b6044820152606401610e03565b600090815260d16020526040902060019055806120b081615bd7565b915050612033565b50506001805550565b3360009081526098602090815260408083206001600160a01b0386168452909152812054828110156121435760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e03565b6121503385858403612ec6565b5060019392505050565b6065546001600160a01b031633146121845760405162461bcd60e51b8152600401610e03906156c1565b61012c8110156121d65760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e206475726174696f6e00000000000000006044820152606401610e03565b60de5460408051918252602082018390527f5acd982e2240ed224a69aa03dab039d3797c108e4b5f288cd7dd6ca181b275f3910160405180910390a160de55565b6000610d6b338484612feb565b60c9546040516370a0823160e01b8152306004820152600091611fc291620100009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab919061541c565b60cc546201000090046001600160681b03169061306d565b60d6546001600160a01b031633146122ed5760405162461bcd60e51b8152600401610e0390615652565b60dc55565b600260015414156123155760405162461bcd60e51b8152600401610e039061572d565b6002600155806123515760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610e03565b61235a33613c31565b6123648133613d70565b60c954612382906201000090046001600160a01b031633308461403e565b5060018055565b60d6546001600160a01b031633146123b35760405162461bcd60e51b8152600401610e0390615652565b600260015414156123d65760405162461bcd60e51b8152600401610e039061572d565b600260018190555060008060006123ee60e0546140af565b60e0819055919450925090506124038261339b565b60cc805462010000600160781b031916620100006001600160681b0385160217905560405182815233906001600160a01b038516907f045c558fdce4714c5816d53820d27420f4cd860892df203fe636384d8d19aa019060200160405180910390a3604051632904c23960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152841660448201526064810183905273__$96b216381db19e3be8352ccbc8a6bfdf78$__90632904c2399060840160206040518083038186803b15801561250f57600080fd5b505af4158015612523573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612547919061541c565b506120b86135a9565b600080600061255e84612c29565b9092509050611186828261306d565b6065546001600160a01b031633146125975760405162461bcd60e51b8152600401610e03906156c1565b6000811180156125b157506125ae600a6064615b17565b81105b6125f05760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908191a5cd8dbdd5b9d60821b6044820152606401610e03565b60db5460408051918252602082018390527f4cd657fde404967d63a338fb06c5c98751a9df57dfae6dc333a432faf8a5f656910160405180910390a160db55565b6065546001600160a01b0316331461265b5760405162461bcd60e51b8152600401610e03906156c1565b6001600160a01b03811661269e5760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b6044820152606401610e03565b60d680546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156126e35760405162461bcd60e51b8152600401610e039061572d565b6002600155806127225760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b6044820152606401610e03565b6123828160006137ee565b6065546001600160a01b031633146127575760405162461bcd60e51b8152600401610e03906156c1565b6001600160a01b0381166127a05760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b6044820152606401610e03565b60d5546001600160a01b03828116911614156127fe5760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e7400000000000000006044820152606401610e03565b60d580546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156128435760405162461bcd60e51b8152600401610e039061572d565b600260015560cf546040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000081166020830190815293811682840181815260006060850181815260e4805461ffff9081166080890190815260dd5460a08a0190815260e15460c08b0190815260d85460d75460db549d5163f71d2fd360e01b8152918c1660048301528b166024820152604481019c909c528a518a1660648d01529b51891660848c0152955190971660a48a0152915160c48901529451169386019390935251610104850152935161012484015260c961014484015260cc610164840152909181908190819073__$96b216381db19e3be8352ccbc8a6bfdf78$__9063f71d2fd3906101840160806040518083038186803b15801561299b57600080fd5b505af41580156129af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d391906153c2565b93509350935093507fa217999b1c125c2a996f712c5f26a28addad7167bd8a67d5bd5b2a751148abb08282604051612a15929190918252602082015260400190565b60405180910390a1612a268361339b565b6001600160681b03831660dc5560ce80546001600160a01b0319166001600160a01b0386161790556000612a5a428261306d565b905063ffffffff811115612ab05760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e526561647900000000000000006044820152606401610e03565b60cf805463ffffffff60a01b1916600160a01b63ffffffff841602179055612ad787614407565b6040516370a0823160e01b815230600482015262989680907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612b3b57600080fd5b505afa158015612b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b73919061541c565b1115612b8157612b81613a39565b5050600180555050505050565b6065546001600160a01b03163314612bb85760405162461bcd60e51b8152600401610e03906156c1565b6001600160a01b038116612c1d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e03565b612c268161399d565b50565b6001600160a01b038116600090815260d0602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b031691810191909152829160011115612cab575050506001600160a01b031660009081526097602052604081205491565b60cc54815161ffff908116600090815260d1602052604081205460c9549193612ce193869391169190610100900460ff16614573565b9050612d02856001600160a01b031660009081526097602052604090205490565b9590945092505050565b60026001541415612d2f5760405162461bcd60e51b8152600401610e039061572d565b60026001556000612d3e6145e4565b60e054909150612d4e9082613079565b6001600160801b031660e0555060018055565b6065546001600160a01b03163314612d8b5760405162461bcd60e51b8152600401610e03906156c1565b60026001541415612dae5760405162461bcd60e51b8152600401610e039061572d565b600260015580612df45760405162461bcd60e51b8152602060048201526011602482015270216e65774d61784465706f7369746f727360781b6044820152606401610e03565b60e25560018055565b6065546001600160a01b03163314612e275760405162461bcd60e51b8152600401610e03906156c1565b612e35620f42406064615b17565b8110612e7c5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b6044820152606401610e03565b612e858161353e565b60da81905560408051918252602082018390527f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a150565b6001600160a01b038316612f285760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e03565b6001600160a01b038216612f895760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e03565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03821630148061300a57506001600160a01b03831630145b6130625760405162461bcd60e51b8152602060048201526024808201527f54726561737572792072546f6b656e206973206e6f74207472616e736665727260448201526361626c6560e01b6064820152608401610e03565b61167c8383836147a1565b6000610e1f8284615a00565b6000610e1f8284615b59565b60d480546001600160a01b038316600090815260d3602052604090205460ff166130f15760405162461bcd60e51b815260206004820152601860248201527f4465706f7369746f7220646f6573206e6f7420657869737400000000000000006044820152606401610e03565b6001600160a01b038316600090815260d360205260408120805460ff191690555b61311d600183615b59565b8110156132905782818154811061314457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038581169116141561327e578261316f600184615b59565b8154811061318d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03168382815481106131cb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b031684838154811061320957634e487b7160e01b600052603260045260246000fd5b600091825260208220019086613220600188615b59565b8154811061323e57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b039485166001600160a01b031990911617905581549383166101009190910a9081029202199092161790555b8061328881615bd7565b915050613112565b50818054806132af57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b60c9546201000090046001600160a01b031661167c81848461496f565b60008061330183600a615a6f565b905060008611613311578061332f565b61332f866133296133228888613079565b849061499f565b906149ab565b9695505050505050565b6000600183116133835760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610e03565b61118661339183600a615a6f565b613329868661499f565b6001600160681b03811115612c265760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b6044820152606401610e03565b600054610100900460ff16806133fe575060005460ff16155b61341a5760405162461bcd60e51b8152600401610e0390615673565b600054610100900460ff1615801561343c576000805461ffff19166101011790555b6134446149b7565b8015612c26576000805461ff001916905550565b600054610100900460ff1680613471575060005460ff16155b61348d5760405162461bcd60e51b8152600401610e0390615673565b600054610100900460ff161580156134af576000805461ffff19166101011790555b6134b7614a26565b6134c18383614a90565b801561167c576000805461ff0019169055505050565b600054610100900460ff16806134f0575060005460ff16155b61350c5760405162461bcd60e51b8152600401610e0390615673565b600054610100900460ff1615801561352e576000805461ffff19166101011790555b613536614a26565b613444614b25565b60e15460009081613550601e83615bf2565b1561357357613560600783615a18565b61356e9063031ba309615a18565b613596565b61357e601e83615a18565b61358990600c615a18565b61359690620f4240615b17565b90506111868161332986620f424061499f565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260dc54806136235760405162461bcd60e51b81526020600482015260156024820152742163757272656e744f746f6b656e5072656d69756d60581b6044820152606401610e03565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561367e57600080fd5b505afa158015613692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b69190615528565b60cf546001600160a01b0390811685527f00000000000000000000000000000000000000000000000000000000000000008116602086019081527f00000000000000000000000000000000000000000000000000000000000000008216604080880191825260ff94909416606088018181526080890188815260de5460a08b019081529651633baf17fd60e21b81528a51871660048201529451861660248601529251909416604484015292516064830152516084820152915160a4830152915073__$96b216381db19e3be8352ccbc8a6bfdf78$__9063eebc5ff49060c40160206040518083038186803b1580156137ae57600080fd5b505af41580156137c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e6919061541c565b60df55505050565b33600090815260d0602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cc5491865260d19094529184205460c954919492909316926138699185918591610100900460ff16614573565b9050836138765784613878565b805b945084613886575050505050565b808511156138ca5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b6044820152606401610e03565b825161ffff168211156138f75733600090815260d060205260409020805462010000600160781b03191690555b613900856139ef565b61390a8186613079565b33600081815260d060205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929916139839189825261ffff16602082015260400190565b60405180910390a2613996303387612feb565b5050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160801b03811115612c265760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b6044820152606401610e03565b6040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b038316906370a082319060240160206040518083038186803b158015613a9d57600080fd5b505afa158015613ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad5919061541c565b905060008111613b275760405162461bcd60e51b815260206004820152601860248201527f6e6f207072656d69756d20746f206469737472696275746500000000000000006044820152606401610e03565b613b318282614b85565b6040516370a0823160e01b8152306004820152613bb39083906001600160a01b038216906370a082319060240160206040518083038186803b158015613b7657600080fd5b505afa158015613b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bae919061541c565b614c2b565b5050565b604051632e99361160e01b8152600481018290526001600160a01b03831690632e99361190602401602060405180830381600087803b158015613bf957600080fd5b505af1158015613c0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c919061541c565b6001600160a01b038116600090815260d3602052604090205460ff16612c26576001600160a01b038116613ca05760405162461bcd60e51b815260206004820152601660248201527511195c1bdcda5d1bdc881859191c995cdcc81b9d5b1b60521b6044820152606401610e03565b60e25460d454613cb1906001615a00565b1115613d0a5760405162461bcd60e51b815260206004820152602260248201527f4e756d626572206f66206465706f7369746f72732065786365656473206c696d6044820152611a5d60f21b6064820152608401610e03565b6001600160a01b0316600081815260d360205260408120805460ff1916600190811790915560d4805491820181559091527f9780e26d96b1f2a9a18ef8fc72d589dbf03ef788137b64f43897e83a91e7feec0180546001600160a01b0319169091179055565b60cc5461ffff166000613d8584610f3f612224565b6001600160a01b038416600090815260d0602090815260408083208151606081018352905461ffff811682526201000081046001600160681b0316938201849052600160781b90046001600160801b031691810191909152929350613df1908790610f3f90813361113b565b60cb549091506001600160681b0316831115613e3c5760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b6044820152606401610e03565b60ca54600160a01b900466ffffffffffffff16831015613e955760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610e03565b60e354811015613eb75760405162461bcd60e51b8152600401610e03906156f6565b60408051878152602081018690526001600160a01b038716917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a2815161ffff16600090815260d1602052604081205460c954613f29918591889190610100900460ff16614573565b8351909150879061ffff16861415613f5a576020840151600090613f56906001600160681b03168a61306d565b9150505b613f638161339b565b6040805160608101825261ffff80891682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038f16600090815260d090935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560cd5461400991168a61306d565b9050614014816139ef565b60cd80546001600160801b0319166001600160801b03929092169190911790555050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526140a99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614dd9565b50505050565b60cf5460009081908190600160a01b900463ffffffff164210156140fe5760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b6044820152606401610e03565b60ce546001600160a01b03169250826141475760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b6044820152606401610e03565b60cc805460d5546040805160a08101825260c954610100810460ff16825291516370a0823160e01b815230600482015261ffff909416946001600160a01b03938416946000948594859473__$96b216381db19e3be8352ccbc8a6bfdf78$__94633bafb7d6949093919260208401926201000090910416906370a082319060240160206040518083038186803b1580156141e057600080fd5b505afa1580156141f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614218919061541c565b815260200161422660995490565b81526020018d81526020018960011415614241576000614245565b60da545b9052604080516001600160e01b031960e086901b168152600481019390935281516024840152602082015160448401528101516064830152606081015160848301526080015160a482015260c40160a06040518083038186803b1580156142ab57600080fd5b505af41580156142bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142e391906154cf565b809650819750829550839a50849b5050505050508760ce60010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060ce60000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060d1600087815260200190815260200160002081905550836001600160a01b03167fd42b93f751df91c40b94860a26f5e43b9fc78089c1e3df5d4602eee07009e5c683876040516143a8929190918252602082015260400190565b60405180910390a260cd80546001600160801b03191690556143cb856001615a00565b60cc805461ffff191661ffff92909216919091179055506143ec3083614eab565b80156143fc576143fc83826132d6565b505050509193909250565b60cc546201000090046001600160681b03166001600160a01b0382161561444d5760cc8054600160781b600160e01b031916600160781b6001600160681b038416021790555b60cc805462010000600160781b031916905560cf80546001600160a01b03191690556001600160a01b03821615613bb357604051636c6fe87f60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073__$96b216381db19e3be8352ccbc8a6bfdf78$__9063d8dfd0fe9060240160206040518083038186803b1580156144f457600080fd5b505af4158015614508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452c919061541c565b9050336001600160a01b0316836001600160a01b03167f7e830f7c1771deb1bdb35c4a7e6051bbac32b376f7f4e4976b8618b0b11997f783604051612fde91815260200190565b835160009061ffff161580159061458e5750845161ffff1684115b156145d05760006145ad86602001516001600160681b03168585614f8a565b60408701519091506145c8906001600160801b03168261306d565b915050611186565b50505050604001516001600160801b031690565b33600090815260d26020526040812080546001600160801b03620100008204169061ffff16816146465760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b6044820152606401610e03565b60cc5461ffff16811061468e5760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b6044820152606401610e03565b33600090815260d260205260409020805462010000600160901b031916905560cd546146ca90600160801b90046001600160801b031683613079565b60cd80546001600160801b03928316600160801b029216919091179055600081815260d1602052604081205460c95461470d91859160ff61010090910416613339565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26147553084614fed565b600081116147975760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b6044820152606401610e03565b61118633826132d6565b6001600160a01b0383166148055760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e03565b6001600160a01b0382166148675760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e03565b6001600160a01b038316600090815260976020526040902054818110156148df5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e03565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290614916908490615a00565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161496291815260200190565b60405180910390a36140a9565b6040516001600160a01b03831660248201526044810182905261167c90849063a9059cbb60e01b90606401614072565b6000610e1f8284615b17565b6000610e1f8284615a18565b600054610100900460ff16806149d0575060005460ff16155b6149ec5760405162461bcd60e51b8152600401610e0390615673565b600054610100900460ff16158015614a0e576000805461ffff19166101011790555b600180558015612c26576000805461ff001916905550565b600054610100900460ff1680614a3f575060005460ff16155b614a5b5760405162461bcd60e51b8152600401610e0390615673565b600054610100900460ff16158015613444576000805461ffff19166101011790558015612c26576000805461ff001916905550565b600054610100900460ff1680614aa9575060005460ff16155b614ac55760405162461bcd60e51b8152600401610e0390615673565b600054610100900460ff16158015614ae7576000805461ffff19166101011790555b8251614afa90609a906020860190615246565b508151614b0e90609b906020850190615246565b50801561167c576000805461ff0019169055505050565b600054610100900460ff1680614b3e575060005460ff16155b614b5a5760405162461bcd60e51b8152600401610e0390615673565b600054610100900460ff16158015614b7c576000805461ffff19166101011790555b6134443361399d565b60d5546001600160a01b03166000614bb2614ba4620f42406064615b17565b60d95461332990869061499f565b9050614bc86001600160a01b038516838361496f565b60cc546001600160a01b038316907f8df5f80a19898219351b3c8e70c8cffe1adc78e2394d21dc2da56a39e5dabfe8908390614c0a9060019061ffff16615b36565b6040805192835261ffff90911660208301520160405180910390a250505050565b60d4805460009067ffffffffffffffff811115614c5857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015614c81578160200160208202803683370190505b509050600060e054614c9260995490565b614c9c9190615b59565b905060005b8354811015614d7e576000848281548110614ccc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050614cfa8361332988614cf485612550565b9061499f565b848381518110614d1a57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050614d6b81858481518110614d4a57634e487b7160e01b600052603260045260246000fd5b6020026020010151896001600160a01b031661496f9092919063ffffffff16565b5080614d7681615bd7565b915050614ca1565b5060cc547fe55fc5ddbb2bfc597b0e1d510ece6ff2733bd909a81db6e2b6e092aeda7af1c390859084908690614dba9060019061ffff16615b36565b604051614dca94939291906158d5565b60405180910390a15050505050565b6000614e2e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661513b9092919063ffffffff16565b80519091501561167c5780806020019051810190614e4c9190615400565b61167c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e03565b6001600160a01b038216614f015760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e03565b8060996000828254614f139190615a00565b90915550506001600160a01b03821660009081526097602052604081208054839290614f40908490615a00565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060018311614fd45760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b6044820152606401610e03565b61118683613329614fe685600a615a6f565b879061499f565b6001600160a01b03821661504d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610e03565b6001600160a01b038216600090815260976020526040902054818110156150c15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610e03565b6001600160a01b03831660009081526097602052604081208383039055609980548492906150f0908490615b59565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6060611186848460008585843b6151945760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e03565b600080866001600160a01b031685876040516151b09190615603565b60006040518083038185875af1925050503d80600081146151ed576040519150601f19603f3d011682016040523d82523d6000602084013e6151f2565b606091505b509150915061520282828661520d565b979650505050505050565b6060831561521c575081610e1f565b82511561522c5782518084602001fd5b8160405162461bcd60e51b8152600401610e03919061561f565b82805461525290615b9c565b90600052602060002090601f01602090048101928261527457600085556152ba565b82601f1061528d57805160ff19168380011785556152ba565b828001600101855582156152ba579182015b828111156152ba57825182559160200191906001019061529f565b506152c69291506152ca565b5090565b5b808211156152c657600081556001016152cb565b80356152ea81615d6a565b919050565b803563ffffffff811681146152ea57600080fd5b600060208284031215615314578081fd5b8135610e1f81615d6a565b60008060408385031215615331578081fd5b823561533c81615d6a565b9150602083013561534c81615d6a565b809150509250929050565b60008060006060848603121561536b578081fd5b833561537681615d6a565b9250602084013561538681615d6a565b929592945050506040919091013590565b600080604083850312156153a9578182fd5b82356153b481615d6a565b946020939093013593505050565b600080600080608085870312156153d7578081fd5b84516153e281615d6a565b60208601516040870151606090970151919890975090945092505050565b600060208284031215615411578081fd5b8151610e1f81615d7f565b60006020828403121561542d578081fd5b5051919050565b60008082840360e0811215615447578283fd5b833567ffffffffffffffff81111561545d578384fd5b84016101c0818703121561546f578384fd5b925060c0601f1982011215615482578182fd5b506020830190509250929050565b6000602082840312156154a1578081fd5b81356001600160801b0381168114610e1f578182fd5b6000602082840312156154c8578081fd5b5035919050565b600080600080600060a086880312156154e6578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60006020828403121561551f578081fd5b610e1f826152ef565b600060208284031215615539578081fd5b8151610e1f81615db7565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b803561557881615d7f565b15158252602081013561558a81615db7565b60ff16602083015260408101356155a081615d6a565b6001600160a01b0390811660408401526060820135906155bf82615d6a565b16606083015260808101356155d381615da2565b66ffffffffffffff16608083015260a08101356155ef81615d8d565b6001600160681b03811660a0840152505050565b60008251615615818460208701615b70565b9190910192915050565b602081526000825180602084015261563e816040850160208701615b70565b601f01601f19169190910160400192915050565b60208082526007908201526610b5b2b2b832b960c91b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f4d696e696d756d206465706f736974206e6f7420726561636865640000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600061010080835261578881840161577b886152df565b6001600160a01b03169052565b615794602087016152df565b6101206157ab818601836001600160a01b03169052565b6157b7604089016152df565b91506101406157d0818701846001600160a01b03169052565b610160925060608901358387015261018060808a0135818801526157f760a08b018b6159bb565b6101c06101a081818c01526158116102c08c018486615544565b935061582060c08f018f6159bb565b8c860360ff1901848e01529350615838858583615544565b94505061584760e08f016152df565b6001600160a01b0381166101e08d01529250615864898f016152df565b6001600160a01b0381166102008d01529850615881878f016152ef565b63ffffffff166102208c0152948d01356102408b01525050938a01356102608801528901356102808701528801356102a08601525091506158c79050602083018561556d565b8260e0830152949350505050565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015615915578451835293830193918301916001016158f9565b5050848103604086015286548082528785528285209183019350845b818110156159565782546001600160a01b031685529383019360019283019201615931565b50505061ffff8516606085015250905095945050505050565b6000808335601e19843603018112615985578283fd5b83018035915067ffffffffffffffff82111561599f578283fd5b6020019150368190038213156159b457600080fd5b9250929050565b6000808335601e198436030181126159d1578283fd5b830160208101925035905067ffffffffffffffff8111156159f157600080fd5b8036038313156159b457600080fd5b60008219821115615a1357615a13615c06565b500190565b600082615a2757615a27615c1c565b500490565b600181815b80851115615a67578160001904821115615a4d57615a4d615c06565b80851615615a5a57918102915b93841c9390800290615a31565b509250929050565b6000610e1f8383600082615a8557506001610d6f565b81615a9257506000610d6f565b8160018114615aa85760028114615ab257615ace565b6001915050610d6f565b60ff841115615ac357615ac3615c06565b50506001821b610d6f565b5060208310610133831016604e8410600b8410161715615af1575081810a610d6f565b615afb8383615a2c565b8060001904821115615b0f57615b0f615c06565b029392505050565b6000816000190483118215151615615b3157615b31615c06565b500290565b600061ffff83811690831681811015615b5157615b51615c06565b039392505050565b600082821015615b6b57615b6b615c06565b500390565b60005b83811015615b8b578181015183820152602001615b73565b838111156140a95750506000910152565b600181811c90821680615bb057607f821691505b60208210811415615bd157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615beb57615beb615c06565b5060010190565b600082615c0157615c01615c1c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008135610d6f81615d6a565b60008135610d6f81615d8d565b60008135610d6f81615da2565b8135615c6481615d7f565b815460ff19811691151560ff1691821783556020840135615c8481615db7565b61ff008160081b169050808361ffff198416171784556040850135615ca881615d6a565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b031617815560018101615d00615ce360608501615c32565b82546001600160a01b0319166001600160a01b0391909116178255565b615d39615d0f60808501615c4c565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b50613bb3615d4960a08401615c3f565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b0381168114612c2657600080fd5b8015158114612c2657600080fd5b6001600160681b0381168114612c2657600080fd5b66ffffffffffffff81168114612c2657600080fd5b60ff81168114612c2657600080fdfea264697066735822122042ddfeefb1741c8992492e73209bde0a15bc72e6187d94790bab5c9d4fbac16f64736f6c63430008040033",
  "libraries": {
    "VaultLifecycleTreasuryBare": "0xB4a1b54141cE6C70b40527CeBd6F00fF70d94eEf"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_gammaController": "is the contract address for opyn actions",
          "_gnosisEasyAuction": "is the contract address that facilitates gnosis auctions",
          "_marginPool": "is the contract address for providing collateral to opyn",
          "_oTokenFactory": "is the contract address for minting new opyn option types (strikes, asset, expiry)",
          "_usdc": "is the USDC contract",
          "_weth": "is the Wrapped Ether contract"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "is the amount of `asset` to deposit"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAuctionDuration(uint256)": {
        "params": {
          "newAuctionDuration": "is the auction duration"
        }
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setMaxDepositors(uint256)": {
        "params": {
          "newMaxDepositors": "is the new cap for number of depositors"
        }
      },
      "setMinDeposit(uint256)": {
        "params": {
          "newMinDeposit": "is the new minimum amount for deposit"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "newKeeper": "is the address of the new keeper"
        }
      },
      "setOptionsPremiumPricer(address)": {
        "params": {
          "newOptionsPremiumPricer": "is the address of the new strike selection contract"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "setPremiumDiscount(uint256)": {
        "params": {
          "newPremiumDiscount": "is the premium discount"
        }
      },
      "setStrikePrice(uint128)": {
        "params": {
          "strikePrice": "is the strike price of the new oTokens (decimals = 8)"
        }
      },
      "setStrikeSelection(address)": {
        "params": {
          "newStrikeSelection": "is the address of the new strike selection contract"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawInstantly(uint256)": {
        "params": {
          "amount": "is the amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELAY()": {
        "notice": "15 minute timelock between commitAndClose and rollToNexOption."
      },
      "OTOKEN_FACTORY()": {
        "notice": "OTOKEN_FACTORY is the factory contract used to spawn otokens. Used to lookup otokens."
      },
      "USDC()": {
        "notice": "USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "WETH()": {
        "notice": "WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "auctionDuration()": {
        "notice": "Auction duration"
      },
      "burnRemainingOTokens()": {
        "notice": "Burn the remaining oTokens left over from gnosis auction."
      },
      "cap()": {
        "notice": "Returns the maximum capacity of the vault in terms of the vault's asset"
      },
      "chargeAndDistribute()": {
        "notice": "Charge performance fee and distribute remaining to depositors addresses"
      },
      "commitAndClose()": {
        "notice": "Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious."
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "concludeOptionsSale()": {
        "notice": "Settles the round's Gnosis auction and distribute the premiums earned"
      },
      "constructor": {
        "notice": "Initializes the contract with immutable variables"
      },
      "currentOption()": {
        "notice": "Returns the options specification for the current round"
      },
      "currentOtokenPremium()": {
        "notice": "Current oToken premium"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "deposit(uint256)": {
        "notice": "Deposits the `asset` from msg.sender."
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "depositorsArray(uint256)": {
        "notice": "Array of depositors in the vault"
      },
      "depositorsMap(address)": {
        "notice": "Mapping of depositors in the vault"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,uint256,uint256,uint256),(bool,uint8,address,address,uint56,uint104))": {
        "notice": "Initializes the OptionVault contract with storage variables."
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "keeper()": {
        "notice": "role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens"
      },
      "lastQueuedWithdrawAmount()": {
        "notice": "Amount locked for scheduled withdrawals last week;"
      },
      "lastStrikeOverrideRound()": {
        "notice": "Last round id at which the strike was manually overridden"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss."
      },
      "maxDepositors()": {
        "notice": "Maximum number of depositors"
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "minDeposit()": {
        "notice": "Minimum amount to deposit"
      },
      "nextOption()": {
        "notice": "Returns the options specification for the next round"
      },
      "nextOptionReadyAt()": {
        "notice": "Returns the date and time for the next options sale"
      },
      "optionAuctionID()": {
        "notice": "Auction id of current option"
      },
      "optionState()": {
        "notice": "Vault's state of the options sold and the timelocked option"
      },
      "optionsPremiumPricer()": {
        "notice": "Logic contract used to price options"
      },
      "overriddenStrikePrice()": {
        "notice": "Price last overridden strike set to"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss."
      },
      "period()": {
        "notice": "Period between each options sale. Available options 7 (weekly), 14 (biweekly), 30 (monthly), 90 (quarterly), 180 (biannually)"
      },
      "premiumDiscount()": {
        "notice": "Premium discount on options we are selling (thousandths place: 000 - 999)"
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "rollToNextOption()": {
        "notice": "Rolls the vault's funds into a new short position."
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "setAuctionDuration(uint256)": {
        "notice": "Sets the new auction duration"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setMaxDepositors(uint256)": {
        "notice": "Set the maximum number of depositors"
      },
      "setMinDeposit(uint256)": {
        "notice": "Set the minimum deposit amount"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      },
      "setOptionsPremiumPricer(address)": {
        "notice": "Sets the new options premium pricer contract"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "setPremiumDiscount(uint256)": {
        "notice": "Sets the new discount on premiums for options we are selling"
      },
      "setStrikePrice(uint128)": {
        "notice": "Optionality to set strike price manually"
      },
      "setStrikeSelection(address)": {
        "notice": "Sets the new strike selection contract"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "startAuction()": {
        "notice": "Initiate the gnosis auction."
      },
      "strikeSelection()": {
        "notice": "Logic contract used to select strike prices"
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts locked into a short position"
      },
      "totalPending()": {
        "notice": "Returns total pending deposit for the current round"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawInstantly(uint256)": {
        "notice": "Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 179,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 230,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 993,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 169,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 299,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 301,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 303,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 305,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 846,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 16162,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "vaultParams",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(VaultParams)6582_storage"
      },
      {
        "astId": 16166,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "vaultState",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(VaultState)6600_storage"
      },
      {
        "astId": 16170,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "optionState",
        "offset": 0,
        "slot": "206",
        "type": "t_struct(OptionState)6589_storage"
      },
      {
        "astId": 16176,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)6607_storage)"
      },
      {
        "astId": 16181,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16187,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "withdrawals",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_struct(Withdrawal)6612_storage)"
      },
      {
        "astId": 16192,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "depositorsMap",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 16196,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "depositorsArray",
        "offset": 0,
        "slot": "212",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 16199,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "213",
        "type": "t_address"
      },
      {
        "astId": 16202,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "keeper",
        "offset": 0,
        "slot": "214",
        "type": "t_address"
      },
      {
        "astId": 16205,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "optionsPremiumPricer",
        "offset": 0,
        "slot": "215",
        "type": "t_address"
      },
      {
        "astId": 16208,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "strikeSelection",
        "offset": 0,
        "slot": "216",
        "type": "t_address"
      },
      {
        "astId": 16211,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 16214,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 16217,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "premiumDiscount",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 16220,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "currentOtokenPremium",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 16223,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "overriddenStrikePrice",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 16226,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "auctionDuration",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 16229,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "optionAuctionID",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 16232,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 16235,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "period",
        "offset": 0,
        "slot": "225",
        "type": "t_uint256"
      },
      {
        "astId": 16238,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "maxDepositors",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 16241,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "minDeposit",
        "offset": 0,
        "slot": "227",
        "type": "t_uint256"
      },
      {
        "astId": 16244,
        "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
        "label": "lastStrikeOverrideRound",
        "offset": 0,
        "slot": "228",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)6607_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)6607_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)6612_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)6612_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositReceipt)6607_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 6602,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6604,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6606,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)6589_storage": {
        "encoding": "inplace",
        "label": "struct Vault.OptionState",
        "members": [
          {
            "astId": 6584,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "nextOption",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6586,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "currentOption",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6588,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "nextOptionReadyAt",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultParams)6582_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 6571,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "isPut",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6573,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "decimals",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6575,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "asset",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6577,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6579,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "minimumSupply",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          },
          {
            "astId": 6581,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "cap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VaultState)6600_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 6591,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6593,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6595,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6597,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6599,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Withdrawal)6612_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 6609,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6611,
            "contract": "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol:RibbonTreasuryVault",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}