{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/GammaInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nlibrary GammaTypes {\r\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\r\n    struct Vault {\r\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\r\n        address[] shortOtokens;\r\n        // addresses of oTokens a user has bought and deposited in this vault\r\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\r\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\r\n        // in order to write oTokens against (i.e. in spreads)\r\n        address[] longOtokens;\r\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\r\n        address[] collateralAssets;\r\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\r\n        uint256[] shortAmounts;\r\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\r\n        uint256[] longAmounts;\r\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\r\n        uint256[] collateralAmounts;\r\n    }\r\n}\r\n\r\ninterface IOtoken {\r\n    function underlyingAsset() external view returns (address);\r\n\r\n    function strikeAsset() external view returns (address);\r\n\r\n    function collateralAsset() external view returns (address);\r\n\r\n    function strikePrice() external view returns (uint256);\r\n\r\n    function expiryTimestamp() external view returns (uint256);\r\n\r\n    function isPut() external view returns (bool);\r\n}\r\n\r\ninterface IOtokenFactory {\r\n    function getOtoken(\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external view returns (address);\r\n\r\n    function createOtoken(\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external returns (address);\r\n\r\n    function getTargetOtokenAddress(\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external view returns (address);\r\n\r\n    event OtokenCreated(\r\n        address tokenAddress,\r\n        address creator,\r\n        address indexed underlying,\r\n        address indexed strike,\r\n        address indexed collateral,\r\n        uint256 strikePrice,\r\n        uint256 expiry,\r\n        bool isPut\r\n    );\r\n}\r\n\r\ninterface IController {\r\n    // possible actions that can be performed\r\n    enum ActionType {\r\n        OpenVault,\r\n        MintShortOption,\r\n        BurnShortOption,\r\n        DepositLongOption,\r\n        WithdrawLongOption,\r\n        DepositCollateral,\r\n        WithdrawCollateral,\r\n        SettleVault,\r\n        Redeem,\r\n        Call,\r\n        Liquidate\r\n    }\r\n\r\n    struct ActionArgs {\r\n        // type of action that is being performed on the system\r\n        ActionType actionType;\r\n        // address of the account owner\r\n        address owner;\r\n        // address which we move assets from or to (depending on the action type)\r\n        address secondAddress;\r\n        // asset that is to be transfered\r\n        address asset;\r\n        // index of the vault that is to be modified (if any)\r\n        uint256 vaultId;\r\n        // amount of asset that is to be transfered\r\n        uint256 amount;\r\n        // each vault can hold multiple short / long / collateral assets\r\n        // but we are restricting the scope to only 1 of each in this version\r\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\r\n        uint256 index;\r\n        // any other data that needs to be passed in for arbitrary function calls\r\n        bytes data;\r\n    }\r\n\r\n    struct RedeemArgs {\r\n        // address to which we pay out the oToken proceeds\r\n        address receiver;\r\n        // oToken that is to be redeemed\r\n        address otoken;\r\n        // amount of oTokens that is to be redeemed\r\n        uint256 amount;\r\n    }\r\n\r\n    function getPayout(address _otoken, uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function operate(ActionArgs[] calldata _actions) external;\r\n\r\n    function getAccountVaultCounter(address owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function getVault(address _owner, uint256 _vaultId)\r\n        external\r\n        view\r\n        returns (GammaTypes.Vault memory);\r\n\r\n    function getProceed(address _owner, uint256 _vaultId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function isSettlementAllowed(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        uint256 _expiry\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface IOracle {\r\n    function setAssetPricer(address _asset, address _pricer) external;\r\n\r\n    function updateAssetPricer(address _asset, address _pricer) external;\r\n\r\n    function getPrice(address _asset) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/utils/Swap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Source: https://github.com/airswap/airswap-protocols/blob/main/source/swap/contracts/Swap.sol\r\n\r\npragma solidity =0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../interfaces/ISwap.sol\";\r\nimport \"../storage/SwapStorage.sol\";\r\nimport {\r\n    ReentrancyGuardUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {\r\n    ERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\r\nimport {IOtoken} from \"../interfaces/GammaInterface.sol\";\r\n\r\ncontract Swap is\r\n    ISwap,\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable,\r\n    SwapStorage\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public immutable DOMAIN_CHAIN_ID;\r\n\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\r\n            abi.encodePacked(\r\n                \"EIP712Domain(\",\r\n                \"string name,\",\r\n                \"string version,\",\r\n                \"uint256 chainId,\",\r\n                \"address verifyingContract\",\r\n                \")\"\r\n            )\r\n        );\r\n\r\n    bytes32 public constant BID_TYPEHASH =\r\n        keccak256(\r\n            abi.encodePacked(\r\n                \"Bid(\",\r\n                \"uint256 swapId,\",\r\n                \"uint256 nonce,\",\r\n                \"address signerWallet,\",\r\n                \"uint256 sellAmount,\",\r\n                \"uint256 buyAmount,\",\r\n                \"address referrer\",\r\n                \")\"\r\n            )\r\n        );\r\n\r\n    uint256 public constant MAX_PERCENTAGE = 1000000;\r\n    uint256 public constant MAX_FEE = 125000; // 12.5%\r\n    uint256 internal constant MAX_ERROR_COUNT = 10;\r\n    uint256 internal constant OTOKEN_DECIMALS = 8;\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR\r\n     ***********************************************/\r\n\r\n    constructor() {\r\n        uint256 currentChainId = getChainId();\r\n        DOMAIN_CHAIN_ID = currentChainId;\r\n    }\r\n\r\n    /************************************************\r\n     *  INITIALIZATION\r\n     ***********************************************/\r\n\r\n    function initialize(\r\n        string memory _domainName,\r\n        string memory _domainVersion,\r\n        address _owner\r\n    ) external initializer {\r\n        require(bytes(_domainName).length > 0, \"!_domainName\");\r\n        require(bytes(_domainVersion).length > 0, \"!_domainVersion\");\r\n        require(_owner != address(0), \"!_owner\");\r\n\r\n        __ReentrancyGuard_init();\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n\r\n        DOMAIN_NAME = keccak256(bytes(_domainName));\r\n        DOMAIN_VERSION = keccak256(bytes(_domainVersion));\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                DOMAIN_NAME,\r\n                DOMAIN_VERSION,\r\n                DOMAIN_CHAIN_ID,\r\n                this\r\n            )\r\n        );\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTER\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the referral fee for a specific referrer\r\n     * @param referrer is the address of the referrer\r\n     * @param fee is the fee in percent in 2 decimals\r\n     */\r\n    function setFee(address referrer, uint256 fee) external onlyOwner {\r\n        require(referrer != address(0), \"Referrer cannot be the zero address\");\r\n        require(fee < MAX_FEE, \"Fee exceeds maximum\");\r\n\r\n        referralFees[referrer] = fee;\r\n\r\n        emit SetFee(referrer, fee);\r\n    }\r\n\r\n    /************************************************\r\n     *  OFFER CREATION AND SETTLEMENT\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Create a new offer available for swap\r\n     * @param oToken token offered by seller\r\n     * @param biddingToken token asked by seller\r\n     * @param minPrice minimum price of oToken denominated in biddingToken\r\n     * @param minBidSize minimum amount of oToken requested in a single bid\r\n     * @param totalSize amount of oToken offered by seller\r\n     */\r\n    function createOffer(\r\n        address oToken,\r\n        address biddingToken,\r\n        uint96 minPrice,\r\n        uint96 minBidSize,\r\n        uint128 totalSize\r\n    ) external override returns (uint256 swapId) {\r\n        require(oToken != address(0), \"oToken cannot be the zero address\");\r\n        require(\r\n            biddingToken != address(0),\r\n            \"BiddingToken cannot be the zero address\"\r\n        );\r\n        require(minPrice > 0, \"MinPrice must be larger than zero\");\r\n        require(minBidSize > 0, \"MinBidSize must be larger than zero\");\r\n        require(minBidSize <= totalSize, \"MinBidSize exceeds total size\");\r\n\r\n        if (IOtoken(oToken).isPut()) {\r\n            require(\r\n                priceFeeds[IOtoken(oToken).underlyingAsset()] != address(0),\r\n                \"No price feed set\"\r\n            );\r\n        }\r\n\r\n        // Check seller allowance\r\n        uint256 sellerAllowance =\r\n            IERC20(oToken).allowance(msg.sender, address(this));\r\n        require(sellerAllowance >= totalSize, \"Seller allowance low\");\r\n\r\n        // Check seller balance\r\n        uint256 sellerBalance = IERC20(oToken).balanceOf(msg.sender);\r\n        require(sellerBalance >= totalSize, \"Seller balance low\");\r\n\r\n        offersCounter += 1;\r\n\r\n        swapId = offersCounter;\r\n\r\n        swapOffers[swapId].seller = msg.sender;\r\n        swapOffers[swapId].oToken = oToken;\r\n        swapOffers[swapId].biddingToken = biddingToken;\r\n        swapOffers[swapId].minBidSize = minBidSize;\r\n        swapOffers[swapId].minPrice = minPrice;\r\n        swapOffers[swapId].totalSize = totalSize;\r\n        swapOffers[swapId].availableSize = totalSize;\r\n        // We warm the storage slot with 1 wei so we avoid a cold SSTORE\r\n        swapOffers[swapId].totalSales = 1;\r\n\r\n        emit NewOffer(\r\n            swapId,\r\n            msg.sender,\r\n            oToken,\r\n            biddingToken,\r\n            minPrice,\r\n            minBidSize,\r\n            totalSize\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Settles the swap offering by iterating through the bids\r\n     * @param swapId unique identifier of the swap offer\r\n     * @param bids bids for swaps\r\n     */\r\n    function settleOffer(uint256 swapId, Bid[] calldata bids)\r\n        external\r\n        override\r\n        nonReentrant\r\n    {\r\n        Offer storage offer = swapOffers[swapId];\r\n\r\n        address seller = offer.seller;\r\n        require(\r\n            seller == msg.sender,\r\n            \"Only seller can settle or offer doesn't exist\"\r\n        );\r\n        require(offer.availableSize > 0, \"Offer fully settled\");\r\n\r\n        uint256 totalSales;\r\n        OfferDetails memory offerDetails;\r\n        offerDetails.seller = seller;\r\n        offerDetails.oToken = offer.oToken;\r\n        offerDetails.biddingToken = offer.biddingToken;\r\n        offerDetails.minPrice = offer.minPrice;\r\n        offerDetails.minBidSize = offer.minBidSize;\r\n\r\n        for (uint256 i = 0; i < bids.length; i++) {\r\n            require(\r\n                swapId == bids[i].swapId,\r\n                \"Offer and bid swapId mismatched\"\r\n            );\r\n\r\n            _swap(offerDetails, offer, bids[i]);\r\n            totalSales += bids[i].sellAmount;\r\n        }\r\n\r\n        bool fullySettled = offer.availableSize == 0;\r\n\r\n        // Deduct the initial 1 wei offset if offer is fully settled\r\n        offer.totalSales += totalSales - (fullySettled ? 1 : 0);\r\n\r\n        if (fullySettled) {\r\n            offer.seller = address(0);\r\n            offer.oToken = address(0);\r\n            offer.biddingToken = address(0);\r\n            offer.minBidSize = 0;\r\n            offer.minPrice = 0;\r\n\r\n            emit SettleOffer(swapId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Authorize a signer\r\n     * @param signer address Wallet of the signer to authorize\r\n     * @dev Emits an Authorize event\r\n     */\r\n    function authorize(address signer) external override {\r\n        require(signer != address(0), \"SIGNER_INVALID\");\r\n        authorized[msg.sender] = signer;\r\n        emit Authorize(signer, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke the signer\r\n     * @dev Emits a Revoke event\r\n     */\r\n    function revoke() external override {\r\n        address tmp = authorized[msg.sender];\r\n        delete authorized[msg.sender];\r\n        emit Revoke(tmp, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel one or more nonces\r\n     * @dev Cancelled nonces are marked as used\r\n     * @dev Emits a Cancel event\r\n     * @dev Out of gas may occur in arrays of length > 400\r\n     * @param nonces uint256[] List of nonces to cancel\r\n     */\r\n    function cancelNonce(uint256[] calldata nonces) external override {\r\n        for (uint256 i = 0; i < nonces.length; i++) {\r\n            uint256 nonce = nonces[i];\r\n            if (_markNonceAsUsed(msg.sender, nonce)) {\r\n                emit Cancel(nonce, msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************\r\n     *  PUBLIC VIEW FUNCTIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Validates Swap bid for any potential errors\r\n     * @param bid Bid struct containing bid details\r\n     * @return tuple of error count and bytes32[] memory array of error messages\r\n     */\r\n    function check(Bid calldata bid)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256, bytes32[] memory)\r\n    {\r\n        Offer memory offer = swapOffers[bid.swapId];\r\n        require(offer.seller != address(0), \"Offer does not exist\");\r\n\r\n        bytes32[] memory errors = new bytes32[](MAX_ERROR_COUNT);\r\n\r\n        uint256 errCount;\r\n\r\n        // Check signature\r\n        address signatory = _getSignatory(bid);\r\n\r\n        if (signatory == address(0)) {\r\n            errors[errCount] = \"SIGNATURE_INVALID\";\r\n            errCount++;\r\n        }\r\n\r\n        if (\r\n            bid.signerWallet != signatory &&\r\n            authorized[bid.signerWallet] != signatory\r\n        ) {\r\n            errors[errCount] = \"UNAUTHORIZED\";\r\n            errCount++;\r\n        }\r\n\r\n        // Check nonce\r\n        if (nonceUsed(signatory, bid.nonce)) {\r\n            errors[errCount] = \"NONCE_ALREADY_USED\";\r\n            errCount++;\r\n        }\r\n\r\n        // Check bid size\r\n        if (bid.buyAmount < offer.minBidSize) {\r\n            errors[errCount] = \"BID_TOO_SMALL\";\r\n            errCount++;\r\n        }\r\n        if (bid.buyAmount > offer.availableSize) {\r\n            errors[errCount] = \"BID_EXCEED_AVAILABLE_SIZE\";\r\n            errCount++;\r\n        }\r\n\r\n        // Check bid price\r\n        uint256 bidPrice =\r\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\r\n        if (bidPrice < offer.minPrice) {\r\n            errors[errCount] = \"PRICE_TOO_LOW\";\r\n            errCount++;\r\n        }\r\n\r\n        // Check signer allowance\r\n        uint256 signerAllowance =\r\n            IERC20(offer.biddingToken).allowance(\r\n                bid.signerWallet,\r\n                address(this)\r\n            );\r\n        if (signerAllowance < bid.sellAmount) {\r\n            errors[errCount] = \"SIGNER_ALLOWANCE_LOW\";\r\n            errCount++;\r\n        }\r\n\r\n        // Check signer balance\r\n        uint256 signerBalance =\r\n            IERC20(offer.biddingToken).balanceOf(bid.signerWallet);\r\n        if (signerBalance < bid.sellAmount) {\r\n            errors[errCount] = \"SIGNER_BALANCE_LOW\";\r\n            errCount++;\r\n        }\r\n\r\n        return (errCount, errors);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the average settlement price for a swap offer\r\n     * @param swapId unique identifier of the swap offer\r\n     */\r\n    function averagePriceForOffer(uint256 swapId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        Offer storage offer = swapOffers[swapId];\r\n        require(offer.totalSize != 0, \"Offer does not exist\");\r\n\r\n        uint256 availableSize = offer.availableSize;\r\n\r\n        // Deduct the initial 1 wei offset if offer is not fully settled\r\n        uint256 adjustment = availableSize != 0 ? 1 : 0;\r\n\r\n        return\r\n            ((offer.totalSales - adjustment) * (10**8)) /\r\n            (offer.totalSize - availableSize);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if the nonce has been used\r\n     * @param signer address Address of the signer\r\n     * @param nonce uint256 Nonce being checked\r\n     */\r\n    function nonceUsed(address signer, uint256 nonce)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 groupKey = nonce / 256;\r\n        uint256 indexInGroup = nonce % 256;\r\n        return (_nonceGroups[signer][groupKey] >> indexInGroup) & 1 == 1;\r\n    }\r\n\r\n    /************************************************\r\n     *  INTERNAL FUNCTIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Swap Atomic ERC20 Swap\r\n     * @param details Details of offering\r\n     * @param offer Offer struct containing offer details\r\n     * @param bid Bid struct containing bid details\r\n     */\r\n    function _swap(\r\n        OfferDetails memory details,\r\n        Offer storage offer,\r\n        Bid calldata bid\r\n    ) internal {\r\n        require(DOMAIN_CHAIN_ID == getChainId(), \"CHAIN_ID_CHANGED\");\r\n\r\n        address signatory = _getSignatory(bid);\r\n\r\n        require(signatory != address(0), \"SIGNATURE_INVALID\");\r\n\r\n        if (bid.signerWallet != signatory) {\r\n            require(authorized[bid.signerWallet] == signatory, \"UNAUTHORIZED\");\r\n        }\r\n\r\n        require(_markNonceAsUsed(signatory, bid.nonce), \"NONCE_ALREADY_USED\");\r\n        require(\r\n            bid.buyAmount <= offer.availableSize,\r\n            \"BID_EXCEED_AVAILABLE_SIZE\"\r\n        );\r\n        require(bid.buyAmount >= details.minBidSize, \"BID_TOO_SMALL\");\r\n\r\n        // Ensure min. price is met\r\n        uint256 bidPrice =\r\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\r\n        require(bidPrice >= details.minPrice, \"PRICE_TOO_LOW\");\r\n\r\n        // don't have to do a uint128 check because we already check\r\n        // that bid.buyAmount <= offer.availableSize\r\n        offer.availableSize -= uint128(bid.buyAmount);\r\n\r\n        // Transfer token from sender to signer\r\n        IERC20(details.oToken).safeTransferFrom(\r\n            details.seller,\r\n            bid.signerWallet,\r\n            bid.buyAmount\r\n        );\r\n\r\n        // Transfer to referrer if any\r\n        uint256 feeAmount;\r\n        if (bid.referrer != address(0)) {\r\n            uint256 feePercent = referralFees[bid.referrer];\r\n\r\n            if (feePercent > 0) {\r\n                feeAmount = calculateReferralFee(\r\n                    details.oToken,\r\n                    feePercent,\r\n                    bid.buyAmount,\r\n                    bid.sellAmount\r\n                );\r\n\r\n                IERC20(details.biddingToken).safeTransferFrom(\r\n                    bid.signerWallet,\r\n                    bid.referrer,\r\n                    feeAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        // Transfer token from signer to recipient\r\n        IERC20(details.biddingToken).safeTransferFrom(\r\n            bid.signerWallet,\r\n            details.seller,\r\n            bid.sellAmount - feeAmount\r\n        );\r\n\r\n        // Emit a Swap event\r\n        emit Swap(\r\n            bid.swapId,\r\n            bid.nonce,\r\n            bid.signerWallet,\r\n            bid.sellAmount,\r\n            bid.buyAmount,\r\n            bid.referrer,\r\n            feeAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Marks a nonce as used for the given signer\r\n     * @param signer address Address of the signer for which to mark the nonce as used\r\n     * @param nonce uint256 Nonce to be marked as used\r\n     * @return bool True if the nonce was not marked as used already\r\n     */\r\n    function _markNonceAsUsed(address signer, uint256 nonce)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        uint256 groupKey = nonce / 256;\r\n        uint256 indexInGroup = nonce % 256;\r\n        uint256 group = _nonceGroups[signer][groupKey];\r\n\r\n        // If it is already used, return false\r\n        if ((group >> indexInGroup) & 1 == 1) {\r\n            return false;\r\n        }\r\n\r\n        _nonceGroups[signer][groupKey] = group | (uint256(1) << indexInGroup);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Recover the signatory from a signature\r\n     * @param bid Bid struct containing bid details\r\n     */\r\n    function _getSignatory(Bid calldata bid) internal view returns (address) {\r\n        return\r\n            ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19\\x01\",\r\n                        DOMAIN_SEPARATOR,\r\n                        keccak256(\r\n                            abi.encode(\r\n                                BID_TYPEHASH,\r\n                                bid.swapId,\r\n                                bid.nonce,\r\n                                bid.signerWallet,\r\n                                bid.sellAmount,\r\n                                bid.buyAmount,\r\n                                bid.referrer\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                bid.v,\r\n                bid.r,\r\n                bid.s\r\n            );\r\n    }\r\n\r\n    /**\r\n     * This function assumes that all CALL premiums are denominated in the Offer.biddingToken\r\n     * This could easily change if we enabled Paradigm for Treasury - Calls are sold for USDC.\r\n     * It assumes that all PUT premiums are denominated in USDC.\r\n     */\r\n    function calculateReferralFee(\r\n        address otokenAddress,\r\n        uint256 feePercent,\r\n        uint256 numContracts,\r\n        uint256 premium\r\n    ) public view returns (uint256) {\r\n        IOtoken otoken = IOtoken(otokenAddress);\r\n        uint256 maxFee = (premium * MAX_FEE) / MAX_PERCENTAGE;\r\n        uint256 fee;\r\n\r\n        if (otoken.isPut()) {\r\n            uint256 marketPrice = getMarketPrice(otoken.underlyingAsset());\r\n            // both numContracts and marketPrice are 10**8\r\n            // then you scale it down to 10**6 because of USDC\r\n            uint256 notional = (numContracts * marketPrice) / 10**10;\r\n            fee = (notional * feePercent) / MAX_PERCENTAGE;\r\n        } else {\r\n            IERC20Detailed underlying =\r\n                IERC20Detailed(otoken.underlyingAsset());\r\n            uint256 underlyingDecimals = underlying.decimals();\r\n            uint256 numContractsInUnderlying;\r\n            if (underlyingDecimals < 8) {\r\n                numContractsInUnderlying =\r\n                    numContracts /\r\n                    10**(underlyingDecimals - 8);\r\n            } else {\r\n                numContractsInUnderlying =\r\n                    numContracts *\r\n                    10**(underlyingDecimals - 8);\r\n            }\r\n            fee = (numContractsInUnderlying * feePercent) / MAX_PERCENTAGE;\r\n        }\r\n\r\n        if (fee > maxFee) {\r\n            return maxFee;\r\n        }\r\n        return fee;\r\n    }\r\n\r\n    function getMarketPrice(address asset) public view returns (uint256) {\r\n        address feed = priceFeeds[asset];\r\n        require(feed != address(0), \"NO_PRICE_FEED_SET\");\r\n        (\r\n            ,\r\n            /*uint80 roundID*/\r\n            int256 price,\r\n            ,\r\n            ,\r\n\r\n        ) =\r\n            /*uint startedAt*/\r\n            /*uint timeStamp*/\r\n            /*uint80 answeredInRound*/\r\n            AggregatorV3Interface(feed).latestRoundData();\r\n\r\n        require(price > 0, \"INVALID_PRICE_FEED\");\r\n\r\n        return uint256(price);\r\n    }\r\n\r\n    function setPriceFeed(address asset, address aggregator)\r\n        external\r\n        onlyOwner\r\n    {\r\n        priceFeeds[asset] = aggregator;\r\n        emit SetPriceFeed(asset, aggregator);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current chainId using the chainid opcode\r\n     * @return id uint256 The chain id\r\n     */\r\n    function getChainId() internal view returns (uint256 id) {\r\n        // no-inline-assembly\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.4;\r\n\r\ninterface ISwap {\r\n    struct Offer {\r\n        // 32 byte slot 1, partial fill\r\n        // Seller wallet address\r\n        address seller;\r\n        // 32 byte slot 2\r\n        // Addess of oToken\r\n        address oToken;\r\n        // Price per oToken denominated in biddingToken\r\n        uint96 minPrice;\r\n        // 32 byte slot 3\r\n        // ERC20 Token to bid for oToken\r\n        address biddingToken;\r\n        // Minimum oToken amount acceptable for a single bid\r\n        uint96 minBidSize;\r\n        // 32 byte slot 4\r\n        // Total available oToken amount\r\n        uint128 totalSize;\r\n        // Remaining available oToken amount\r\n        // This figure is updated after each successfull swap\r\n        uint128 availableSize;\r\n        // 32 byte slot 5\r\n        // Amount of biddingToken received\r\n        // This figure is updated after each successfull swap\r\n        uint256 totalSales;\r\n    }\r\n\r\n    struct Bid {\r\n        // ID assigned to offers\r\n        uint256 swapId;\r\n        // Number only used once for each wallet\r\n        uint256 nonce;\r\n        // Signer wallet address\r\n        address signerWallet;\r\n        // Amount of biddingToken offered by signer\r\n        uint256 sellAmount;\r\n        // Amount of oToken requested by signer\r\n        uint256 buyAmount;\r\n        // Referrer wallet address\r\n        address referrer;\r\n        // Signature recovery id\r\n        uint8 v;\r\n        // r portion of the ECSDA signature\r\n        bytes32 r;\r\n        // s portion of the ECSDA signature\r\n        bytes32 s;\r\n    }\r\n\r\n    struct OfferDetails {\r\n        // Seller wallet address\r\n        address seller;\r\n        // Addess of oToken\r\n        address oToken;\r\n        // Price per oToken denominated in biddingToken\r\n        uint256 minPrice;\r\n        // ERC20 Token to bid for oToken\r\n        address biddingToken;\r\n        // Minimum oToken amount acceptable for a single bid\r\n        uint256 minBidSize;\r\n    }\r\n\r\n    event Swap(\r\n        uint256 indexed swapId,\r\n        uint256 nonce,\r\n        address indexed signerWallet,\r\n        uint256 signerAmount,\r\n        uint256 sellerAmount,\r\n        address referrer,\r\n        uint256 feeAmount\r\n    );\r\n\r\n    event NewOffer(\r\n        uint256 swapId,\r\n        address seller,\r\n        address oToken,\r\n        address biddingToken,\r\n        uint256 minPrice,\r\n        uint256 minBidSize,\r\n        uint256 totalSize\r\n    );\r\n\r\n    event SetFee(address referrer, uint256 fee);\r\n\r\n    event SetPriceFeed(address asset, address aggregator);\r\n\r\n    event SettleOffer(uint256 swapId);\r\n\r\n    event Cancel(uint256 indexed nonce, address indexed signerWallet);\r\n\r\n    event Authorize(address indexed signer, address indexed signerWallet);\r\n\r\n    event Revoke(address indexed signer, address indexed signerWallet);\r\n\r\n    function createOffer(\r\n        address oToken,\r\n        address biddingToken,\r\n        uint96 minPrice,\r\n        uint96 minBidSize,\r\n        uint128 totalSize\r\n    ) external returns (uint256 swapId);\r\n\r\n    function settleOffer(uint256 swapId, Bid[] calldata bids) external;\r\n\r\n    function cancelNonce(uint256[] calldata nonces) external;\r\n\r\n    function check(Bid calldata bid)\r\n        external\r\n        view\r\n        returns (uint256, bytes32[] memory);\r\n\r\n    function averagePriceForOffer(uint256 swapId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function authorize(address sender) external;\r\n\r\n    function revoke() external;\r\n\r\n    function nonceUsed(address, uint256) external view returns (bool);\r\n}\r\n"
    },
    "contracts/storage/SwapStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport \"../interfaces/ISwap.sol\";\r\n\r\nabstract contract SwapStorageV1 {\r\n    // Keccak256 of domain name for signature verification\r\n    bytes32 public DOMAIN_NAME;\r\n    // Keccak256 of domain version for signature verification\r\n    bytes32 public DOMAIN_VERSION;\r\n    // Keccak256 of abi-encoded domain parameters for signature verification\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    // Counter to keep track number of offers\r\n    uint256 public offersCounter;\r\n    // Mapping of swap offer details for a given swapId\r\n    mapping(uint256 => ISwap.Offer) public swapOffers;\r\n    // Mapping of referral fees for a given address, 1000000 = 100%\r\n    mapping(address => uint256) public referralFees;\r\n    // Mapping of authorized delegate for a given address\r\n    mapping(address => address) public authorized;\r\n    /**\r\n     * @notice Double mapping of signers to nonce groups to nonce states\r\n     * @dev The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same key\r\n     * @dev The nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\r\n     */\r\n    mapping(address => mapping(uint256 => uint256)) internal _nonceGroups;\r\n}\r\n\r\nabstract contract SwapStorageV2 {\r\n    // Price feed for looking up value of asset\r\n    mapping(address => address) public priceFeeds;\r\n}\r\n\r\n// We are following Compound's method of upgrading new contract implementations\r\n// When we need to add new storage variables, we create a new version of SwapStorage\r\n// e.g. SwapStorage<versionNumber>, so finally it would look like\r\n// contract SwapStorage is SwapStorageV1, SwapStorageV2\r\nabstract contract SwapStorage is SwapStorageV1, SwapStorageV2 {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/interfaces/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IERC20Detailed is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function name() external view returns (string calldata);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/vaults/TreasuryVault/RibbonTreasuryVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {\r\n    ReentrancyGuardUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {\r\n    ERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\nimport {Vault} from \"../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleTreasuryBare\r\n} from \"../../libraries/VaultLifecycleTreasuryBare.sol\";\r\nimport {\r\n    RibbonTreasuryVaultStorage\r\n} from \"../../storage/RibbonTreasuryVaultStorage.sol\";\r\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\r\nimport {IWETH} from \"../../interfaces/IWETH.sol\";\r\nimport {GnosisAuction} from \"../../libraries/GnosisAuction.sol\";\r\nimport {IERC20Detailed} from \"../../interfaces/IERC20Detailed.sol\";\r\n\r\ncontract RibbonTreasuryVault is\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable,\r\n    ERC20Upgradeable,\r\n    RibbonTreasuryVaultStorage\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public immutable WETH;\r\n\r\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    address public immutable USDC;\r\n\r\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\r\n    uint256 public constant DELAY = 0;\r\n\r\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\r\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\r\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\r\n\r\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\r\n    // which allows users to perform multiple actions on their vaults\r\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\r\n    address public immutable GAMMA_CONTROLLER;\r\n\r\n    // MARGIN_POOL is Gamma protocol's collateral pool.\r\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\r\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\r\n    address public immutable MARGIN_POOL;\r\n\r\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\r\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\r\n    address public immutable GNOSIS_EASY_AUCTION;\r\n\r\n    /// OTOKEN_FACTORY is the factory contract used to spawn otokens. Used to lookup otokens.\r\n    address public immutable OTOKEN_FACTORY;\r\n\r\n    // The minimum duration for an option auction.\r\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\r\n\r\n    // The minimum amount above which premium distribution will occur during commitAndClose\r\n    uint256 private constant MIN_DUST_AMOUNT = 10000000;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event Deposit(address indexed account, uint256 amount, uint256 round);\r\n\r\n    event InitiateWithdraw(\r\n        address indexed account,\r\n        uint256 shares,\r\n        uint256 round\r\n    );\r\n\r\n    event Redeem(address indexed account, uint256 share, uint256 round);\r\n\r\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\r\n\r\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\r\n\r\n    event CapSet(uint256 oldCap, uint256 newCap);\r\n\r\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\r\n\r\n    event CollectManagementFee(\r\n        uint256 managementFee,\r\n        uint256 round,\r\n        address indexed feeRecipient\r\n    );\r\n\r\n    event CollectPerformanceFee(\r\n        uint256 performanceFee,\r\n        uint256 round,\r\n        address indexed feeRecipient\r\n    );\r\n\r\n    event DistributePremium(\r\n        uint256 amount,\r\n        uint256[] amounts,\r\n        address[] recipients,\r\n        uint256 round\r\n    );\r\n\r\n    event OpenShort(\r\n        address indexed options,\r\n        uint256 depositAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event CloseShort(\r\n        address indexed options,\r\n        uint256 withdrawAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\r\n\r\n    event PremiumDiscountSet(\r\n        uint256 premiumDiscount,\r\n        uint256 newPremiumDiscount\r\n    );\r\n\r\n    event AuctionDurationSet(\r\n        uint256 auctionDuration,\r\n        uint256 newAuctionDuration\r\n    );\r\n\r\n    event InstantWithdraw(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n\r\n    event InitiateGnosisAuction(\r\n        address indexed auctioningToken,\r\n        address indexed biddingToken,\r\n        uint256 auctionCounter,\r\n        address indexed manager\r\n    );\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _oTokenFactory,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _gnosisEasyAuction\r\n    ) {\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_usdc != address(0), \"!_usdc\");\r\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\r\n        require(_gammaController != address(0), \"!_gammaController\");\r\n        require(_marginPool != address(0), \"!_marginPool\");\r\n        require(_gnosisEasyAuction != address(0), \"!_gnosisEasyAuction\");\r\n\r\n        WETH = _weth;\r\n        USDC = _usdc;\r\n        OTOKEN_FACTORY = _oTokenFactory;\r\n        GAMMA_CONTROLLER = _gammaController;\r\n        MARGIN_POOL = _marginPool;\r\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     */\r\n    function initialize(\r\n        VaultLifecycleTreasuryBare.InitParams calldata _initParams,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external initializer {\r\n        VaultLifecycleTreasuryBare.verifyInitializerParams(\r\n            _initParams,\r\n            _vaultParams,\r\n            MIN_AUCTION_DURATION\r\n        );\r\n\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_initParams._tokenName, _initParams._tokenSymbol);\r\n        __Ownable_init();\r\n        transferOwnership(_initParams._owner);\r\n\r\n        keeper = _initParams._keeper;\r\n        period = _initParams._period;\r\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\r\n        strikeSelection = _initParams._strikeSelection;\r\n        premiumDiscount = _initParams._premiumDiscount;\r\n        auctionDuration = _initParams._auctionDuration;\r\n        feeRecipient = _initParams._feeRecipient;\r\n        performanceFee = _initParams._performanceFee;\r\n        managementFee = _perRoundManagementFee(_initParams._managementFee);\r\n        maxDepositors = _initParams._maxDepositors;\r\n        minDeposit = _initParams._minDeposit;\r\n\r\n        vaultParams = _vaultParams;\r\n        vaultState.round = 1;\r\n\r\n        uint256 assetBalance =\r\n            IERC20(vaultParams.asset).balanceOf(address(this));\r\n        ShareMath.assertUint104(assetBalance);\r\n        vaultState.lastLockedAmount = uint104(assetBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper, \"!keeper\");\r\n        _;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new keeper\r\n     * @param newKeeper is the address of the new keeper\r\n     */\r\n    function setNewKeeper(address newKeeper) external onlyOwner {\r\n        require(newKeeper != address(0), \"!newKeeper\");\r\n        keeper = newKeeper;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new fee recipient\r\n     * @param newFeeRecipient is the address of the new fee recipient\r\n     */\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\r\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\r\n        feeRecipient = newFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the management fee for the vault\r\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\r\n     */\r\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\r\n        require(\r\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid management fee\"\r\n        );\r\n\r\n        managementFee = _perRoundManagementFee(newManagementFee);\r\n\r\n        emit ManagementFeeSet(managementFee, newManagementFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to set the management fee for the vault\r\n     * @param managementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2\r\n     * @return perRoundManagementFee is the management divided by the number of rounds per year\r\n     */\r\n    function _perRoundManagementFee(uint256 managementFee)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _period = period;\r\n        uint256 feeDivider =\r\n            _period % 30 == 0\r\n                ? Vault.FEE_MULTIPLIER * (12 / (_period / 30))\r\n                : WEEKS_PER_YEAR / (_period / 7);\r\n\r\n        // We are dividing annualized management fee by num weeks in a year\r\n        return managementFee.mul(Vault.FEE_MULTIPLIER).div(feeDivider);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the performance fee for the vault\r\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\r\n     */\r\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\r\n        require(\r\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid performance fee\"\r\n        );\r\n\r\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\r\n\r\n        performanceFee = newPerformanceFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new cap for deposits\r\n     * @param newCap is the new cap for deposits\r\n     */\r\n    function setCap(uint256 newCap) external onlyOwner {\r\n        require(newCap > 0, \"!newCap\");\r\n        ShareMath.assertUint104(newCap);\r\n        emit CapSet(vaultParams.cap, newCap);\r\n        vaultParams.cap = uint104(newCap);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new discount on premiums for options we are selling\r\n     * @param newPremiumDiscount is the premium discount\r\n     */\r\n    function setPremiumDiscount(uint256 newPremiumDiscount) external onlyOwner {\r\n        require(\r\n            newPremiumDiscount > 0 &&\r\n                newPremiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\r\n            \"Invalid discount\"\r\n        );\r\n\r\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\r\n\r\n        premiumDiscount = newPremiumDiscount;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new auction duration\r\n     * @param newAuctionDuration is the auction duration\r\n     */\r\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\r\n        require(\r\n            newAuctionDuration >= MIN_AUCTION_DURATION,\r\n            \"Invalid auction duration\"\r\n        );\r\n\r\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\r\n\r\n        auctionDuration = newAuctionDuration;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new strike selection contract\r\n     * @param newStrikeSelection is the address of the new strike selection contract\r\n     */\r\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\r\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\r\n        strikeSelection = newStrikeSelection;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new options premium pricer contract\r\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\r\n     */\r\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOptionsPremiumPricer != address(0),\r\n            \"!newOptionsPremiumPricer\"\r\n        );\r\n        optionsPremiumPricer = newOptionsPremiumPricer;\r\n    }\r\n\r\n    /**\r\n     * @notice Optionality to set strike price manually\r\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\r\n     */\r\n    function setStrikePrice(uint128 strikePrice)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(strikePrice > 0, \"!strikePrice\");\r\n        overriddenStrikePrice = strikePrice;\r\n        lastStrikeOverrideRound = vaultState.round;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the maximum number of depositors\r\n     * @param newMaxDepositors is the new cap for number of depositors\r\n     */\r\n    function setMaxDepositors(uint256 newMaxDepositors)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(newMaxDepositors > 0, \"!newMaxDepositors\");\r\n        maxDepositors = newMaxDepositors;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the minimum deposit amount\r\n     * @param newMinDeposit is the new minimum amount for deposit\r\n     */\r\n    function setMinDeposit(uint256 newMinDeposit)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(newMinDeposit > 0, \"!newMinDeposit\");\r\n        minDeposit = newMinDeposit;\r\n    }\r\n\r\n    /************************************************\r\n     *  DEPOSIT & WITHDRAWALS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Internal function to add new depositor address\r\n     * @param newDepositor is the address to include in the depositors list\r\n     */\r\n    function _addDepositor(address newDepositor) internal {\r\n        if (!depositorsMap[newDepositor]) {\r\n            require(newDepositor != address(0), \"Depositor address null\");\r\n            require(\r\n                (depositorsArray.length + 1) <= maxDepositors,\r\n                \"Number of depositors exceeds limit\"\r\n            );\r\n\r\n            depositorsMap[newDepositor] = true;\r\n            depositorsArray.push(newDepositor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Remove addresses from depositors list\r\n     * @param excludeDepositor is the address to exclude from the depositors list\r\n     */\r\n    function _removeDepositor(address excludeDepositor) internal {\r\n        address[] storage array = depositorsArray;\r\n        uint256 arrayLength = array.length;\r\n\r\n        require(depositorsMap[excludeDepositor], \"Depositor does not exist\");\r\n\r\n        depositorsMap[excludeDepositor] = false;\r\n\r\n        for (uint256 i = 0; i < arrayLength - 1; i++) {\r\n            if (excludeDepositor == array[i]) {\r\n                (array[i], array[arrayLength - 1]) = (\r\n                    array[arrayLength - 1],\r\n                    array[i]\r\n                );\r\n            }\r\n        }\r\n        array.pop();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender.\r\n     * @param amount is the amount of `asset` to deposit\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"!amount\");\r\n\r\n        _addDepositor(msg.sender);\r\n\r\n        _depositFor(amount, msg.sender);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the vault shares to the creditor\r\n     * @param amount is the amount of `asset` deposited\r\n     * @param creditor is the address to receieve the deposit\r\n     */\r\n    function _depositFor(uint256 amount, address creditor) private {\r\n        uint256 currentRound = vaultState.round;\r\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\r\n\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\r\n        uint256 totalUserDeposit =\r\n            accountVaultBalance(msg.sender).add(depositReceipt.amount).add(\r\n                amount\r\n            );\r\n\r\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\r\n        require(\r\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\r\n            \"Insufficient balance\"\r\n        );\r\n        require(totalUserDeposit >= minDeposit, \"Minimum deposit not reached\");\r\n\r\n        emit Deposit(creditor, amount, currentRound);\r\n\r\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        uint256 depositAmount = amount;\r\n\r\n        // If we have a pending deposit in the current round, we add on to the pending deposit\r\n        if (currentRound == depositReceipt.round) {\r\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\r\n            depositAmount = newAmount;\r\n        }\r\n\r\n        ShareMath.assertUint104(depositAmount);\r\n\r\n        depositReceipts[creditor] = Vault.DepositReceipt({\r\n            round: uint16(currentRound),\r\n            amount: uint104(depositAmount),\r\n            unredeemedShares: uint128(unredeemedShares)\r\n        });\r\n\r\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\r\n        ShareMath.assertUint128(newTotalPending);\r\n\r\n        vaultState.totalPending = uint128(newTotalPending);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\r\n        require(numShares > 0, \"!numShares\");\r\n\r\n        // We do a max redeem before initiating a withdrawal\r\n        // But we check if they must first have unredeemed shares\r\n        Vault.DepositReceipt storage depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        if (depositReceipt.amount > 0 || depositReceipt.unredeemedShares > 0) {\r\n            _redeem(0, true);\r\n        }\r\n\r\n        // This caches the `round` variable used in shareBalances\r\n        uint256 currentRound = vaultState.round;\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n        uint256 withdrawalRound = withdrawal.round;\r\n\r\n        bool withdrawalIsSameRound = withdrawalRound == currentRound;\r\n\r\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\r\n\r\n        uint256 existingShares = uint256(withdrawal.shares);\r\n\r\n        uint256 withdrawalShares;\r\n        if (withdrawalIsSameRound) {\r\n            withdrawalShares = existingShares.add(numShares);\r\n        } else {\r\n            require(existingShares == 0, \"Existing withdraw\");\r\n            withdrawalShares = numShares;\r\n            withdrawals[msg.sender].round = uint16(currentRound);\r\n        }\r\n\r\n        // Ensure withdrawal does not reduce user deposit below the minimum amount\r\n        uint256 vaultDecimals = vaultParams.decimals;\r\n        uint256 userBalance = accountVaultBalance(msg.sender);\r\n\r\n        uint256 withdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                numShares,\r\n                currentRound != 1\r\n                    ? roundPricePerShare[currentRound - 1]\r\n                    : 10**vaultDecimals,\r\n                vaultDecimals\r\n            );\r\n\r\n        if (userBalance > withdrawAmount) {\r\n            uint256 totalDeposit = userBalance.sub(withdrawAmount);\r\n            require(totalDeposit >= minDeposit, \"Minimum deposit not reached\");\r\n        }\r\n\r\n        ShareMath.assertUint128(withdrawalShares);\r\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\r\n\r\n        uint256 newQueuedWithdrawShares =\r\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\r\n        ShareMath.assertUint128(newQueuedWithdrawShares);\r\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\r\n\r\n        if (depositReceipt.amount == 0 && balanceOf(msg.sender) == numShares) {\r\n            _removeDepositor(msg.sender);\r\n        }\r\n\r\n        _transfer(msg.sender, address(this), numShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     * @return withdrawAmount the current withdrawal amount\r\n     */\r\n    function _completeWithdraw() internal returns (uint256) {\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        uint256 withdrawalShares = withdrawal.shares;\r\n        uint256 withdrawalRound = withdrawal.round;\r\n\r\n        // This checks if there is a withdrawal\r\n        require(withdrawalShares > 0, \"Not initiated\");\r\n\r\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\r\n\r\n        // We leave the round number as non-zero to save on gas for subsequent writes\r\n        withdrawals[msg.sender].shares = 0;\r\n        vaultState.queuedWithdrawShares = uint128(\r\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\r\n        );\r\n\r\n        uint256 withdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                withdrawalShares,\r\n                roundPricePerShare[withdrawalRound],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\r\n\r\n        _burn(address(this), withdrawalShares);\r\n\r\n        require(withdrawAmount > 0, \"!withdrawAmount\");\r\n        transferAsset(msg.sender, withdrawAmount);\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem\r\n     */\r\n    function redeem(uint256 numShares) external nonReentrant {\r\n        require(numShares > 0, \"!numShares\");\r\n        _redeem(numShares, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\r\n     */\r\n    function maxRedeem() external nonReentrant {\r\n        _redeem(0, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\r\n     * @param isMax is flag for when callers do a max redemption\r\n     */\r\n    function _redeem(uint256 numShares, bool isMax) internal {\r\n        Vault.DepositReceipt memory depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        // This handles the null case when depositReceipt.round = 0\r\n        // Because we start with round = 1 at `initialize`\r\n        uint256 currentRound = vaultState.round;\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        numShares = isMax ? unredeemedShares : numShares;\r\n        if (numShares == 0) {\r\n            return;\r\n        }\r\n        require(numShares <= unredeemedShares, \"Exceeds available\");\r\n\r\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\r\n        // we debit from the unredeemedShares, but leave the amount field intact\r\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\r\n        if (depositReceipt.round < currentRound) {\r\n            depositReceipts[msg.sender].amount = 0;\r\n        }\r\n\r\n        ShareMath.assertUint128(numShares);\r\n        depositReceipts[msg.sender].unredeemedShares = uint128(\r\n            unredeemedShares.sub(numShares)\r\n        );\r\n\r\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\r\n\r\n        _transfer(address(this), msg.sender, numShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\r\n     * @param amount is the amount to withdraw\r\n     */\r\n    function withdrawInstantly(uint256 amount) external nonReentrant {\r\n        Vault.DepositReceipt storage depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        uint256 currentRound = vaultState.round;\r\n        require(amount > 0, \"!amount\");\r\n        require(depositReceipt.round == currentRound, \"Invalid round\");\r\n\r\n        uint256 receiptAmount = depositReceipt.amount;\r\n        require(receiptAmount >= amount, \"Exceed amount\");\r\n\r\n        uint256 userBalance =\r\n            accountVaultBalance(msg.sender).add(receiptAmount);\r\n\r\n        if (userBalance > amount) {\r\n            uint256 totalUserDeposit = userBalance.sub(amount);\r\n            require(\r\n                totalUserDeposit >= minDeposit,\r\n                \"Minimum deposit not reached\"\r\n            );\r\n        }\r\n\r\n        // Subtraction underflow checks already ensure it is smaller than uint104\r\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\r\n        vaultState.totalPending = uint128(\r\n            uint256(vaultState.totalPending).sub(amount)\r\n        );\r\n\r\n        emit InstantWithdraw(msg.sender, amount, currentRound);\r\n\r\n        if (depositReceipt.amount == 0 && shares(msg.sender) == 0) {\r\n            _removeDepositor(msg.sender);\r\n        }\r\n\r\n        transferAsset(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     */\r\n    function completeWithdraw() external nonReentrant {\r\n        uint256 withdrawAmount = _completeWithdraw();\r\n        lastQueuedWithdrawAmount = uint128(\r\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\r\n        );\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /*\r\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\r\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\r\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\r\n     * @param numRounds is the number of rounds to initialize in the map\r\n     */\r\n    function initRounds(uint256 numRounds) external nonReentrant {\r\n        require(numRounds > 0, \"!numRounds\");\r\n\r\n        uint256 _round = vaultState.round;\r\n        for (uint256 i = 0; i < numRounds; i++) {\r\n            uint256 index = _round + i;\r\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\r\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Helper function that performs most administrative tasks\r\n     * such as setting next option, minting new shares, getting vault fees, etc.\r\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\r\n     * @return newOption is the new option address\r\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\r\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\r\n     */\r\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\r\n        internal\r\n        returns (\r\n            address newOption,\r\n            uint256 lockedBalance,\r\n            uint256 queuedWithdrawAmount\r\n        )\r\n    {\r\n        require(block.timestamp >= optionState.nextOptionReadyAt, \"!ready\");\r\n\r\n        newOption = optionState.nextOption;\r\n        require(newOption != address(0), \"!nextOption\");\r\n\r\n        uint256 currentRound = vaultState.round;\r\n        address recipient = feeRecipient;\r\n        uint256 mintShares;\r\n        uint256 managementFeeInAsset;\r\n        {\r\n            uint256 newPricePerShare;\r\n            (\r\n                lockedBalance,\r\n                queuedWithdrawAmount,\r\n                newPricePerShare,\r\n                mintShares,\r\n                managementFeeInAsset\r\n            ) = VaultLifecycleTreasuryBare.rollover(\r\n                vaultState,\r\n                VaultLifecycleTreasuryBare.RolloverParams(\r\n                    vaultParams.decimals,\r\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\r\n                    totalSupply(),\r\n                    lastQueuedWithdrawAmount,\r\n                    currentRound != 1 ? managementFee : 0\r\n                )\r\n            );\r\n\r\n            optionState.currentOption = newOption;\r\n            optionState.nextOption = address(0);\r\n\r\n            // Finalize the pricePerShare at the end of the round\r\n\r\n            roundPricePerShare[currentRound] = newPricePerShare;\r\n\r\n            emit CollectManagementFee(\r\n                managementFeeInAsset,\r\n                currentRound,\r\n                recipient\r\n            );\r\n\r\n            vaultState.totalPending = 0;\r\n            vaultState.round = uint16(currentRound + 1);\r\n        }\r\n\r\n        _mint(address(this), mintShares);\r\n\r\n        if (managementFeeInAsset > 0) {\r\n            transferAsset(payable(recipient), managementFeeInAsset);\r\n        }\r\n\r\n        return (newOption, lockedBalance, queuedWithdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to make an ERC20 transfer\r\n     * @param recipient is the receiving address\r\n     * @param amount is the transfer amount\r\n     */\r\n    function transferAsset(address recipient, uint256 amount) internal {\r\n        address asset = vaultParams.asset;\r\n        IERC20(asset).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\r\n     *         This allows all the users to withdraw if the next option is malicious.\r\n     */\r\n    function commitAndClose() external nonReentrant {\r\n        address oldOption = optionState.currentOption;\r\n\r\n        VaultLifecycleTreasuryBare.CloseParams memory closeParams =\r\n            VaultLifecycleTreasuryBare.CloseParams({\r\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\r\n                USDC: USDC,\r\n                currentOption: oldOption,\r\n                delay: DELAY,\r\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\r\n                overriddenStrikePrice: overriddenStrikePrice,\r\n                period: period\r\n            });\r\n\r\n        (\r\n            address otokenAddress,\r\n            uint256 premium,\r\n            uint256 strikePrice,\r\n            uint256 delta\r\n        ) =\r\n            VaultLifecycleTreasuryBare.commitAndClose(\r\n                strikeSelection,\r\n                optionsPremiumPricer,\r\n                premiumDiscount,\r\n                closeParams,\r\n                vaultParams,\r\n                vaultState\r\n            );\r\n\r\n        emit NewOptionStrikeSelected(strikePrice, delta);\r\n\r\n        ShareMath.assertUint104(premium);\r\n        currentOtokenPremium = uint104(premium);\r\n        optionState.nextOption = otokenAddress;\r\n\r\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\r\n        require(\r\n            nextOptionReady <= type(uint32).max,\r\n            \"Overflow nextOptionReady\"\r\n        );\r\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\r\n\r\n        _closeShort(oldOption);\r\n\r\n        // In case chargeAndDistribute was not called last round, call\r\n        // the function to conclude last round's performance fee and distribution\r\n        if (IERC20(USDC).balanceOf(address(this)) > MIN_DUST_AMOUNT) {\r\n            _chargeAndDistribute();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short position for the vault.\r\n     */\r\n    function _closeShort(address oldOption) private {\r\n        uint256 lockedAmount = vaultState.lockedAmount;\r\n        if (oldOption != address(0)) {\r\n            vaultState.lastLockedAmount = uint104(lockedAmount);\r\n        }\r\n        vaultState.lockedAmount = 0;\r\n\r\n        optionState.currentOption = address(0);\r\n\r\n        if (oldOption != address(0)) {\r\n            uint256 withdrawAmount =\r\n                VaultLifecycleTreasuryBare.settleShort(GAMMA_CONTROLLER);\r\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Rolls the vault's funds into a new short position.\r\n     */\r\n    function rollToNextOption() external onlyKeeper nonReentrant {\r\n        (\r\n            address newOption,\r\n            uint256 lockedBalance,\r\n            uint256 queuedWithdrawAmount\r\n        ) = _rollToNextOption(uint256(lastQueuedWithdrawAmount));\r\n\r\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\r\n\r\n        ShareMath.assertUint104(lockedBalance);\r\n        vaultState.lockedAmount = uint104(lockedBalance);\r\n\r\n        emit OpenShort(newOption, lockedBalance, msg.sender);\r\n\r\n        VaultLifecycleTreasuryBare.createShort(\r\n            GAMMA_CONTROLLER,\r\n            MARGIN_POOL,\r\n            newOption,\r\n            lockedBalance\r\n        );\r\n\r\n        _startAuction();\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate the gnosis auction.\r\n     */\r\n    function startAuction() external onlyKeeper nonReentrant {\r\n        _startAuction();\r\n    }\r\n\r\n    function _startAuction() private {\r\n        GnosisAuction.AuctionDetails memory auctionDetails;\r\n\r\n        uint256 currOtokenPremium = currentOtokenPremium;\r\n\r\n        require(currOtokenPremium > 0, \"!currentOtokenPremium\");\r\n\r\n        uint256 stableDecimals = IERC20Detailed(USDC).decimals();\r\n\r\n        auctionDetails.oTokenAddress = optionState.currentOption;\r\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\r\n        auctionDetails.asset = USDC;\r\n        auctionDetails.assetDecimals = stableDecimals;\r\n        auctionDetails.oTokenPremium = currOtokenPremium;\r\n        auctionDetails.duration = auctionDuration;\r\n\r\n        optionAuctionID = VaultLifecycleTreasuryBare.startAuction(auctionDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over from gnosis auction.\r\n     */\r\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\r\n        uint256 unlockedAssetAmount =\r\n            VaultLifecycleTreasuryBare.burnOtokens(\r\n                GAMMA_CONTROLLER,\r\n                optionState.currentOption\r\n            );\r\n\r\n        vaultState.lockedAmount = uint104(\r\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Settles the round's Gnosis auction and distribute the premiums earned\r\n     */\r\n    function concludeOptionsSale() external onlyKeeper nonReentrant {\r\n        VaultLifecycleTreasuryBare.settleAuction(\r\n            GNOSIS_EASY_AUCTION,\r\n            optionAuctionID\r\n        );\r\n\r\n        if (IERC20(USDC).balanceOf(address(this)) > MIN_DUST_AMOUNT) {\r\n            _chargeAndDistribute();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Charge performance fee and distribute remaining to depositors addresses\r\n     */\r\n    function chargeAndDistribute() external onlyKeeper nonReentrant {\r\n        _chargeAndDistribute();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate performance fee and transfer to fee recipient\r\n     */\r\n    function _chargeAndDistribute() internal {\r\n        IERC20 stableAsset = IERC20(USDC);\r\n        uint256 stableBalance = stableAsset.balanceOf(address(this));\r\n\r\n        require(stableBalance > 0, \"no premium to distribute\");\r\n\r\n        _chargePerformanceFee(stableAsset, stableBalance);\r\n\r\n        _distributePremium(\r\n            stableAsset,\r\n            stableAsset.balanceOf(address(this)) // Get the new balance\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Charge performance fee\r\n     */\r\n    function _chargePerformanceFee(IERC20 token, uint256 amount) internal {\r\n        address recipient = feeRecipient;\r\n        uint256 transferAmount =\r\n            amount.mul(performanceFee).div(100 * Vault.FEE_MULTIPLIER);\r\n\r\n        token.safeTransfer(recipient, transferAmount);\r\n\r\n        // Performance fee for the round is charged after rollover\r\n        // hence we need to adjust the round to the previous\r\n        emit CollectPerformanceFee(\r\n            transferAmount,\r\n            vaultState.round - 1,\r\n            recipient\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Distribute the premium to depositor addresses\r\n     */\r\n    function _distributePremium(IERC20 token, uint256 amount) internal {\r\n        // Distribute to depositor address\r\n        address[] storage _depositors = depositorsArray;\r\n        uint256[] memory _amounts = new uint256[](_depositors.length);\r\n        uint256 totalSupply = totalSupply() - lastQueuedWithdrawAmount;\r\n\r\n        for (uint256 i = 0; i < _depositors.length; i++) {\r\n            // Distribute to depositors proportional to the amount of\r\n            // shares they own\r\n            address depositorAddress = _depositors[i];\r\n            _amounts[i] = shares(depositorAddress).mul(amount).div(totalSupply);\r\n\r\n            token.safeTransfer(depositorAddress, _amounts[i]);\r\n        }\r\n\r\n        emit DistributePremium(\r\n            amount,\r\n            _amounts,\r\n            _depositors,\r\n            vaultState.round - 1\r\n        );\r\n    }\r\n\r\n    function setCurrentOtokenPremium(uint256 newOtokenPremium) public onlyKeeper {\r\n        currentOtokenPremium = newOtokenPremium;\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Returns the asset balance held on the vault for the account\r\n     * @param account is the address to lookup balance for\r\n     * @return the amount of `asset` custodied by the vault for the user\r\n     */\r\n    function accountVaultBalance(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _decimals = vaultParams.decimals;\r\n        uint256 assetPerShare =\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                _decimals\r\n            );\r\n        return\r\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance including unredeemed shares\r\n     * @param account is the account to lookup share balance for\r\n     * @return the share balance\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\r\n        return heldByAccount.add(heldByVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance split between account and vault holdings\r\n     * @param account is the account to lookup share balance for\r\n     * @return heldByAccount is the shares held by account\r\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\r\n     */\r\n    function shareBalances(address account)\r\n        public\r\n        view\r\n        returns (uint256 heldByAccount, uint256 heldByVault)\r\n    {\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\r\n\r\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\r\n            return (balanceOf(account), 0);\r\n        }\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                vaultState.round,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        return (balanceOf(account), unredeemedShares);\r\n    }\r\n\r\n    /**\r\n     * @notice The price of a unit of share denominated in the `asset`\r\n     */\r\n    function pricePerShare() external view returns (uint256) {\r\n        return\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                vaultParams.decimals\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\r\n     * @return total balance of the vault, including the amounts locked in third party protocols\r\n     */\r\n    function totalBalance() public view returns (uint256) {\r\n        return\r\n            uint256(vaultState.lockedAmount).add(\r\n                IERC20(vaultParams.asset).balanceOf(address(this))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token decimals\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return vaultParams.decimals;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the maximum capacity of the vault in terms of the vault's asset\r\n     */\r\n    function cap() external view returns (uint256) {\r\n        return vaultParams.cap;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the date and time for the next options sale\r\n     */\r\n    function nextOptionReadyAt() external view returns (uint256) {\r\n        return optionState.nextOptionReadyAt;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the options specification for the current round\r\n     */\r\n    function currentOption() external view returns (address) {\r\n        return optionState.currentOption;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the options specification for the next round\r\n     */\r\n    function nextOption() external view returns (address) {\r\n        return optionState.nextOption;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns total pending deposit for the current round\r\n     */\r\n    function totalPending() external view returns (uint256) {\r\n        return vaultState.totalPending;\r\n    }\r\n\r\n    /**\r\n     * @notice ERC20 _transfer override function\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(\r\n            recipient == address(this) || sender == address(this),\r\n            \"Treasury rToken is not transferrable\"\r\n        );\r\n        return ERC20Upgradeable._transfer(sender, recipient, amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/libraries/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nlibrary Vault {\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\r\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\r\n\r\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\r\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\r\n\r\n    // Otokens have 8 decimal places.\r\n    uint256 internal constant OTOKEN_DECIMALS = 8;\r\n\r\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\r\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\r\n\r\n    // Placeholder uint value to prevent cold writes\r\n    uint256 internal constant PLACEHOLDER_UINT = 1;\r\n\r\n    struct VaultParams {\r\n        // Option type the vault is selling\r\n        bool isPut;\r\n        // Token decimals for vault shares\r\n        uint8 decimals;\r\n        // Asset used in Theta / Delta Vault\r\n        address asset;\r\n        // Underlying asset of the options sold by vault\r\n        address underlying;\r\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\r\n        uint56 minimumSupply;\r\n        // Vault cap\r\n        uint104 cap;\r\n    }\r\n\r\n    struct OptionState {\r\n        // Option that the vault is shorting / longing in the next cycle\r\n        address nextOption;\r\n        // Option that the vault is currently shorting / longing\r\n        address currentOption;\r\n        // The timestamp when the `nextOption` can be used by the vault\r\n        uint32 nextOptionReadyAt;\r\n    }\r\n\r\n    struct VaultState {\r\n        // 32 byte slot 1\r\n        //  Current round number. `round` represents the number of `period`s elapsed.\r\n        uint16 round;\r\n        // Amount that is currently locked for selling options\r\n        uint104 lockedAmount;\r\n        // Amount that was locked for selling options in the previous round\r\n        // used for calculating performance fee deduction\r\n        uint104 lastLockedAmount;\r\n        // 32 byte slot 2\r\n        // Stores the total tally of how much of `asset` there is\r\n        // to be used to mint rTHETA tokens\r\n        uint128 totalPending;\r\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\r\n        uint128 queuedWithdrawShares;\r\n    }\r\n\r\n    struct DepositReceipt {\r\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\r\n        uint16 round;\r\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\r\n        uint104 amount;\r\n        // Unredeemed shares balance\r\n        uint128 unredeemedShares;\r\n    }\r\n\r\n    struct Withdrawal {\r\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\r\n        uint16 round;\r\n        // Number of shares withdrawn\r\n        uint128 shares;\r\n    }\r\n\r\n    struct AuctionSellOrder {\r\n        // Amount of `asset` token offered in auction\r\n        uint96 sellAmount;\r\n        // Amount of oToken requested in auction\r\n        uint96 buyAmount;\r\n        // User Id of delta vault in latest gnosis auction\r\n        uint64 userId;\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/VaultLifecycleTreasuryBare.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\nimport {ShareMath} from \"./ShareMath.sol\";\r\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\r\nimport {GnosisAuction} from \"./GnosisAuction.sol\";\r\nimport {DateTime} from \"./DateTime.sol\";\r\nimport {\r\n    IOtokenFactory,\r\n    IOtoken,\r\n    IController,\r\n    GammaTypes\r\n} from \"../interfaces/GammaInterface.sol\";\r\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\r\nimport {IGnosisAuction} from \"../interfaces/IGnosisAuction.sol\";\r\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\r\n\r\nlibrary VaultLifecycleTreasuryBare {\r\n    using SafeMath for uint256;\r\n    using SupportsNonCompliantERC20 for IERC20;\r\n\r\n    struct CloseParams {\r\n        address OTOKEN_FACTORY;\r\n        address USDC;\r\n        address currentOption;\r\n        uint256 delay;\r\n        uint16 lastStrikeOverrideRound;\r\n        uint256 overriddenStrikePrice;\r\n        uint256 period;\r\n    }\r\n\r\n    /**\r\n     * @notice Initialization parameters for the vault.\r\n     * @param _owner is the owner of the vault with critical permissions\r\n     * @param _feeRecipient is the address to recieve vault performance and management fees\r\n     * @param _managementFee is the management fee pct.\r\n     * @param _performanceFee is the perfomance fee pct.\r\n     * @param _tokenName is the name of the token\r\n     * @param _tokenSymbol is the symbol of the token\r\n     * @param _optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param _strikeSelection is the address of the contract with strike selection logic\r\n     * @param _premiumDiscount is the vault's discount applied to the premium\r\n     * @param _auctionDuration is the duration of the gnosis auction\r\n     * @param _period is the period between each option sales\r\n     */\r\n    struct InitParams {\r\n        address _owner;\r\n        address _keeper;\r\n        address _feeRecipient;\r\n        uint256 _managementFee;\r\n        uint256 _performanceFee;\r\n        string _tokenName;\r\n        string _tokenSymbol;\r\n        address _optionsPremiumPricer;\r\n        address _strikeSelection;\r\n        uint32 _premiumDiscount;\r\n        uint256 _auctionDuration;\r\n        uint256 _period;\r\n        uint256 _maxDepositors;\r\n        uint256 _minDeposit;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\r\n     * @param strikeSelection is the address of the contract with strike selection logic\r\n     * @param optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param premiumDiscount is the vault's discount applied to the premium\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @return otokenAddress is the address of the new option\r\n     * @return premium is the premium of the new option\r\n     * @return strikePrice is the strike price of the new option\r\n     * @return delta is the delta of the new option\r\n     */\r\n    function commitAndClose(\r\n        address strikeSelection,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount,\r\n        CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        Vault.VaultState storage vaultState\r\n    )\r\n        external\r\n        returns (\r\n            address otokenAddress,\r\n            uint256 premium,\r\n            uint256 strikePrice,\r\n            uint256 delta\r\n        )\r\n    {\r\n        uint256 expiry;\r\n\r\n        // uninitialized state\r\n        if (closeParams.currentOption == address(0)) {\r\n            expiry = getNextExpiry(block.timestamp, closeParams.period);\r\n        } else {\r\n            expiry = getNextExpiry(\r\n                IOtoken(closeParams.currentOption).expiryTimestamp(),\r\n                closeParams.period\r\n            );\r\n        }\r\n\r\n        bool isPut = vaultParams.isPut;\r\n        address underlying = vaultParams.underlying;\r\n        address asset = vaultParams.asset;\r\n\r\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\r\n            vaultState.round\r\n            ? (closeParams.overriddenStrikePrice, 0)\r\n            : IStrikeSelection(strikeSelection).getStrikePrice(expiry, isPut);\r\n\r\n        require(strikePrice != 0, \"!strikePrice\");\r\n\r\n        // retrieve address if option already exists, or deploy it\r\n        otokenAddress = getOrDeployOtoken(\r\n            closeParams,\r\n            vaultParams,\r\n            underlying,\r\n            asset,\r\n            strikePrice,\r\n            expiry,\r\n            isPut\r\n        );\r\n\r\n        // get the black scholes premium of the option\r\n        premium = optionsPremiumPricer == address(1)\r\n            ? 1\r\n            : GnosisAuction.getOTokenPremiumInStables(\r\n                otokenAddress,\r\n                optionsPremiumPricer,\r\n                premiumDiscount\r\n            );\r\n\r\n        require(premium > 0, \"!premium\");\r\n\r\n        return (otokenAddress, premium, strikePrice, delta);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\r\n     * @param otokenAddress is the address of the otoken\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param collateralAsset is the address of the collateral asset\r\n     * @param USDC is the address of usdc\r\n     * @param delay is the delay between commitAndClose and rollToNextOption\r\n     */\r\n    function verifyOtoken(\r\n        address otokenAddress,\r\n        Vault.VaultParams storage vaultParams,\r\n        address collateralAsset,\r\n        address USDC,\r\n        uint256 delay\r\n    ) private view {\r\n        require(otokenAddress != address(0), \"!otokenAddress\");\r\n\r\n        IOtoken otoken = IOtoken(otokenAddress);\r\n        require(otoken.isPut() == vaultParams.isPut, \"Type mismatch\");\r\n        require(\r\n            otoken.underlyingAsset() == vaultParams.underlying,\r\n            \"Wrong underlyingAsset\"\r\n        );\r\n        require(\r\n            otoken.collateralAsset() == collateralAsset,\r\n            \"Wrong collateralAsset\"\r\n        );\r\n\r\n        // we just assume all options use USDC as the strike\r\n        require(otoken.strikeAsset() == USDC, \"strikeAsset != USDC\");\r\n\r\n        uint256 readyAt = block.timestamp.add(delay);\r\n        require(otoken.expiryTimestamp() >= readyAt, \"Expiry before delay\");\r\n    }\r\n\r\n    /**\r\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\r\n     * @param asset is the address of the vault's asset\r\n     * @param decimals is the decimals of the asset\r\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\r\n     * @param managementFee is the management fee percent to charge on the AUM\r\n     */\r\n    struct RolloverParams {\r\n        uint256 decimals;\r\n        uint256 totalBalance;\r\n        uint256 currentShareSupply;\r\n        uint256 lastQueuedWithdrawAmount;\r\n        uint256 managementFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the shares to mint, new price per share, and\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\r\n     * @param params is the rollover parameters passed to compute the next state\r\n     * @return newLockedAmount is the amount of funds to allocate for the new round\r\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\r\n     * @return newPricePerShare is the price per share of the new round\r\n     * @return mintShares is the amount of shares to mint from deposits\r\n     * @return managementFeeInAsset is the amount of management fee charged by vault\r\n     */\r\n    function rollover(\r\n        Vault.VaultState storage vaultState,\r\n        RolloverParams calldata params\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 newLockedAmount,\r\n            uint256 queuedWithdrawAmount,\r\n            uint256 newPricePerShare,\r\n            uint256 mintShares,\r\n            uint256 managementFeeInAsset\r\n        )\r\n    {\r\n        uint256 currentBalance = params.totalBalance;\r\n        uint256 pendingAmount = vaultState.totalPending;\r\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\r\n\r\n        uint256 balanceForVaultFees;\r\n        {\r\n            uint256 pricePerShareBeforeFee =\r\n                ShareMath.pricePerShare(\r\n                    params.currentShareSupply,\r\n                    currentBalance,\r\n                    pendingAmount,\r\n                    params.decimals\r\n                );\r\n\r\n            uint256 queuedWithdrawBeforeFee =\r\n                params.currentShareSupply > 0\r\n                    ? ShareMath.sharesToAsset(\r\n                        queuedWithdrawShares,\r\n                        pricePerShareBeforeFee,\r\n                        params.decimals\r\n                    )\r\n                    : 0;\r\n\r\n            // Deduct the difference between the newly scheduled withdrawals\r\n            // and the older withdrawals\r\n            // so we can charge them fees before they leave\r\n            uint256 withdrawAmountDiff =\r\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\r\n                    ? queuedWithdrawBeforeFee.sub(\r\n                        params.lastQueuedWithdrawAmount\r\n                    )\r\n                    : 0;\r\n\r\n            balanceForVaultFees = currentBalance\r\n                .sub(queuedWithdrawBeforeFee)\r\n                .add(withdrawAmountDiff);\r\n        }\r\n\r\n        managementFeeInAsset = getManagementFee(\r\n            balanceForVaultFees,\r\n            vaultState.totalPending,\r\n            params.managementFee\r\n        );\r\n\r\n        // Take into account the fee\r\n        // so we can calculate the newPricePerShare\r\n        currentBalance = currentBalance.sub(managementFeeInAsset);\r\n\r\n        {\r\n            newPricePerShare = ShareMath.pricePerShare(\r\n                params.currentShareSupply,\r\n                currentBalance,\r\n                pendingAmount,\r\n                params.decimals\r\n            );\r\n\r\n            // After closing the short, if the options expire in-the-money\r\n            // vault pricePerShare would go down because vault's asset balance decreased.\r\n            // This ensures that the newly-minted shares do not take on the loss.\r\n            mintShares = ShareMath.assetToShares(\r\n                pendingAmount,\r\n                newPricePerShare,\r\n                params.decimals\r\n            );\r\n\r\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\r\n\r\n            queuedWithdrawAmount = newSupply > 0\r\n                ? ShareMath.sharesToAsset(\r\n                    queuedWithdrawShares,\r\n                    newPricePerShare,\r\n                    params.decimals\r\n                )\r\n                : 0;\r\n        }\r\n\r\n        return (\r\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\r\n            queuedWithdrawAmount,\r\n            newPricePerShare,\r\n            mintShares,\r\n            managementFeeInAsset\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\r\n     * @param oTokenAddress is the address of the otoken to mint\r\n     * @param depositAmount is the amount of collateral to deposit\r\n     * @return the otoken mint amount\r\n     */\r\n    function createShort(\r\n        address gammaController,\r\n        address marginPool,\r\n        address oTokenAddress,\r\n        uint256 depositAmount\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n        uint256 newVaultID =\r\n            (controller.getAccountVaultCounter(address(this))).add(1);\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IOtoken oToken = IOtoken(oTokenAddress);\r\n        address collateralAsset = oToken.collateralAsset();\r\n\r\n        uint256 collateralDecimals =\r\n            uint256(IERC20Detailed(collateralAsset).decimals());\r\n        uint256 mintAmount;\r\n\r\n        if (oToken.isPut()) {\r\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\r\n            // This is because of an issue with precision.\r\n            //\r\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\r\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\r\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\r\n            //\r\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\r\n            // We retain the dust in the vault so the calling contract can withdraw the\r\n            // actual locked amount + dust at settlement.\r\n            //\r\n            // To test this behavior, we can console.log\r\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\r\n            // to see how much dust (or excess collateral) is left behind.\r\n            mintAmount = depositAmount\r\n                .mul(10**Vault.OTOKEN_DECIMALS)\r\n                .mul(10**18) // we use 10**18 to give extra precision\r\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\r\n        } else {\r\n            mintAmount = depositAmount;\r\n\r\n            if (collateralDecimals > 8) {\r\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\r\n                if (mintAmount > scaleBy) {\r\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\r\n                }\r\n            }\r\n        }\r\n\r\n        // double approve to fix non-compliant ERC20s\r\n        IERC20 collateralToken = IERC20(collateralAsset);\r\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\r\n\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](3);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.OpenVault,\r\n            address(this), // owner\r\n            address(this), // receiver\r\n            address(0), // asset, otoken\r\n            newVaultID, // vaultId\r\n            0, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.DepositCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            collateralAsset, // deposited asset\r\n            newVaultID, // vaultId\r\n            depositAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[2] = IController.ActionArgs(\r\n            IController.ActionType.MintShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            oTokenAddress, // option address\r\n            newVaultID, // vaultId\r\n            mintAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        return mintAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\r\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\r\n     calling SettleVault action, this assumption should hold.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @return amount of collateral redeemed from the vault\r\n     */\r\n    function settleShort(address gammaController) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        // The short position has been previously closed, or all the otokens have been burned.\r\n        // So we return early.\r\n        if (address(collateralToken) == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to settle the short position using the normal way\r\n        // Delete the vault and withdraw all remaining collateral from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.SettleVault,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(0), // not used\r\n            vaultID, // vaultId\r\n            0, // not used\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\r\n     * It calls the `Redeem` action to claim the payout.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param oldOption is the address of the old option\r\n     * @param asset is the address of the vault's asset\r\n     * @return amount of asset received by exercising the option\r\n     */\r\n    function settleLong(\r\n        address gammaController,\r\n        address oldOption,\r\n        address asset\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\r\n\r\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to redeem the profits\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.Redeem,\r\n            address(0), // not used\r\n            address(this), // address to send profits to\r\n            oldOption, // address of otoken\r\n            0, // not used\r\n            oldOptionBalance, // otoken balance\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        return endAssetBalance.sub(startAssetBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\r\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param currentOption is the address of the current option\r\n     * @return amount of collateral redeemed by burning otokens\r\n     */\r\n    function burnOtokens(address gammaController, address currentOption)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        uint256 numOTokensToBurn =\r\n            IERC20(currentOption).balanceOf(address(this));\r\n\r\n        require(numOTokensToBurn > 0, \"No oTokens to burn\");\r\n\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // Burning `amount` of oTokens from the ribbon vault,\r\n        // then withdrawing the corresponding collateral amount from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](2);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.BurnShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            address(vault.shortOtokens[0]), // otoken address\r\n            vaultID, // vaultId\r\n            numOTokensToBurn, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.WithdrawCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(collateralToken), // withdrawn asset\r\n            vaultID, // vaultId\r\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\r\n                vault.shortAmounts[0]\r\n            ), // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the management fee for this week's round\r\n     * @param currentBalance is the balance of funds held on the vault after closing short\r\n     * @param pendingAmount is the pending deposit amount\r\n     * @param managementFeePercent is the management fee pct.\r\n     * @return managementFeeInAsset is the management fee\r\n     */\r\n    function getManagementFee(\r\n        uint256 currentBalance,\r\n        uint256 pendingAmount,\r\n        uint256 managementFeePercent\r\n    ) internal pure returns (uint256 managementFeeInAsset) {\r\n        // At the first round, currentBalance=0, pendingAmount>0\r\n        // so we just do not charge anything on the first round\r\n        uint256 lockedBalanceSansPending =\r\n            currentBalance > pendingAmount\r\n                ? currentBalance.sub(pendingAmount)\r\n                : 0;\r\n\r\n        uint256 _managementFeeInAsset;\r\n\r\n        // Always charge management fee regardless of whether the vault is\r\n        // making a profit from the previous options sale\r\n        _managementFeeInAsset = managementFeePercent > 0\r\n            ? lockedBalanceSansPending.mul(managementFeePercent).div(\r\n                100 * Vault.FEE_MULTIPLIER\r\n            )\r\n            : 0;\r\n\r\n        return _managementFeeInAsset;\r\n    }\r\n\r\n    /**\r\n     * @notice Either retrieves the option token if it already exists, or deploy it\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param underlying is the address of the underlying asset of the option\r\n     * @param collateralAsset is the address of the collateral asset of the option\r\n     * @param strikePrice is the strike price of the option\r\n     * @param expiry is the expiry timestamp of the option\r\n     * @param isPut is whether the option is a put\r\n     * @return the address of the option\r\n     */\r\n    function getOrDeployOtoken(\r\n        CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        address underlying,\r\n        address collateralAsset,\r\n        uint256 strikePrice,\r\n        uint256 expiry,\r\n        bool isPut\r\n    ) internal returns (address) {\r\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\r\n\r\n        address otokenFromFactory =\r\n            factory.getOtoken(\r\n                underlying,\r\n                closeParams.USDC,\r\n                collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        if (otokenFromFactory != address(0)) {\r\n            return otokenFromFactory;\r\n        }\r\n\r\n        address otoken =\r\n            factory.createOtoken(\r\n                underlying,\r\n                closeParams.USDC,\r\n                collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        verifyOtoken(\r\n            otoken,\r\n            vaultParams,\r\n            collateralAsset,\r\n            closeParams.USDC,\r\n            closeParams.delay\r\n        );\r\n\r\n        return otoken;\r\n    }\r\n\r\n    /**\r\n     * @notice Starts the gnosis auction\r\n     * @param auctionDetails is the struct with all the custom parameters of the auction\r\n     * @return the auction id of the newly created auction\r\n     */\r\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        return GnosisAuction.startAuction(auctionDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Settles the gnosis auction\r\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\r\n     * @param auctionID is the auction ID of the gnosis easy auction\r\n     */\r\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\r\n        internal\r\n    {\r\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\r\n    }\r\n\r\n    /**\r\n     * @notice Places a bid in an auction\r\n     * @param bidDetails is the struct with all the details of the\r\n      bid including the auction's id and how much to bid\r\n     */\r\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\r\n        external\r\n        returns (\r\n            uint256 sellAmount,\r\n            uint256 buyAmount,\r\n            uint64 userId\r\n        )\r\n    {\r\n        return GnosisAuction.placeBid(bidDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Claims the oTokens belonging to the vault\r\n     * @param auctionSellOrder is the sell order of the bid\r\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\r\n     holding custody to the funds\r\n     * @param counterpartyThetaVault is the address of the counterparty theta\r\n     vault of this delta vault\r\n     */\r\n    function claimAuctionOtokens(\r\n        Vault.AuctionSellOrder calldata auctionSellOrder,\r\n        address gnosisEasyAuction,\r\n        address counterpartyThetaVault\r\n    ) external {\r\n        GnosisAuction.claimAuctionOtokens(\r\n            auctionSellOrder,\r\n            gnosisEasyAuction,\r\n            counterpartyThetaVault\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the constructor params satisfy requirements\r\n     * @param _initParams is the initialization parameter including owner, keeper, etc.\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function verifyInitializerParams(\r\n        InitParams calldata _initParams,\r\n        Vault.VaultParams calldata _vaultParams,\r\n        uint256 _min_auction_duration\r\n    ) external pure {\r\n        require(_initParams._owner != address(0), \"!_owner\");\r\n        require(_initParams._keeper != address(0), \"!_keeper\");\r\n        require(_initParams._feeRecipient != address(0), \"!_feeRecipient\");\r\n        require(\r\n            _initParams._performanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"performanceFee >= 100%\"\r\n        );\r\n        require(\r\n            _initParams._managementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"managementFee >= 100%\"\r\n        );\r\n        require(bytes(_initParams._tokenName).length > 0, \"!_tokenName\");\r\n        require(bytes(_initParams._tokenSymbol).length > 0, \"!_tokenSymbol\");\r\n        require(\r\n            (_initParams._period == 7) ||\r\n                (_initParams._period == 14) ||\r\n                (_initParams._period == 30) ||\r\n                (_initParams._period == 90) ||\r\n                (_initParams._period == 180),\r\n            \"!_period\"\r\n        );\r\n        require(\r\n            _initParams._optionsPremiumPricer != address(0),\r\n            \"!_optionsPremiumPricer\"\r\n        );\r\n        require(\r\n            _initParams._strikeSelection != address(0),\r\n            \"!_strikeSelection\"\r\n        );\r\n        require(\r\n            _initParams._premiumDiscount > 0 &&\r\n                _initParams._premiumDiscount <\r\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\r\n            \"!_premiumDiscount\"\r\n        );\r\n        require(\r\n            _initParams._auctionDuration >= _min_auction_duration,\r\n            \"!_auctionDuration\"\r\n        );\r\n        require(_initParams._maxDepositors > 0, \"!_maxDepositors\");\r\n        require(_initParams._minDeposit > 0, \"!_minDeposit\");\r\n\r\n        require(_vaultParams.asset != address(0), \"!asset\");\r\n        require(_vaultParams.underlying != address(0), \"!underlying\");\r\n        require(_vaultParams.minimumSupply > 0, \"!minimumSupply\");\r\n        require(_vaultParams.cap > 0, \"!cap\");\r\n        require(\r\n            _vaultParams.cap > _vaultParams.minimumSupply,\r\n            \"cap has to be higher than minimumSupply\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the next options expiry timestamp, this function should be called\r\n     when there is sufficient guard to ensure valid period\r\n     * @param timestamp is the expiry timestamp of the current option\r\n     * @param period is no. of days in between option sales. Available periods are: \r\n     * 7(1w), 14(2w), 30(1m), 90(3m), 180(6m)\r\n     */\r\n    function getNextExpiry(uint256 timestamp, uint256 period)\r\n        internal\r\n        pure\r\n        returns (uint256 nextExpiry)\r\n    {\r\n        if (period == 7) {\r\n            nextExpiry = DateTime.getNextFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? nextExpiry + 1 weeks\r\n                : nextExpiry;\r\n        } else if (period == 14) {\r\n            nextExpiry = DateTime.getNextFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? nextExpiry + 2 weeks\r\n                : nextExpiry;\r\n        } else if (period == 30) {\r\n            nextExpiry = DateTime.getMonthLastFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? DateTime.getMonthLastFriday(nextExpiry + 1 weeks)\r\n                : nextExpiry;\r\n        } else if (period == 90) {\r\n            nextExpiry = DateTime.getQuarterLastFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? DateTime.getQuarterLastFriday(nextExpiry + 1 weeks)\r\n                : nextExpiry;\r\n        } else if (period == 180) {\r\n            nextExpiry = DateTime.getBiannualLastFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? DateTime.getBiannualLastFriday(nextExpiry + 1 weeks)\r\n                : nextExpiry;\r\n        }\r\n\r\n        nextExpiry = nextExpiry - (nextExpiry % (24 hours)) + (8 hours);\r\n    }\r\n}\r\n"
    },
    "contracts/storage/RibbonTreasuryVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\nabstract contract RibbonTreasuryVaultStorageV1 {\r\n    /// @notice Vault's parameters like cap, decimals\r\n    Vault.VaultParams public vaultParams;\r\n\r\n    /// @notice Vault's lifecycle state like round and locked amounts\r\n    Vault.VaultState public vaultState;\r\n\r\n    /// @notice Vault's state of the options sold and the timelocked option\r\n    Vault.OptionState public optionState;\r\n\r\n    /// @notice Stores the user's pending deposit for the round\r\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\r\n\r\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\r\n    /// This is used to determine the number of shares to be returned\r\n    /// to a user with their DepositReceipt.depositAmount\r\n    mapping(uint256 => uint256) public roundPricePerShare;\r\n\r\n    /// @notice Stores pending user withdrawals\r\n    mapping(address => Vault.Withdrawal) public withdrawals;\r\n\r\n    /// @notice Mapping of depositors in the vault\r\n    mapping(address => bool) public depositorsMap;\r\n\r\n    /// @notice Array of depositors in the vault\r\n    address[] public depositorsArray;\r\n\r\n    /// @notice Fee recipient for the performance and management fees\r\n    address public feeRecipient;\r\n\r\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\r\n    // no access to critical vault changes\r\n    address public keeper;\r\n\r\n    /// @notice Logic contract used to price options\r\n    address public optionsPremiumPricer;\r\n\r\n    /// @notice Logic contract used to select strike prices\r\n    address public strikeSelection;\r\n\r\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public performanceFee;\r\n\r\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public managementFee;\r\n\r\n    /// @notice Premium discount on options we are selling (thousandths place: 000 - 999)\r\n    uint256 public premiumDiscount;\r\n\r\n    /// @notice Current oToken premium\r\n    uint256 public currentOtokenPremium;\r\n\r\n    /// @notice Price last overridden strike set to\r\n    uint256 public overriddenStrikePrice;\r\n\r\n    /// @notice Auction duration\r\n    uint256 public auctionDuration;\r\n\r\n    /// @notice Auction id of current option\r\n    uint256 public optionAuctionID;\r\n\r\n    /// @notice Amount locked for scheduled withdrawals last week;\r\n    uint256 public lastQueuedWithdrawAmount;\r\n\r\n    /// @notice Period between each options sale.\r\n    /// Available options 7 (weekly), 14 (biweekly), 30 (monthly), 90 (quarterly), 180 (biannually)\r\n    uint256 public period;\r\n\r\n    /// @notice Maximum number of depositors\r\n    uint256 public maxDepositors;\r\n\r\n    /// @notice Minimum amount to deposit\r\n    uint256 public minDeposit;\r\n\r\n    /// @notice Last round id at which the strike was manually overridden\r\n    uint16 public lastStrikeOverrideRound;\r\n}\r\n\r\n// We are following Compound's method of upgrading new contract implementations\r\n// When we need to add new storage variables, we create a new version of RibbonTreasuryVaultStorage\r\n// e.g. RibbonTreasuryVaultStorage<versionNumber>, so finally it would look like\r\n// contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1, RibbonTreasuryVaultStorageV2\r\nabstract contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1 {\r\n\r\n}\r\n"
    },
    "contracts/libraries/ShareMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\n\r\nlibrary ShareMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant PLACEHOLDER_UINT = 1;\r\n\r\n    function assetToShares(\r\n        uint256 assetAmount,\r\n        uint256 assetPerShare,\r\n        uint256 decimals\r\n    ) internal pure returns (uint256) {\r\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\r\n        // which should never happen.\r\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\r\n        require(assetPerShare > PLACEHOLDER_UINT, \"Invalid assetPerShare\");\r\n\r\n        return assetAmount.mul(10**decimals).div(assetPerShare);\r\n    }\r\n\r\n    function sharesToAsset(\r\n        uint256 shares,\r\n        uint256 assetPerShare,\r\n        uint256 decimals\r\n    ) internal pure returns (uint256) {\r\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\r\n        // which should never happen.\r\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\r\n        require(assetPerShare > PLACEHOLDER_UINT, \"Invalid assetPerShare\");\r\n\r\n        return shares.mul(assetPerShare).div(10**decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\r\n     * @param depositReceipt is the user's deposit receipt\r\n     * @param currentRound is the `round` stored on the vault\r\n     * @param assetPerShare is the price in asset per share\r\n     * @param decimals is the number of decimals the asset/shares use\r\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\r\n     */\r\n    function getSharesFromReceipt(\r\n        Vault.DepositReceipt memory depositReceipt,\r\n        uint256 currentRound,\r\n        uint256 assetPerShare,\r\n        uint256 decimals\r\n    ) internal pure returns (uint256 unredeemedShares) {\r\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\r\n            uint256 sharesFromRound =\r\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\r\n\r\n            return\r\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\r\n        }\r\n        return depositReceipt.unredeemedShares;\r\n    }\r\n\r\n    function pricePerShare(\r\n        uint256 totalSupply,\r\n        uint256 totalBalance,\r\n        uint256 pendingAmount,\r\n        uint256 decimals\r\n    ) internal pure returns (uint256) {\r\n        uint256 singleShare = 10**decimals;\r\n        return\r\n            totalSupply > 0\r\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\r\n                    totalSupply\r\n                )\r\n                : singleShare;\r\n    }\r\n\r\n    /************************************************\r\n     *  HELPERS\r\n     ***********************************************/\r\n\r\n    function assertUint104(uint256 num) internal pure {\r\n        require(num <= type(uint104).max, \"Overflow uint104\");\r\n    }\r\n\r\n    function assertUint128(uint256 num) internal pure {\r\n        require(num <= type(uint128).max, \"Overflow uint128\");\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/libraries/GnosisAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {DSMath} from \"../vendor/DSMath.sol\";\r\nimport {IGnosisAuction} from \"../interfaces/IGnosisAuction.sol\";\r\nimport {IOtoken} from \"../interfaces/GammaInterface.sol\";\r\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\nimport {IRibbonThetaVault} from \"../interfaces/IRibbonThetaVault.sol\";\r\n\r\nlibrary GnosisAuction {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event InitiateGnosisAuction(\r\n        address indexed auctioningToken,\r\n        address indexed biddingToken,\r\n        uint256 auctionCounter,\r\n        address indexed manager\r\n    );\r\n\r\n    event PlaceAuctionBid(\r\n        uint256 auctionId,\r\n        address indexed auctioningToken,\r\n        uint256 sellAmount,\r\n        uint256 buyAmount,\r\n        address indexed bidder\r\n    );\r\n\r\n    struct AuctionDetails {\r\n        address oTokenAddress;\r\n        address gnosisEasyAuction;\r\n        address asset;\r\n        uint256 assetDecimals;\r\n        uint256 oTokenPremium;\r\n        uint256 duration;\r\n    }\r\n\r\n    struct BidDetails {\r\n        address oTokenAddress;\r\n        address gnosisEasyAuction;\r\n        address asset;\r\n        uint256 assetDecimals;\r\n        uint256 auctionId;\r\n        uint256 lockedBalance;\r\n        uint256 optionAllocation;\r\n        uint256 optionPremium;\r\n        address bidder;\r\n    }\r\n\r\n    function startAuction(AuctionDetails calldata auctionDetails)\r\n        internal\r\n        returns (uint256 auctionID)\r\n    {\r\n        uint256 oTokenSellAmount =\r\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\r\n        require(oTokenSellAmount > 0, \"No otokens to sell\");\r\n\r\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\r\n            auctionDetails.gnosisEasyAuction,\r\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\r\n        );\r\n\r\n        // minBidAmount is total oTokens to sell * premium per oToken\r\n        // shift decimals to correspond to decimals of USDC for puts\r\n        // and underlying for calls\r\n        uint256 minBidAmount =\r\n            DSMath.wmul(\r\n                oTokenSellAmount.mul(10**10),\r\n                auctionDetails.oTokenPremium\r\n            );\r\n\r\n        minBidAmount = auctionDetails.assetDecimals > 18\r\n            ? minBidAmount.mul(10**(auctionDetails.assetDecimals.sub(18)))\r\n            : minBidAmount.div(\r\n                10**(uint256(18).sub(auctionDetails.assetDecimals))\r\n            );\r\n\r\n        require(\r\n            minBidAmount <= type(uint96).max,\r\n            \"optionPremium * oTokenSellAmount > type(uint96) max value!\"\r\n        );\r\n\r\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\r\n\r\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\r\n            .initiateAuction(\r\n            // address of oToken we minted and are selling\r\n            auctionDetails.oTokenAddress,\r\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\r\n            auctionDetails.asset,\r\n            // orders can be cancelled at any time during the auction\r\n            auctionEnd,\r\n            // order will last for `duration`\r\n            auctionEnd,\r\n            // we are selling all of the otokens minus a fee taken by gnosis\r\n            uint96(oTokenSellAmount),\r\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\r\n            uint96(minBidAmount),\r\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\r\n            1,\r\n            // the min funding threshold\r\n            0,\r\n            // no atomic closure\r\n            false,\r\n            // access manager contract\r\n            address(0),\r\n            // bytes for storing info like a whitelist for who can bid\r\n            bytes(\"\")\r\n        );\r\n\r\n        emit InitiateGnosisAuction(\r\n            auctionDetails.oTokenAddress,\r\n            auctionDetails.asset,\r\n            auctionID,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function placeBid(BidDetails calldata bidDetails)\r\n        internal\r\n        returns (\r\n            uint256 sellAmount,\r\n            uint256 buyAmount,\r\n            uint64 userId\r\n        )\r\n    {\r\n        // calculate how much to allocate\r\n        sellAmount = bidDetails\r\n            .lockedBalance\r\n            .mul(bidDetails.optionAllocation)\r\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\r\n\r\n        // divide the `asset` sellAmount by the target premium per oToken to\r\n        // get the number of oTokens to buy (8 decimals)\r\n        buyAmount = sellAmount\r\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\r\n            .div(bidDetails.optionPremium)\r\n            .div(10**bidDetails.assetDecimals);\r\n\r\n        require(\r\n            sellAmount <= type(uint96).max,\r\n            \"sellAmount > type(uint96) max value!\"\r\n        );\r\n        require(\r\n            buyAmount <= type(uint96).max,\r\n            \"buyAmount > type(uint96) max value!\"\r\n        );\r\n\r\n        // approve that amount\r\n        IERC20(bidDetails.asset).safeApprove(\r\n            bidDetails.gnosisEasyAuction,\r\n            sellAmount\r\n        );\r\n\r\n        uint96[] memory _minBuyAmounts = new uint96[](1);\r\n        uint96[] memory _sellAmounts = new uint96[](1);\r\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\r\n        _minBuyAmounts[0] = uint96(buyAmount);\r\n        _sellAmounts[0] = uint96(sellAmount);\r\n        _prevSellOrders[\r\n            0\r\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\r\n\r\n        // place sell order with that amount\r\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\r\n            bidDetails.auctionId,\r\n            _minBuyAmounts,\r\n            _sellAmounts,\r\n            _prevSellOrders,\r\n            \"0x\"\r\n        );\r\n\r\n        emit PlaceAuctionBid(\r\n            bidDetails.auctionId,\r\n            bidDetails.oTokenAddress,\r\n            sellAmount,\r\n            buyAmount,\r\n            bidDetails.bidder\r\n        );\r\n\r\n        return (sellAmount, buyAmount, userId);\r\n    }\r\n\r\n    function claimAuctionOtokens(\r\n        Vault.AuctionSellOrder calldata auctionSellOrder,\r\n        address gnosisEasyAuction,\r\n        address counterpartyThetaVault\r\n    ) internal {\r\n        bytes32 order =\r\n            encodeOrder(\r\n                auctionSellOrder.userId,\r\n                auctionSellOrder.buyAmount,\r\n                auctionSellOrder.sellAmount\r\n            );\r\n        bytes32[] memory orders = new bytes32[](1);\r\n        orders[0] = order;\r\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\r\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\r\n            orders\r\n        );\r\n    }\r\n\r\n    function getOTokenSellAmount(address oTokenAddress)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // We take our current oToken balance. That will be our sell amount\r\n        // but otokens will be transferred to gnosis.\r\n        uint256 oTokenSellAmount =\r\n            IERC20(oTokenAddress).balanceOf(address(this));\r\n\r\n        require(\r\n            oTokenSellAmount <= type(uint96).max,\r\n            \"oTokenSellAmount > type(uint96) max value!\"\r\n        );\r\n\r\n        return oTokenSellAmount;\r\n    }\r\n\r\n    function getOTokenPremiumInStables(\r\n        address oTokenAddress,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount\r\n    ) internal view returns (uint256) {\r\n        IOtoken newOToken = IOtoken(oTokenAddress);\r\n        IOptionsPremiumPricer premiumPricer =\r\n            IOptionsPremiumPricer(optionsPremiumPricer);\r\n\r\n        // Apply black-scholes formula (from rvol library) to option given its features\r\n        // and get price for 100 contracts denominated USDC for both call and put options\r\n        uint256 optionPremium =\r\n            premiumPricer.getPremiumInStables(\r\n                newOToken.strikePrice(),\r\n                newOToken.expiryTimestamp(),\r\n                newOToken.isPut()\r\n            );\r\n\r\n        // Apply a discount to incentivize arbitraguers\r\n        optionPremium = optionPremium.mul(premiumDiscount).div(\r\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\r\n        );\r\n\r\n        require(\r\n            optionPremium <= type(uint96).max,\r\n            \"optionPremium > type(uint96) max value!\"\r\n        );\r\n\r\n        return optionPremium;\r\n    }\r\n\r\n    function encodeOrder(\r\n        uint64 userId,\r\n        uint96 buyAmount,\r\n        uint96 sellAmount\r\n    ) internal pure returns (bytes32) {\r\n        return\r\n            bytes32(\r\n                (uint256(userId) << 192) +\r\n                    (uint256(buyAmount) << 96) +\r\n                    uint256(sellAmount)\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IRibbon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\ninterface IRibbonVault {\r\n    function deposit(uint256 amount) external;\r\n\r\n    function depositETH() external payable;\r\n\r\n    function cap() external view returns (uint256);\r\n\r\n    function depositFor(uint256 amount, address creditor) external;\r\n\r\n    function vaultParams() external view returns (Vault.VaultParams memory);\r\n}\r\n\r\ninterface IStrikeSelection {\r\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function delta() external view returns (uint256);\r\n}\r\n\r\ninterface IOptionsPremiumPricer {\r\n    function getPremium(\r\n        uint256 strikePrice,\r\n        uint256 timeToExpiry,\r\n        bool isPut\r\n    ) external view returns (uint256);\r\n\r\n    function getPremiumInStables(\r\n        uint256 strikePrice,\r\n        uint256 timeToExpiry,\r\n        bool isPut\r\n    ) external view returns (uint256);\r\n\r\n    function getOptionDelta(\r\n        uint256 spotPrice,\r\n        uint256 strikePrice,\r\n        uint256 volatility,\r\n        uint256 expiryTimestamp\r\n    ) external view returns (uint256 delta);\r\n\r\n    function getUnderlyingPrice() external view returns (uint256);\r\n\r\n    function priceOracle() external view returns (address);\r\n\r\n    function volatilityOracle() external view returns (address);\r\n\r\n    function optionId() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/libraries/DateTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Source: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's DateTime Library v1.01\r\n// ----------------------------------------------------------------------------\r\n\r\npragma solidity =0.8.4;\r\n\r\nlibrary DateTime {\r\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 constant SECONDS_PER_MINUTE = 60;\r\n    int256 constant OFFSET19700101 = 2440588;\r\n\r\n    uint256 constant DOW_MON = 1;\r\n    uint256 constant DOW_TUE = 2;\r\n    uint256 constant DOW_WED = 3;\r\n    uint256 constant DOW_THU = 4;\r\n    uint256 constant DOW_FRI = 5;\r\n    uint256 constant DOW_SAT = 6;\r\n    uint256 constant DOW_SUN = 7;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate the number of days from 1970/01/01 to year/month/day using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // days = day\r\n    //      - 32075\r\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\r\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\r\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\r\n    //      - offset\r\n    // ------------------------------------------------------------------------\r\n    function _daysFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (uint256 _days) {\r\n        require(year >= 1970);\r\n        int256 _year = int256(year);\r\n        int256 _month = int256(month);\r\n        int256 _day = int256(day);\r\n\r\n        int256 __days =\r\n            _day -\r\n                32075 +\r\n                (1461 * (_year + 4800 + (_month - 14) / 12)) /\r\n                4 +\r\n                (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\r\n                12 -\r\n                (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\r\n                4 -\r\n                OFFSET19700101;\r\n\r\n        _days = uint256(__days);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate year/month/day from the number of days since 1970/01/01 using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // int L = days + 68569 + offset\r\n    // int N = 4 * L / 146097\r\n    // L = L - (146097 * N + 3) / 4\r\n    // year = 4000 * (L + 1) / 1461001\r\n    // L = L - 1461 * year / 4 + 31\r\n    // month = 80 * L / 2447\r\n    // dd = L - 2447 * month / 80\r\n    // L = month / 11\r\n    // month = month + 2 - 12 * L\r\n    // year = 100 * (N - 49) + year + L\r\n    // ------------------------------------------------------------------------\r\n    function _daysToDate(uint256 _days)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        int256 __days = int256(_days);\r\n\r\n        int256 L = __days + 68569 + OFFSET19700101;\r\n        int256 N = (4 * L) / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int256 _year = (4000 * (L + 1)) / 1461001;\r\n        L = L - (1461 * _year) / 4 + 31;\r\n        int256 _month = (80 * L) / 2447;\r\n        int256 _day = L - (2447 * _month) / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint256(_year);\r\n        month = uint256(_month);\r\n        day = uint256(_day);\r\n    }\r\n\r\n    function isLeapYear(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (bool leapYear)\r\n    {\r\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        leapYear = _isLeapYear(year);\r\n    }\r\n\r\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\r\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n    }\r\n\r\n    function getDaysInMonth(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        (uint256 year, uint256 month, ) =\r\n            _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        daysInMonth = _getDaysInMonth(year, month);\r\n    }\r\n\r\n    function _getDaysInMonth(uint256 year, uint256 month)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        if (\r\n            month == 1 ||\r\n            month == 3 ||\r\n            month == 5 ||\r\n            month == 7 ||\r\n            month == 8 ||\r\n            month == 10 ||\r\n            month == 12\r\n        ) {\r\n            daysInMonth = 31;\r\n        } else if (month != 2) {\r\n            daysInMonth = 30;\r\n        } else {\r\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n        }\r\n    }\r\n\r\n    // 1 = Monday, 7 = Sunday\r\n    function getDayOfWeek(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 dayOfWeek)\r\n    {\r\n        uint256 _days = timestamp / SECONDS_PER_DAY;\r\n        dayOfWeek = ((_days + 3) % 7) + 1;\r\n    }\r\n\r\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\r\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\r\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\r\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function timestampFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (uint256 timestamp) {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the Friday of the same week\r\n     * @param timestamp is the given date and time\r\n     * @return the Friday of the same week in unix time\r\n     */\r\n    function getThisWeekFriday(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return timestamp + 5 days - getDayOfWeek(timestamp) * 1 days;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the next friday after the given date and time\r\n     * @param timestamp is the given date and time\r\n     * @return the next friday after the given date and time\r\n     */\r\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\r\n        uint256 friday = getThisWeekFriday(timestamp);\r\n        return friday >= timestamp ? friday : friday + 1 weeks;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the last day of the month\r\n     * @param timestamp is the given date and time\r\n     * @return the last day of the same month in unix time\r\n     */\r\n    function getLastDayOfMonth(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            timestampFromDate(getYear(timestamp), getMonth(timestamp) + 1, 1) -\r\n            1 days;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the last Friday of the month\r\n     * @param timestamp is the given date and time\r\n     * @return the last Friday of the same month in unix time\r\n     */\r\n    function getMonthLastFriday(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 lastDay = getLastDayOfMonth(timestamp);\r\n        uint256 friday = getThisWeekFriday(lastDay);\r\n\r\n        return friday > lastDay ? friday - 1 weeks : friday;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the last Friday of the quarter\r\n     * @param timestamp is the given date and time\r\n     * @return the last Friday of the quarter in unix time\r\n     */\r\n    function getQuarterLastFriday(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 month = getMonth(timestamp);\r\n        uint256 quarterMonth =\r\n            (month <= 3) ? 3 : (month <= 6) ? 6 : (month <= 9) ? 9 : 12;\r\n\r\n        uint256 quarterDate =\r\n            timestampFromDate(getYear(timestamp), quarterMonth, 1);\r\n\r\n        return getMonthLastFriday(quarterDate);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the last Friday of the half-year\r\n     * @param timestamp is the given date and time\r\n     * @return the last friday of the half-year\r\n     */\r\n    function getBiannualLastFriday(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 month = getMonth(timestamp);\r\n        uint256 biannualMonth = (month <= 6) ? 6 : 12;\r\n\r\n        uint256 biannualDate =\r\n            timestampFromDate(getYear(timestamp), biannualMonth, 1);\r\n\r\n        return getMonthLastFriday(biannualDate);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IGnosisAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nlibrary AuctionType {\r\n    struct AuctionData {\r\n        IERC20 auctioningToken;\r\n        IERC20 biddingToken;\r\n        uint256 orderCancellationEndDate;\r\n        uint256 auctionEndDate;\r\n        bytes32 initialAuctionOrder;\r\n        uint256 minimumBiddingAmountPerOrder;\r\n        uint256 interimSumBidAmount;\r\n        bytes32 interimOrder;\r\n        bytes32 clearingPriceOrder;\r\n        uint96 volumeClearingPriceOrder;\r\n        bool minFundingThresholdNotReached;\r\n        bool isAtomicClosureAllowed;\r\n        uint256 feeNumerator;\r\n        uint256 minFundingThreshold;\r\n    }\r\n}\r\n\r\ninterface IGnosisAuction {\r\n    function initiateAuction(\r\n        address _auctioningToken,\r\n        address _biddingToken,\r\n        uint256 orderCancellationEndDate,\r\n        uint256 auctionEndDate,\r\n        uint96 _auctionedSellAmount,\r\n        uint96 _minBuyAmount,\r\n        uint256 minimumBiddingAmountPerOrder,\r\n        uint256 minFundingThreshold,\r\n        bool isAtomicClosureAllowed,\r\n        address accessManagerContract,\r\n        bytes memory accessManagerContractData\r\n    ) external returns (uint256);\r\n\r\n    function auctionCounter() external view returns (uint256);\r\n\r\n    function auctionData(uint256 auctionId)\r\n        external\r\n        view\r\n        returns (AuctionType.AuctionData memory);\r\n\r\n    function auctionAccessManager(uint256 auctionId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function auctionAccessData(uint256 auctionId)\r\n        external\r\n        view\r\n        returns (bytes memory);\r\n\r\n    function FEE_DENOMINATOR() external view returns (uint256);\r\n\r\n    function feeNumerator() external view returns (uint256);\r\n\r\n    function settleAuction(uint256 auctionId) external returns (bytes32);\r\n\r\n    function placeSellOrders(\r\n        uint256 auctionId,\r\n        uint96[] memory _minBuyAmounts,\r\n        uint96[] memory _sellAmounts,\r\n        bytes32[] memory _prevSellOrders,\r\n        bytes calldata allowListCallData\r\n    ) external returns (uint64);\r\n\r\n    function claimFromParticipantOrder(\r\n        uint256 auctionId,\r\n        bytes32[] memory orders\r\n    ) external returns (uint256, uint256);\r\n}\r\n"
    },
    "contracts/libraries/SupportsNonCompliantERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * This library supports ERC20s that have quirks in their behavior.\r\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\r\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\r\n */\r\nlibrary SupportsNonCompliantERC20 {\r\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    function safeApproveNonCompliant(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        if (address(token) == USDT) {\r\n            SafeERC20.safeApprove(token, spender, 0);\r\n        }\r\n        SafeERC20.safeApprove(token, spender, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/vendor/DSMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >0.4.13;\r\n\r\nlibrary DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    //rounds to zero if x*y < RAY / 2\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IRibbonThetaVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\ninterface IRibbonThetaVault {\r\n    function currentOption() external view returns (address);\r\n\r\n    function nextOption() external view returns (address);\r\n\r\n    function vaultParams() external view returns (Vault.VaultParams memory);\r\n\r\n    function vaultState() external view returns (Vault.VaultState memory);\r\n\r\n    function optionState() external view returns (Vault.OptionState memory);\r\n\r\n    function optionAuctionID() external view returns (uint256);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function roundPricePerShare(uint256) external view returns (uint256);\r\n\r\n    function depositFor(uint256 amount, address creditor) external;\r\n\r\n    function initiateWithdraw(uint256 numShares) external;\r\n\r\n    function completeWithdraw() external;\r\n\r\n    function maxRedeem() external;\r\n\r\n    function depositYieldTokenFor(uint256 amount, address creditor) external;\r\n\r\n    function symbol() external view returns (string calldata);\r\n}\r\n"
    },
    "contracts/vaults/BaseVaults/RibbonThetaVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {GnosisAuction} from \"../../libraries/GnosisAuction.sol\";\r\nimport {\r\n    RibbonThetaVaultStorage\r\n} from \"../../storage/RibbonThetaVaultStorage.sol\";\r\nimport {Vault} from \"../../libraries/Vault.sol\";\r\nimport {VaultLifecycle} from \"../../libraries/VaultLifecycle.sol\";\r\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\r\nimport {ILiquidityGauge} from \"../../interfaces/ILiquidityGauge.sol\";\r\nimport {IVaultPauser} from \"../../interfaces/IVaultPauser.sol\";\r\nimport {RibbonVault} from \"./base/RibbonVault.sol\";\r\n\r\n/**\r\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\r\n * the inheritance chain closely.\r\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\r\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\r\n */\r\ncontract RibbonThetaVault is RibbonVault, RibbonThetaVaultStorage {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\r\n    address public immutable OTOKEN_FACTORY;\r\n\r\n    // The minimum duration for an option auction.\r\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event OpenShort(\r\n        address indexed options,\r\n        uint256 depositAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event CloseShort(\r\n        address indexed options,\r\n        uint256 withdrawAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\r\n\r\n    event PremiumDiscountSet(\r\n        uint256 premiumDiscount,\r\n        uint256 newPremiumDiscount\r\n    );\r\n\r\n    event AuctionDurationSet(\r\n        uint256 auctionDuration,\r\n        uint256 newAuctionDuration\r\n    );\r\n\r\n    event InstantWithdraw(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n\r\n    event InitiateGnosisAuction(\r\n        address indexed auctioningToken,\r\n        address indexed biddingToken,\r\n        uint256 auctionCounter,\r\n        address indexed manager\r\n    );\r\n\r\n    /************************************************\r\n     *  STRUCTS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initialization parameters for the vault.\r\n     * @param _owner is the owner of the vault with critical permissions\r\n     * @param _feeRecipient is the address to recieve vault performance and management fees\r\n     * @param _managementFee is the management fee pct.\r\n     * @param _performanceFee is the perfomance fee pct.\r\n     * @param _tokenName is the name of the token\r\n     * @param _tokenSymbol is the symbol of the token\r\n     * @param _optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param _strikeSelection is the address of the contract with strike selection logic\r\n     * @param _premiumDiscount is the vault's discount applied to the premium\r\n     * @param _auctionDuration is the duration of the gnosis auction\r\n     */\r\n    struct InitParams {\r\n        address _owner;\r\n        address _keeper;\r\n        address _feeRecipient;\r\n        uint256 _managementFee;\r\n        uint256 _performanceFee;\r\n        string _tokenName;\r\n        string _tokenSymbol;\r\n        address _optionsPremiumPricer;\r\n        address _strikeSelection;\r\n        uint32 _premiumDiscount;\r\n        uint256 _auctionDuration;\r\n    }\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _oTokenFactory,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _gnosisEasyAuction\r\n    )\r\n        RibbonVault(\r\n            _weth,\r\n            _usdc,\r\n            _gammaController,\r\n            _marginPool,\r\n            _gnosisEasyAuction\r\n        )\r\n    {\r\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\r\n        OTOKEN_FACTORY = _oTokenFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     * @param _initParams is the struct with vault initialization parameters\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function initialize(\r\n        InitParams calldata _initParams,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external initializer {\r\n        baseInitialize(\r\n            _initParams._owner,\r\n            _initParams._keeper,\r\n            _initParams._feeRecipient,\r\n            _initParams._managementFee,\r\n            _initParams._performanceFee,\r\n            _initParams._tokenName,\r\n            _initParams._tokenSymbol,\r\n            _vaultParams\r\n        );\r\n        require(\r\n            _initParams._optionsPremiumPricer != address(0),\r\n            \"!_optionsPremiumPricer\"\r\n        );\r\n        require(\r\n            _initParams._strikeSelection != address(0),\r\n            \"!_strikeSelection\"\r\n        );\r\n        require(\r\n            _initParams._premiumDiscount > 0 &&\r\n                _initParams._premiumDiscount <\r\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\r\n            \"!_premiumDiscount\"\r\n        );\r\n        require(\r\n            _initParams._auctionDuration >= MIN_AUCTION_DURATION,\r\n            \"!_auctionDuration\"\r\n        );\r\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\r\n        strikeSelection = _initParams._strikeSelection;\r\n        premiumDiscount = _initParams._premiumDiscount;\r\n        auctionDuration = _initParams._auctionDuration;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new discount on premiums for options we are selling\r\n     * @param newPremiumDiscount is the premium discount\r\n     */\r\n    function setPremiumDiscount(uint256 newPremiumDiscount)\r\n        external\r\n        onlyKeeper\r\n    {\r\n        require(\r\n            newPremiumDiscount > 0 &&\r\n                newPremiumDiscount <= 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\r\n            \"Invalid discount\"\r\n        );\r\n\r\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\r\n\r\n        premiumDiscount = newPremiumDiscount;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new auction duration\r\n     * @param newAuctionDuration is the auction duration\r\n     */\r\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\r\n        require(\r\n            newAuctionDuration >= MIN_AUCTION_DURATION,\r\n            \"Invalid auction duration\"\r\n        );\r\n\r\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\r\n\r\n        auctionDuration = newAuctionDuration;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new strike selection contract\r\n     * @param newStrikeSelection is the address of the new strike selection contract\r\n     */\r\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\r\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\r\n        strikeSelection = newStrikeSelection;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new options premium pricer contract\r\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\r\n     */\r\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOptionsPremiumPricer != address(0),\r\n            \"!newOptionsPremiumPricer\"\r\n        );\r\n        optionsPremiumPricer = newOptionsPremiumPricer;\r\n    }\r\n\r\n    /**\r\n     * @notice Optionality to set strike price manually\r\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\r\n     */\r\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\r\n        require(strikePrice > 0, \"!strikePrice\");\r\n        overriddenStrikePrice = strikePrice;\r\n        lastStrikeOverrideRound = vaultState.round;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new liquidityGauge contract for this vault\r\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\r\n     */\r\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\r\n        liquidityGauge = newLiquidityGauge;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new optionsPurchaseQueue contract for this vault\r\n     * @param newOptionsPurchaseQueue is the address of the new optionsPurchaseQueue contract\r\n     */\r\n    function setOptionsPurchaseQueue(address newOptionsPurchaseQueue)\r\n        external\r\n        onlyOwner\r\n    {\r\n        optionsPurchaseQueue = newOptionsPurchaseQueue;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets oToken Premium\r\n     * @param minPrice is the new oToken Premium in the units of 10**18\r\n     */\r\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\r\n        require(minPrice > 0, \"!minPrice\");\r\n        currentOtokenPremium = minPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new Vault Pauser contract for this vault\r\n     * @param newVaultPauser is the address of the new vaultPauser contract\r\n     */\r\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\r\n        vaultPauser = newVaultPauser;\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\r\n     * @param amount is the amount to withdraw\r\n     */\r\n    function withdrawInstantly(uint256 amount) external nonReentrant {\r\n        Vault.DepositReceipt storage depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        uint256 currentRound = vaultState.round;\r\n        require(amount > 0, \"!amount\");\r\n        require(depositReceipt.round == currentRound, \"Invalid round\");\r\n\r\n        uint256 receiptAmount = depositReceipt.amount;\r\n        require(receiptAmount >= amount, \"Exceed amount\");\r\n\r\n        // Subtraction underflow checks already ensure it is smaller than uint104\r\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\r\n        vaultState.totalPending = uint128(\r\n            uint256(vaultState.totalPending).sub(amount)\r\n        );\r\n\r\n        emit InstantWithdraw(msg.sender, amount, currentRound);\r\n\r\n        transferAsset(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\r\n        _initiateWithdraw(numShares);\r\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\r\n            numShares\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     */\r\n    function completeWithdraw() external nonReentrant {\r\n        uint256 withdrawAmount = _completeWithdraw();\r\n        lastQueuedWithdrawAmount = uint128(\r\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Stakes a users vault shares\r\n     * @param numShares is the number of shares to stake\r\n     */\r\n    function stake(uint256 numShares) external nonReentrant {\r\n        address _liquidityGauge = liquidityGauge;\r\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\r\n        require(numShares > 0);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        if (heldByAccount < numShares) {\r\n            _redeem(numShares.sub(heldByAccount), false);\r\n        }\r\n        _transfer(msg.sender, address(this), numShares);\r\n        _approve(address(this), _liquidityGauge, numShares);\r\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\r\n     *         This allows all the users to withdraw if the next option is malicious.\r\n     */\r\n    function commitAndClose() external nonReentrant {\r\n        address oldOption = optionState.currentOption;\r\n\r\n        VaultLifecycle.CloseParams memory closeParams =\r\n            VaultLifecycle.CloseParams({\r\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\r\n                USDC: USDC,\r\n                currentOption: oldOption,\r\n                delay: DELAY,\r\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\r\n                overriddenStrikePrice: overriddenStrikePrice,\r\n                strikeSelection: strikeSelection,\r\n                optionsPremiumPricer: optionsPremiumPricer,\r\n                premiumDiscount: premiumDiscount\r\n            });\r\n\r\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\r\n            VaultLifecycle.commitAndClose(closeParams, vaultParams, vaultState);\r\n\r\n        emit NewOptionStrikeSelected(strikePrice, delta);\r\n\r\n        optionState.nextOption = otokenAddress;\r\n\r\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\r\n        require(\r\n            nextOptionReady <= type(uint32).max,\r\n            \"Overflow nextOptionReady\"\r\n        );\r\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\r\n\r\n        _closeShort(oldOption);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short position for the vault.\r\n     */\r\n    function _closeShort(address oldOption) private {\r\n        uint256 lockedAmount = vaultState.lockedAmount;\r\n        if (oldOption != address(0)) {\r\n            vaultState.lastLockedAmount = uint104(lockedAmount);\r\n        }\r\n        vaultState.lockedAmount = 0;\r\n\r\n        optionState.currentOption = address(0);\r\n\r\n        if (oldOption != address(0)) {\r\n            uint256 withdrawAmount =\r\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\r\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Rolls the vault's funds into a new short position.\r\n     */\r\n    function rollToNextOption() external onlyKeeper nonReentrant {\r\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\r\n\r\n        (\r\n            address newOption,\r\n            uint256 lockedBalance,\r\n            uint256 queuedWithdrawAmount\r\n        ) =\r\n            _rollToNextOption(\r\n                lastQueuedWithdrawAmount,\r\n                currQueuedWithdrawShares\r\n            );\r\n\r\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\r\n\r\n        uint256 newQueuedWithdrawShares =\r\n            uint256(vaultState.queuedWithdrawShares).add(\r\n                currQueuedWithdrawShares\r\n            );\r\n        ShareMath.assertUint128(newQueuedWithdrawShares);\r\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\r\n\r\n        currentQueuedWithdrawShares = 0;\r\n\r\n        ShareMath.assertUint104(lockedBalance);\r\n        vaultState.lockedAmount = uint104(lockedBalance);\r\n\r\n        emit OpenShort(newOption, lockedBalance, msg.sender);\r\n\r\n        uint256 optionsMintAmount =\r\n            VaultLifecycle.createShort(\r\n                GAMMA_CONTROLLER,\r\n                MARGIN_POOL,\r\n                newOption,\r\n                lockedBalance\r\n            );\r\n\r\n        VaultLifecycle.allocateOptions(\r\n            optionsPurchaseQueue,\r\n            newOption,\r\n            optionsMintAmount,\r\n            VaultLifecycle.QUEUE_OPTION_ALLOCATION\r\n        );\r\n\r\n        _startAuction();\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate the gnosis auction.\r\n     */\r\n    function startAuction() external onlyKeeper nonReentrant {\r\n        _startAuction();\r\n    }\r\n\r\n    function _startAuction() private {\r\n        GnosisAuction.AuctionDetails memory auctionDetails;\r\n\r\n        address currentOtoken = optionState.currentOption;\r\n\r\n        auctionDetails.oTokenAddress = currentOtoken;\r\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\r\n        auctionDetails.asset = vaultParams.asset;\r\n        auctionDetails.assetDecimals = vaultParams.decimals;\r\n        auctionDetails.oTokenPremium = currentOtokenPremium;\r\n        auctionDetails.duration = auctionDuration;\r\n\r\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Sell the allocated options to the purchase queue post auction settlement\r\n     */\r\n    function sellOptionsToQueue() external onlyKeeper nonReentrant {\r\n        VaultLifecycle.sellOptionsToQueue(\r\n            optionsPurchaseQueue,\r\n            GNOSIS_EASY_AUCTION,\r\n            optionAuctionID\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over from gnosis auction.\r\n     */\r\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\r\n        uint256 unlockedAssetAmount =\r\n            VaultLifecycle.burnOtokens(\r\n                GAMMA_CONTROLLER,\r\n                optionState.currentOption\r\n            );\r\n\r\n        vaultState.lockedAmount = uint104(\r\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Recovery function that returns an ERC20 token to the recipient\r\n     * @param token is the ERC20 token to recover from the vault\r\n     * @param recipient is the recipient of the recovered tokens\r\n     */\r\n    function recoverTokens(address token, address recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(token != vaultParams.asset, \"Vault asset not recoverable\");\r\n        require(token != address(this), \"Vault share not recoverable\");\r\n        require(recipient != address(this), \"Recipient cannot be vault\");\r\n\r\n        IERC20(token).safeTransfer(\r\n            recipient,\r\n            IERC20(token).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice pause a user's vault position\r\n     */\r\n    function pausePosition() external {\r\n        address _vaultPauserAddress = vaultPauser;\r\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\r\n        _redeem(0, true);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\r\n        IVaultPauser(_vaultPauserAddress).pausePosition(\r\n            msg.sender,\r\n            heldByAccount\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/storage/RibbonThetaVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nabstract contract RibbonThetaVaultStorageV1 {\r\n    // Logic contract used to price options\r\n    address public optionsPremiumPricer;\r\n    // Logic contract used to select strike prices\r\n    address public strikeSelection;\r\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\r\n    uint256 public premiumDiscount;\r\n    // Current oToken premium\r\n    uint256 public currentOtokenPremium;\r\n    // Last round id at which the strike was manually overridden\r\n    uint16 public lastStrikeOverrideRound;\r\n    // Price last overridden strike set to\r\n    uint256 public overriddenStrikePrice;\r\n    // Auction duration\r\n    uint256 public auctionDuration;\r\n    // Auction id of current option\r\n    uint256 public optionAuctionID;\r\n}\r\n\r\nabstract contract RibbonThetaVaultStorageV2 {\r\n    // Amount locked for scheduled withdrawals last week;\r\n    uint256 public lastQueuedWithdrawAmount;\r\n}\r\n\r\nabstract contract RibbonThetaVaultStorageV3 {\r\n    // DEPRECATED: Auction will be denominated in USDC if true\r\n    bool private _isUsdcAuction;\r\n    // DEPRECATED: Path for swaps\r\n    bytes private _swapPath;\r\n}\r\n\r\nabstract contract RibbonThetaVaultStorageV4 {\r\n    // LiquidityGauge contract for the vault\r\n    address public liquidityGauge;\r\n}\r\n\r\nabstract contract RibbonThetaVaultStorageV5 {\r\n    // OptionsPurchaseQueue contract for selling options\r\n    address public optionsPurchaseQueue;\r\n}\r\n\r\nabstract contract RibbonThetaVaultStorageV6 {\r\n    // Queued withdraw shares for the current round\r\n    uint256 public currentQueuedWithdrawShares;\r\n}\r\n\r\nabstract contract RibbonThetaVaultStorageV7 {\r\n    // Vault Pauser Contract for the vault\r\n    address public vaultPauser;\r\n}\r\n\r\nabstract contract RibbonThetaVaultStorageV8 {\r\n    // DEPRECATED: Executor role for Swap offers\r\n    address private _offerExecutor;\r\n}\r\n\r\n// We are following Compound's method of upgrading new contract implementations\r\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\r\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\r\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\r\nabstract contract RibbonThetaVaultStorage is\r\n    RibbonThetaVaultStorageV1,\r\n    RibbonThetaVaultStorageV2,\r\n    RibbonThetaVaultStorageV3,\r\n    RibbonThetaVaultStorageV4,\r\n    RibbonThetaVaultStorageV5,\r\n    RibbonThetaVaultStorageV6,\r\n    RibbonThetaVaultStorageV7,\r\n    RibbonThetaVaultStorageV8\r\n{\r\n\r\n}\r\n"
    },
    "contracts/libraries/VaultLifecycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\nimport {ShareMath} from \"./ShareMath.sol\";\r\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\r\nimport {GnosisAuction} from \"./GnosisAuction.sol\";\r\nimport {\r\n    IOtokenFactory,\r\n    IOtoken,\r\n    IController,\r\n    GammaTypes\r\n} from \"../interfaces/GammaInterface.sol\";\r\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\r\nimport {IGnosisAuction} from \"../interfaces/IGnosisAuction.sol\";\r\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\r\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\r\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\r\n\r\nlibrary VaultLifecycle {\r\n    using SafeMath for uint256;\r\n    using SupportsNonCompliantERC20 for IERC20;\r\n\r\n    struct CloseParams {\r\n        address OTOKEN_FACTORY;\r\n        address USDC;\r\n        address currentOption;\r\n        uint256 delay;\r\n        uint16 lastStrikeOverrideRound;\r\n        uint256 overriddenStrikePrice;\r\n        address strikeSelection;\r\n        address optionsPremiumPricer;\r\n        uint256 premiumDiscount;\r\n    }\r\n\r\n    /// @notice Default maximum option allocation for the queue (50%)\r\n    uint256 internal constant QUEUE_OPTION_ALLOCATION = 5000;\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @return otokenAddress is the address of the new option\r\n     * @return strikePrice is the strike price of the new option\r\n     * @return delta is the delta of the new option\r\n     */\r\n    function commitAndClose(\r\n        CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        Vault.VaultState storage vaultState\r\n    )\r\n        external\r\n        returns (\r\n            address otokenAddress,\r\n            uint256 strikePrice,\r\n            uint256 delta\r\n        )\r\n    {\r\n        uint256 expiry = getNextExpiry(closeParams.currentOption);\r\n\r\n        IStrikeSelection selection =\r\n            IStrikeSelection(closeParams.strikeSelection);\r\n\r\n        bool isPut = vaultParams.isPut;\r\n        address underlying = vaultParams.underlying;\r\n        address asset = vaultParams.asset;\r\n\r\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\r\n            vaultState.round\r\n            ? (closeParams.overriddenStrikePrice, selection.delta())\r\n            : selection.getStrikePrice(expiry, isPut);\r\n\r\n        require(strikePrice != 0, \"!strikePrice\");\r\n\r\n        // retrieve address if option already exists, or deploy it\r\n        otokenAddress = getOrDeployOtoken(\r\n            closeParams,\r\n            vaultParams,\r\n            underlying,\r\n            asset,\r\n            strikePrice,\r\n            expiry,\r\n            isPut\r\n        );\r\n\r\n        return (otokenAddress, strikePrice, delta);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\r\n     * @param otokenAddress is the address of the otoken\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param collateralAsset is the address of the collateral asset\r\n     * @param USDC is the address of usdc\r\n     * @param delay is the delay between commitAndClose and rollToNextOption\r\n     */\r\n    function verifyOtoken(\r\n        address otokenAddress,\r\n        Vault.VaultParams storage vaultParams,\r\n        address collateralAsset,\r\n        address USDC,\r\n        uint256 delay\r\n    ) private view {\r\n        require(otokenAddress != address(0), \"!otokenAddress\");\r\n\r\n        IOtoken otoken = IOtoken(otokenAddress);\r\n        require(otoken.isPut() == vaultParams.isPut, \"Type mismatch\");\r\n        require(\r\n            otoken.underlyingAsset() == vaultParams.underlying,\r\n            \"Wrong underlyingAsset\"\r\n        );\r\n        require(\r\n            otoken.collateralAsset() == collateralAsset,\r\n            \"Wrong collateralAsset\"\r\n        );\r\n\r\n        // we just assume all options use USDC as the strike\r\n        require(otoken.strikeAsset() == USDC, \"strikeAsset != USDC\");\r\n\r\n        uint256 readyAt = block.timestamp.add(delay);\r\n        require(otoken.expiryTimestamp() >= readyAt, \"Expiry before delay\");\r\n    }\r\n\r\n    /**\r\n     * @param decimals is the decimals of the asset\r\n     * @param totalBalance is the vaults total balance of the asset\r\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\r\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\r\n     * @param performanceFee is the perf fee percent to charge on premiums\r\n     * @param managementFee is the management fee percent to charge on the AUM\r\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\r\n     */\r\n    struct RolloverParams {\r\n        uint256 decimals;\r\n        uint256 totalBalance;\r\n        uint256 currentShareSupply;\r\n        uint256 lastQueuedWithdrawAmount;\r\n        uint256 performanceFee;\r\n        uint256 managementFee;\r\n        uint256 currentQueuedWithdrawShares;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the shares to mint, new price per share, and\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\r\n     * @param params is the rollover parameters passed to compute the next state\r\n     * @return newLockedAmount is the amount of funds to allocate for the new round\r\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\r\n     * @return newPricePerShare is the price per share of the new round\r\n     * @return mintShares is the amount of shares to mint from deposits\r\n     * @return performanceFeeInAsset is the performance fee charged by vault\r\n     * @return totalVaultFee is the total amount of fee charged by vault\r\n     */\r\n    function rollover(\r\n        Vault.VaultState storage vaultState,\r\n        RolloverParams calldata params\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 newLockedAmount,\r\n            uint256 queuedWithdrawAmount,\r\n            uint256 newPricePerShare,\r\n            uint256 mintShares,\r\n            uint256 performanceFeeInAsset,\r\n            uint256 totalVaultFee\r\n        )\r\n    {\r\n        uint256 currentBalance = params.totalBalance;\r\n        uint256 pendingAmount = vaultState.totalPending;\r\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\r\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\r\n\r\n        // Deduct older queued withdraws so we don't charge fees on them\r\n        uint256 balanceForVaultFees =\r\n            currentBalance.sub(params.lastQueuedWithdrawAmount);\r\n\r\n        {\r\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycle\r\n                .getVaultFees(\r\n                balanceForVaultFees,\r\n                vaultState.lastLockedAmount,\r\n                vaultState.totalPending,\r\n                params.performanceFee,\r\n                params.managementFee\r\n            );\r\n        }\r\n\r\n        // Take into account the fee\r\n        // so we can calculate the newPricePerShare\r\n        currentBalance = currentBalance.sub(totalVaultFee);\r\n\r\n        {\r\n            newPricePerShare = ShareMath.pricePerShare(\r\n                params.currentShareSupply.sub(lastQueuedWithdrawShares),\r\n                currentBalance.sub(params.lastQueuedWithdrawAmount),\r\n                pendingAmount,\r\n                params.decimals\r\n            );\r\n\r\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount.add(\r\n                ShareMath.sharesToAsset(\r\n                    params.currentQueuedWithdrawShares,\r\n                    newPricePerShare,\r\n                    params.decimals\r\n                )\r\n            );\r\n\r\n            // After closing the short, if the options expire in-the-money\r\n            // vault pricePerShare would go down because vault's asset balance decreased.\r\n            // This ensures that the newly-minted shares do not take on the loss.\r\n            mintShares = ShareMath.assetToShares(\r\n                pendingAmount,\r\n                newPricePerShare,\r\n                params.decimals\r\n            );\r\n        }\r\n\r\n        return (\r\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\r\n            queuedWithdrawAmount,\r\n            newPricePerShare,\r\n            mintShares,\r\n            performanceFeeInAsset,\r\n            totalVaultFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\r\n     * @param oTokenAddress is the address of the otoken to mint\r\n     * @param depositAmount is the amount of collateral to deposit\r\n     * @return the otoken mint amount\r\n     */\r\n    function createShort(\r\n        address gammaController,\r\n        address marginPool,\r\n        address oTokenAddress,\r\n        uint256 depositAmount\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n        uint256 newVaultID =\r\n            (controller.getAccountVaultCounter(address(this))).add(1);\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IOtoken oToken = IOtoken(oTokenAddress);\r\n        address collateralAsset = oToken.collateralAsset();\r\n\r\n        uint256 collateralDecimals =\r\n            uint256(IERC20Detailed(collateralAsset).decimals());\r\n        uint256 mintAmount;\r\n\r\n        if (oToken.isPut()) {\r\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\r\n            // This is because of an issue with precision.\r\n            //\r\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\r\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\r\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\r\n            //\r\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\r\n            // We retain the dust in the vault so the calling contract can withdraw the\r\n            // actual locked amount + dust at settlement.\r\n            //\r\n            // To test this behavior, we can console.log\r\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\r\n            // to see how much dust (or excess collateral) is left behind.\r\n            mintAmount = depositAmount\r\n                .mul(10**Vault.OTOKEN_DECIMALS)\r\n                .mul(10**18) // we use 10**18 to give extra precision\r\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\r\n        } else {\r\n            mintAmount = depositAmount;\r\n\r\n            if (collateralDecimals > 8) {\r\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\r\n                if (mintAmount > scaleBy) {\r\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\r\n                }\r\n            }\r\n        }\r\n\r\n        // double approve to fix non-compliant ERC20s\r\n        IERC20 collateralToken = IERC20(collateralAsset);\r\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\r\n\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](3);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.OpenVault,\r\n            address(this), // owner\r\n            address(this), // receiver\r\n            address(0), // asset, otoken\r\n            newVaultID, // vaultId\r\n            0, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.DepositCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            collateralAsset, // deposited asset\r\n            newVaultID, // vaultId\r\n            depositAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[2] = IController.ActionArgs(\r\n            IController.ActionType.MintShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            oTokenAddress, // option address\r\n            newVaultID, // vaultId\r\n            mintAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        return mintAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\r\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\r\n     calling SettleVault action, this assumption should hold.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @return amount of collateral redeemed from the vault\r\n     */\r\n    function settleShort(address gammaController) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        // The short position has been previously closed, or all the otokens have been burned.\r\n        // So we return early.\r\n        if (address(collateralToken) == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to settle the short position using the normal way\r\n        // Delete the vault and withdraw all remaining collateral from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.SettleVault,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(0), // not used\r\n            vaultID, // vaultId\r\n            0, // not used\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\r\n     * It calls the `Redeem` action to claim the payout.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param oldOption is the address of the old option\r\n     * @param asset is the address of the vault's asset\r\n     * @return amount of asset received by exercising the option\r\n     */\r\n    function settleLong(\r\n        address gammaController,\r\n        address oldOption,\r\n        address asset\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\r\n\r\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to redeem the profits\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.Redeem,\r\n            address(0), // not used\r\n            address(this), // address to send profits to\r\n            oldOption, // address of otoken\r\n            0, // not used\r\n            oldOptionBalance, // otoken balance\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        return endAssetBalance.sub(startAssetBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\r\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param currentOption is the address of the current option\r\n     * @return amount of collateral redeemed by burning otokens\r\n     */\r\n    function burnOtokens(address gammaController, address currentOption)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        uint256 numOTokensToBurn =\r\n            IERC20(currentOption).balanceOf(address(this));\r\n\r\n        require(numOTokensToBurn > 0, \"No oTokens to burn\");\r\n\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // Burning `amount` of oTokens from the ribbon vault,\r\n        // then withdrawing the corresponding collateral amount from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](2);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.BurnShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            address(vault.shortOtokens[0]), // otoken address\r\n            vaultID, // vaultId\r\n            numOTokensToBurn, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.WithdrawCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(collateralToken), // withdrawn asset\r\n            vaultID, // vaultId\r\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\r\n                vault.shortAmounts[0]\r\n            ), // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the performance and management fee for this week's round\r\n     * @param currentBalance is the balance of funds held on the vault after closing short\r\n     * @param lastLockedAmount is the amount of funds locked from the previous round\r\n     * @param pendingAmount is the pending deposit amount\r\n     * @param performanceFeePercent is the performance fee pct.\r\n     * @param managementFeePercent is the management fee pct.\r\n     * @return performanceFeeInAsset is the performance fee\r\n     * @return managementFeeInAsset is the management fee\r\n     * @return vaultFee is the total fees\r\n     */\r\n    function getVaultFees(\r\n        uint256 currentBalance,\r\n        uint256 lastLockedAmount,\r\n        uint256 pendingAmount,\r\n        uint256 performanceFeePercent,\r\n        uint256 managementFeePercent\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 performanceFeeInAsset,\r\n            uint256 managementFeeInAsset,\r\n            uint256 vaultFee\r\n        )\r\n    {\r\n        // At the first round, currentBalance=0, pendingAmount>0\r\n        // so we just do not charge anything on the first round\r\n        uint256 lockedBalanceSansPending =\r\n            currentBalance > pendingAmount\r\n                ? currentBalance.sub(pendingAmount)\r\n                : 0;\r\n\r\n        uint256 _performanceFeeInAsset;\r\n        uint256 _managementFeeInAsset;\r\n        uint256 _vaultFee;\r\n\r\n        // Take performance fee and management fee ONLY if difference between\r\n        // last week and this week's vault deposits, taking into account pending\r\n        // deposits and withdrawals, is positive. If it is negative, last week's\r\n        // option expired ITM past breakeven, and the vault took a loss so we\r\n        // do not collect performance fee for last week\r\n        if (lockedBalanceSansPending > lastLockedAmount) {\r\n            _performanceFeeInAsset = performanceFeePercent > 0\r\n                ? lockedBalanceSansPending\r\n                    .sub(lastLockedAmount)\r\n                    .mul(performanceFeePercent)\r\n                    .div(100 * Vault.FEE_MULTIPLIER)\r\n                : 0;\r\n            _managementFeeInAsset = managementFeePercent > 0\r\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\r\n                    100 * Vault.FEE_MULTIPLIER\r\n                )\r\n                : 0;\r\n\r\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\r\n        }\r\n\r\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Either retrieves the option token if it already exists, or deploy it\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param underlying is the address of the underlying asset of the option\r\n     * @param collateralAsset is the address of the collateral asset of the option\r\n     * @param strikePrice is the strike price of the option\r\n     * @param expiry is the expiry timestamp of the option\r\n     * @param isPut is whether the option is a put\r\n     * @return the address of the option\r\n     */\r\n    function getOrDeployOtoken(\r\n        CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        address underlying,\r\n        address collateralAsset,\r\n        uint256 strikePrice,\r\n        uint256 expiry,\r\n        bool isPut\r\n    ) internal returns (address) {\r\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\r\n\r\n        address otokenFromFactory =\r\n            factory.getOtoken(\r\n                underlying,\r\n                closeParams.USDC,\r\n                collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        if (otokenFromFactory != address(0)) {\r\n            return otokenFromFactory;\r\n        }\r\n\r\n        address otoken =\r\n            factory.createOtoken(\r\n                underlying,\r\n                closeParams.USDC,\r\n                collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        verifyOtoken(\r\n            otoken,\r\n            vaultParams,\r\n            collateralAsset,\r\n            closeParams.USDC,\r\n            closeParams.delay\r\n        );\r\n\r\n        return otoken;\r\n    }\r\n\r\n    function getOTokenPremium(\r\n        address oTokenAddress,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount\r\n    ) external view returns (uint256) {\r\n        return\r\n            _getOTokenPremium(\r\n                oTokenAddress,\r\n                optionsPremiumPricer,\r\n                premiumDiscount\r\n            );\r\n    }\r\n\r\n    function _getOTokenPremium(\r\n        address oTokenAddress,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount\r\n    ) internal view returns (uint256) {\r\n        IOtoken newOToken = IOtoken(oTokenAddress);\r\n        IOptionsPremiumPricer premiumPricer =\r\n            IOptionsPremiumPricer(optionsPremiumPricer);\r\n\r\n        // Apply black-scholes formula (from rvol library) to option given its features\r\n        // and get price for 100 contracts denominated in the underlying asset for call option\r\n        // and USDC for put option\r\n        uint256 optionPremium =\r\n            premiumPricer.getPremium(\r\n                newOToken.strikePrice(),\r\n                newOToken.expiryTimestamp(),\r\n                newOToken.isPut()\r\n            );\r\n\r\n        // Apply a discount to incentivize arbitraguers\r\n        optionPremium = optionPremium.mul(premiumDiscount).div(\r\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\r\n        );\r\n\r\n        require(\r\n            optionPremium <= type(uint96).max,\r\n            \"optionPremium > type(uint96) max value!\"\r\n        );\r\n        require(optionPremium > 0, \"!optionPremium\");\r\n\r\n        return optionPremium;\r\n    }\r\n\r\n    /**\r\n     * @notice Starts the gnosis auction\r\n     * @param auctionDetails is the struct with all the custom parameters of the auction\r\n     * @return the auction id of the newly created auction\r\n     */\r\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        return GnosisAuction.startAuction(auctionDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Settles the gnosis auction\r\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\r\n     * @param auctionID is the auction ID of the gnosis easy auction\r\n     */\r\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\r\n        internal\r\n    {\r\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\r\n    }\r\n\r\n    /**\r\n     * @notice Places a bid in an auction\r\n     * @param bidDetails is the struct with all the details of the\r\n      bid including the auction's id and how much to bid\r\n     */\r\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\r\n        external\r\n        returns (\r\n            uint256 sellAmount,\r\n            uint256 buyAmount,\r\n            uint64 userId\r\n        )\r\n    {\r\n        return GnosisAuction.placeBid(bidDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Claims the oTokens belonging to the vault\r\n     * @param auctionSellOrder is the sell order of the bid\r\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\r\n     holding custody to the funds\r\n     * @param counterpartyThetaVault is the address of the counterparty theta\r\n     vault of this delta vault\r\n     */\r\n    function claimAuctionOtokens(\r\n        Vault.AuctionSellOrder calldata auctionSellOrder,\r\n        address gnosisEasyAuction,\r\n        address counterpartyThetaVault\r\n    ) external {\r\n        GnosisAuction.claimAuctionOtokens(\r\n            auctionSellOrder,\r\n            gnosisEasyAuction,\r\n            counterpartyThetaVault\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Allocates the vault's minted options to the OptionsPurchaseQueue contract\r\n     * @dev Skipped if the optionsPurchaseQueue doesn't exist\r\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\r\n     * @param option is the minted option\r\n     * @param optionsAmount is the amount of options minted\r\n     * @param optionAllocation is the maximum % of options to allocate towards the purchase queue (will only allocate\r\n     *  up to the amount that is on the queue)\r\n     * @return allocatedOptions is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\r\n     */\r\n    function allocateOptions(\r\n        address optionsPurchaseQueue,\r\n        address option,\r\n        uint256 optionsAmount,\r\n        uint256 optionAllocation\r\n    ) external returns (uint256 allocatedOptions) {\r\n        // Skip if optionsPurchaseQueue is address(0)\r\n        if (optionsPurchaseQueue != address(0)) {\r\n            allocatedOptions = optionsAmount.mul(optionAllocation).div(\r\n                100 * Vault.OPTION_ALLOCATION_MULTIPLIER\r\n            );\r\n            allocatedOptions = IOptionsPurchaseQueue(optionsPurchaseQueue)\r\n                .getOptionsAllocation(address(this), allocatedOptions);\r\n\r\n            if (allocatedOptions != 0) {\r\n                IERC20(option).approve(optionsPurchaseQueue, allocatedOptions);\r\n                IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\r\n                    allocatedOptions\r\n                );\r\n            }\r\n        }\r\n\r\n        return allocatedOptions;\r\n    }\r\n\r\n    /**\r\n     * @notice Sell the allocated options to the purchase queue post auction settlement\r\n     * @dev Reverts if the auction hasn't settled yet\r\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\r\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\r\n     * @return totalPremiums Total premiums earnt by the vault\r\n     */\r\n    function sellOptionsToQueue(\r\n        address optionsPurchaseQueue,\r\n        address gnosisEasyAuction,\r\n        uint256 optionAuctionID\r\n    ) external returns (uint256) {\r\n        uint256 settlementPrice =\r\n            getAuctionSettlementPrice(gnosisEasyAuction, optionAuctionID);\r\n        require(settlementPrice != 0, \"!settlementPrice\");\r\n\r\n        return\r\n            IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\r\n                settlementPrice\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the settlement price of a settled auction\r\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\r\n     * @return settlementPrice Auction settlement price\r\n     */\r\n    function getAuctionSettlementPrice(\r\n        address gnosisEasyAuction,\r\n        uint256 optionAuctionID\r\n    ) public view returns (uint256) {\r\n        bytes32 clearingPriceOrder =\r\n            IGnosisAuction(gnosisEasyAuction)\r\n                .auctionData(optionAuctionID)\r\n                .clearingPriceOrder;\r\n\r\n        if (clearingPriceOrder == bytes32(0)) {\r\n            // Current auction hasn't settled yet\r\n            return 0;\r\n        } else {\r\n            // We decode the clearingPriceOrder to find the auction settlement price\r\n            // settlementPrice = clearingPriceOrder.sellAmount / clearingPriceOrder.buyAmount\r\n            return\r\n                (10**Vault.OTOKEN_DECIMALS)\r\n                    .mul(\r\n                    uint96(uint256(clearingPriceOrder)) // sellAmount\r\n                )\r\n                    .div(\r\n                    uint96(uint256(clearingPriceOrder) >> 96) // buyAmount\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the constructor params satisfy requirements\r\n     * @param owner is the owner of the vault with critical permissions\r\n     * @param feeRecipient is the address to recieve vault performance and management fees\r\n     * @param performanceFee is the perfomance fee pct.\r\n     * @param tokenName is the name of the token\r\n     * @param tokenSymbol is the symbol of the token\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function verifyInitializerParams(\r\n        address owner,\r\n        address keeper,\r\n        address feeRecipient,\r\n        uint256 performanceFee,\r\n        uint256 managementFee,\r\n        string calldata tokenName,\r\n        string calldata tokenSymbol,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external pure {\r\n        require(owner != address(0), \"!owner\");\r\n        require(keeper != address(0), \"!keeper\");\r\n        require(feeRecipient != address(0), \"!feeRecipient\");\r\n        require(\r\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"performanceFee >= 100%\"\r\n        );\r\n        require(\r\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"managementFee >= 100%\"\r\n        );\r\n        require(bytes(tokenName).length > 0, \"!tokenName\");\r\n        require(bytes(tokenSymbol).length > 0, \"!tokenSymbol\");\r\n\r\n        require(_vaultParams.asset != address(0), \"!asset\");\r\n        require(_vaultParams.underlying != address(0), \"!underlying\");\r\n        require(_vaultParams.minimumSupply > 0, \"!minimumSupply\");\r\n        require(_vaultParams.cap > 0, \"!cap\");\r\n        require(\r\n            _vaultParams.cap > _vaultParams.minimumSupply,\r\n            \"cap has to be higher than minimumSupply\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the next option expiry timestamp\r\n     * @param currentOption is the otoken address that the vault is currently writing\r\n     */\r\n    function getNextExpiry(address currentOption)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // uninitialized state\r\n        if (currentOption == address(0)) {\r\n            return getNextFriday(block.timestamp);\r\n        }\r\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\r\n\r\n        // After options expiry if no options are written for >1 week\r\n        // We need to give the ability continue writing options\r\n        if (block.timestamp > currentExpiry + 7 days) {\r\n            return getNextFriday(block.timestamp);\r\n        }\r\n        return getNextFriday(currentExpiry);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the next options expiry timestamp\r\n     * @param timestamp is the expiry timestamp of the current option\r\n     * Reference: https://codereview.stackexchange.com/a/33532\r\n     * Examples:\r\n     * getNextFriday(week 1 thursday) -> week 1 friday\r\n     * getNextFriday(week 1 friday) -> week 2 friday\r\n     * getNextFriday(week 1 saturday) -> week 2 friday\r\n     */\r\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\r\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\r\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\r\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\r\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\r\n\r\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\r\n        if (timestamp >= friday8am) {\r\n            friday8am += 7 days;\r\n        }\r\n        return friday8am;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ILiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface ILiquidityGauge {\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function deposit(\r\n        uint256 _value,\r\n        address _addr,\r\n        bool _claim_rewards\r\n    ) external;\r\n\r\n    function withdraw(uint256 _value) external;\r\n}\r\n"
    },
    "contracts/interfaces/IVaultPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface IVaultPauser {\r\n    /// @notice pause vault position of an account with max amount\r\n    /// @param _account the address of user\r\n    /// @param _amount amount of shares\r\n    function pausePosition(address _account, uint256 _amount) external;\r\n\r\n    /// @notice resume vault position of an account with max amount\r\n    /// @param _vaultAddress the address of vault\r\n    function resumePosition(address _vaultAddress) external;\r\n}\r\n"
    },
    "contracts/vaults/BaseVaults/base/RibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {\r\n    ReentrancyGuardUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {\r\n    ERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\nimport {Vault} from \"../../../libraries/Vault.sol\";\r\nimport {VaultLifecycle} from \"../../../libraries/VaultLifecycle.sol\";\r\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\r\nimport {IWETH} from \"../../../interfaces/IWETH.sol\";\r\n\r\ncontract RibbonVault is\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable,\r\n    ERC20Upgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  NON UPGRADEABLE STORAGE\r\n     ***********************************************/\r\n\r\n    /// @notice Stores the user's pending deposit for the round\r\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\r\n\r\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\r\n    /// This is used to determine the number of shares to be returned\r\n    /// to a user with their DepositReceipt.depositAmount\r\n    mapping(uint256 => uint256) public roundPricePerShare;\r\n\r\n    /// @notice Stores pending user withdrawals\r\n    mapping(address => Vault.Withdrawal) public withdrawals;\r\n\r\n    /// @notice Vault's parameters like cap, decimals\r\n    Vault.VaultParams public vaultParams;\r\n\r\n    /// @notice Vault's lifecycle state like round and locked amounts\r\n    Vault.VaultState public vaultState;\r\n\r\n    /// @notice Vault's state of the options sold and the timelocked option\r\n    Vault.OptionState public optionState;\r\n\r\n    /// @notice Fee recipient for the performance and management fees\r\n    address public feeRecipient;\r\n\r\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\r\n    // no access to critical vault changes\r\n    address public keeper;\r\n\r\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public performanceFee;\r\n\r\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public managementFee;\r\n\r\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\r\n    uint256[30] private ____gap;\r\n\r\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\r\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\r\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\r\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public immutable WETH;\r\n\r\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    address public immutable USDC;\r\n\r\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\r\n    uint256 public constant DELAY = 0;\r\n\r\n    /// @notice 7 day period between each options sale.\r\n    uint256 public constant PERIOD = 7 days;\r\n\r\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\r\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\r\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\r\n\r\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\r\n    // which allows users to perform multiple actions on their vaults\r\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\r\n    address public immutable GAMMA_CONTROLLER;\r\n\r\n    // MARGIN_POOL is Gamma protocol's collateral pool.\r\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\r\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\r\n    address public immutable MARGIN_POOL;\r\n\r\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\r\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\r\n    address public immutable GNOSIS_EASY_AUCTION;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event Deposit(address indexed account, uint256 amount, uint256 round);\r\n\r\n    event InitiateWithdraw(\r\n        address indexed account,\r\n        uint256 shares,\r\n        uint256 round\r\n    );\r\n\r\n    event Redeem(address indexed account, uint256 share, uint256 round);\r\n\r\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\r\n\r\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\r\n\r\n    event CapSet(uint256 oldCap, uint256 newCap);\r\n\r\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\r\n\r\n    event CollectVaultFees(\r\n        uint256 performanceFee,\r\n        uint256 vaultFee,\r\n        uint256 round,\r\n        address indexed feeRecipient\r\n    );\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _gnosisEasyAuction\r\n    ) {\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_usdc != address(0), \"!_usdc\");\r\n        require(_gnosisEasyAuction != address(0), \"!_gnosisEasyAuction\");\r\n        require(_gammaController != address(0), \"!_gammaController\");\r\n        require(_marginPool != address(0), \"!_marginPool\");\r\n\r\n        WETH = _weth;\r\n        USDC = _usdc;\r\n        GAMMA_CONTROLLER = _gammaController;\r\n        MARGIN_POOL = _marginPool;\r\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     */\r\n    function baseInitialize(\r\n        address _owner,\r\n        address _keeper,\r\n        address _feeRecipient,\r\n        uint256 _managementFee,\r\n        uint256 _performanceFee,\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) internal initializer {\r\n        VaultLifecycle.verifyInitializerParams(\r\n            _owner,\r\n            _keeper,\r\n            _feeRecipient,\r\n            _performanceFee,\r\n            _managementFee,\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _vaultParams\r\n        );\r\n\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_tokenName, _tokenSymbol);\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n\r\n        keeper = _keeper;\r\n\r\n        feeRecipient = _feeRecipient;\r\n        performanceFee = _performanceFee;\r\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\r\n            WEEKS_PER_YEAR\r\n        );\r\n        vaultParams = _vaultParams;\r\n\r\n        uint256 assetBalance =\r\n            IERC20(vaultParams.asset).balanceOf(address(this));\r\n        ShareMath.assertUint104(assetBalance);\r\n        vaultState.lastLockedAmount = uint104(assetBalance);\r\n\r\n        vaultState.round = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper, \"!keeper\");\r\n        _;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new keeper\r\n     * @param newKeeper is the address of the new keeper\r\n     */\r\n    function setNewKeeper(address newKeeper) external onlyOwner {\r\n        require(newKeeper != address(0), \"!newKeeper\");\r\n        keeper = newKeeper;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new fee recipient\r\n     * @param newFeeRecipient is the address of the new fee recipient\r\n     */\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\r\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\r\n        feeRecipient = newFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the management fee for the vault\r\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\r\n     */\r\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\r\n        require(\r\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid management fee\"\r\n        );\r\n\r\n        // We are dividing annualized management fee by num weeks in a year\r\n        uint256 tmpManagementFee =\r\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\r\n\r\n        emit ManagementFeeSet(managementFee, newManagementFee);\r\n\r\n        managementFee = tmpManagementFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the performance fee for the vault\r\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\r\n     */\r\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\r\n        require(\r\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid performance fee\"\r\n        );\r\n\r\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\r\n\r\n        performanceFee = newPerformanceFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new cap for deposits\r\n     * @param newCap is the new cap for deposits\r\n     */\r\n    function setCap(uint256 newCap) external onlyOwner {\r\n        require(newCap > 0, \"!newCap\");\r\n        ShareMath.assertUint104(newCap);\r\n        emit CapSet(vaultParams.cap, newCap);\r\n        vaultParams.cap = uint104(newCap);\r\n    }\r\n\r\n    /************************************************\r\n     *  DEPOSIT & WITHDRAWALS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\r\n     */\r\n    function depositETH() external payable nonReentrant {\r\n        require(vaultParams.asset == WETH, \"!WETH\");\r\n        require(msg.value > 0, \"!value\");\r\n\r\n        _depositFor(msg.value, msg.sender);\r\n\r\n        IWETH(WETH).deposit{value: msg.value}();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender.\r\n     * @param amount is the amount of `asset` to deposit\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"!amount\");\r\n\r\n        _depositFor(amount, msg.sender);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\r\n     * @notice Used for vault -> vault deposits on the user's behalf\r\n     * @param amount is the amount of `asset` to deposit\r\n     * @param creditor is the address that can claim/withdraw deposited amount\r\n     */\r\n    function depositFor(uint256 amount, address creditor)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"!amount\");\r\n        require(creditor != address(0));\r\n\r\n        _depositFor(amount, creditor);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the vault shares to the creditor\r\n     * @param amount is the amount of `asset` deposited\r\n     * @param creditor is the address to receieve the deposit\r\n     */\r\n    function _depositFor(uint256 amount, address creditor) private {\r\n        uint256 currentRound = vaultState.round;\r\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\r\n\r\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\r\n        require(\r\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\r\n            \"Insufficient balance\"\r\n        );\r\n\r\n        emit Deposit(creditor, amount, currentRound);\r\n\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\r\n\r\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        uint256 depositAmount = amount;\r\n\r\n        // If we have a pending deposit in the current round, we add on to the pending deposit\r\n        if (currentRound == depositReceipt.round) {\r\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\r\n            depositAmount = newAmount;\r\n        }\r\n\r\n        ShareMath.assertUint104(depositAmount);\r\n\r\n        depositReceipts[creditor] = Vault.DepositReceipt({\r\n            round: uint16(currentRound),\r\n            amount: uint104(depositAmount),\r\n            unredeemedShares: uint128(unredeemedShares)\r\n        });\r\n\r\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\r\n        ShareMath.assertUint128(newTotalPending);\r\n\r\n        vaultState.totalPending = uint128(newTotalPending);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function _initiateWithdraw(uint256 numShares) internal {\r\n        require(numShares > 0, \"!numShares\");\r\n\r\n        // We do a max redeem before initiating a withdrawal\r\n        // But we check if they must first have unredeemed shares\r\n        if (\r\n            depositReceipts[msg.sender].amount > 0 ||\r\n            depositReceipts[msg.sender].unredeemedShares > 0\r\n        ) {\r\n            _redeem(0, true);\r\n        }\r\n\r\n        // This caches the `round` variable used in shareBalances\r\n        uint256 currentRound = vaultState.round;\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\r\n\r\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\r\n\r\n        uint256 existingShares = uint256(withdrawal.shares);\r\n\r\n        uint256 withdrawalShares;\r\n        if (withdrawalIsSameRound) {\r\n            withdrawalShares = existingShares.add(numShares);\r\n        } else {\r\n            require(existingShares == 0, \"Existing withdraw\");\r\n            withdrawalShares = numShares;\r\n            withdrawals[msg.sender].round = uint16(currentRound);\r\n        }\r\n\r\n        ShareMath.assertUint128(withdrawalShares);\r\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\r\n\r\n        _transfer(msg.sender, address(this), numShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     * @return withdrawAmount the current withdrawal amount\r\n     */\r\n    function _completeWithdraw() internal returns (uint256) {\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        uint256 withdrawalShares = withdrawal.shares;\r\n        uint256 withdrawalRound = withdrawal.round;\r\n\r\n        // This checks if there is a withdrawal\r\n        require(withdrawalShares > 0, \"Not initiated\");\r\n\r\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\r\n\r\n        // We leave the round number as non-zero to save on gas for subsequent writes\r\n        withdrawals[msg.sender].shares = 0;\r\n        vaultState.queuedWithdrawShares = uint128(\r\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\r\n        );\r\n\r\n        uint256 withdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                withdrawalShares,\r\n                roundPricePerShare[withdrawalRound],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\r\n\r\n        _burn(address(this), withdrawalShares);\r\n\r\n        require(withdrawAmount > 0, \"!withdrawAmount\");\r\n        transferAsset(msg.sender, withdrawAmount);\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem\r\n     */\r\n    function redeem(uint256 numShares) external nonReentrant {\r\n        require(numShares > 0, \"!numShares\");\r\n        _redeem(numShares, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\r\n     */\r\n    function maxRedeem() external nonReentrant {\r\n        _redeem(0, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\r\n     * @param isMax is flag for when callers do a max redemption\r\n     */\r\n    function _redeem(uint256 numShares, bool isMax) internal {\r\n        Vault.DepositReceipt memory depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        // This handles the null case when depositReceipt.round = 0\r\n        // Because we start with round = 1 at `initialize`\r\n        uint256 currentRound = vaultState.round;\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        numShares = isMax ? unredeemedShares : numShares;\r\n        if (numShares == 0) {\r\n            return;\r\n        }\r\n        require(numShares <= unredeemedShares, \"Exceeds available\");\r\n\r\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\r\n        // we debit from the unredeemedShares, but leave the amount field intact\r\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\r\n        if (depositReceipt.round < currentRound) {\r\n            depositReceipts[msg.sender].amount = 0;\r\n        }\r\n\r\n        ShareMath.assertUint128(numShares);\r\n        depositReceipts[msg.sender].unredeemedShares = uint128(\r\n            unredeemedShares.sub(numShares)\r\n        );\r\n\r\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\r\n\r\n        _transfer(address(this), msg.sender, numShares);\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\r\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\r\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\r\n     * @param numRounds is the number of rounds to initialize in the map\r\n     */\r\n    function initRounds(uint256 numRounds) external nonReentrant {\r\n        require(numRounds > 0, \"!numRounds\");\r\n\r\n        uint256 _round = vaultState.round;\r\n        for (uint256 i = 0; i < numRounds; i++) {\r\n            uint256 index = _round + i;\r\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\r\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function that performs most administrative tasks\r\n     * such as setting next option, minting new shares, getting vault fees, etc.\r\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\r\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\r\n     * @return newOption is the new option address\r\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\r\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\r\n     */\r\n    function _rollToNextOption(\r\n        uint256 lastQueuedWithdrawAmount,\r\n        uint256 currentQueuedWithdrawShares\r\n    )\r\n        internal\r\n        returns (\r\n            address newOption,\r\n            uint256 lockedBalance,\r\n            uint256 queuedWithdrawAmount\r\n        )\r\n    {\r\n        require(block.timestamp >= optionState.nextOptionReadyAt, \"!ready\");\r\n\r\n        newOption = optionState.nextOption;\r\n        require(newOption != address(0), \"!nextOption\");\r\n\r\n        address recipient = feeRecipient;\r\n        uint256 mintShares;\r\n        uint256 performanceFeeInAsset;\r\n        uint256 totalVaultFee;\r\n        {\r\n            uint256 newPricePerShare;\r\n            (\r\n                lockedBalance,\r\n                queuedWithdrawAmount,\r\n                newPricePerShare,\r\n                mintShares,\r\n                performanceFeeInAsset,\r\n                totalVaultFee\r\n            ) = VaultLifecycle.rollover(\r\n                vaultState,\r\n                VaultLifecycle.RolloverParams(\r\n                    vaultParams.decimals,\r\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\r\n                    totalSupply(),\r\n                    lastQueuedWithdrawAmount,\r\n                    performanceFee,\r\n                    managementFee,\r\n                    currentQueuedWithdrawShares\r\n                )\r\n            );\r\n\r\n            optionState.currentOption = newOption;\r\n            optionState.nextOption = address(0);\r\n\r\n            // Finalize the pricePerShare at the end of the round\r\n            uint256 currentRound = vaultState.round;\r\n            roundPricePerShare[currentRound] = newPricePerShare;\r\n\r\n            emit CollectVaultFees(\r\n                performanceFeeInAsset,\r\n                totalVaultFee,\r\n                currentRound,\r\n                recipient\r\n            );\r\n\r\n            vaultState.totalPending = 0;\r\n            vaultState.round = uint16(currentRound + 1);\r\n        }\r\n\r\n        _mint(address(this), mintShares);\r\n\r\n        if (totalVaultFee > 0) {\r\n            transferAsset(payable(recipient), totalVaultFee);\r\n        }\r\n\r\n        return (newOption, lockedBalance, queuedWithdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\r\n     * @param recipient is the receiving address\r\n     * @param amount is the transfer amount\r\n     */\r\n    function transferAsset(address recipient, uint256 amount) internal {\r\n        address asset = vaultParams.asset;\r\n        if (asset == WETH) {\r\n            IWETH(WETH).withdraw(amount);\r\n            (bool success, ) = recipient.call{value: amount}(\"\");\r\n            require(success, \"Transfer failed\");\r\n            return;\r\n        }\r\n        IERC20(asset).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Returns the asset balance held on the vault for the account\r\n     * @param account is the address to lookup balance for\r\n     * @return the amount of `asset` custodied by the vault for the user\r\n     */\r\n    function accountVaultBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _decimals = vaultParams.decimals;\r\n        uint256 assetPerShare =\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                _decimals\r\n            );\r\n        return\r\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance including unredeemed shares\r\n     * @param account is the account to lookup share balance for\r\n     * @return the share balance\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\r\n        return heldByAccount.add(heldByVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance split between account and vault holdings\r\n     * @param account is the account to lookup share balance for\r\n     * @return heldByAccount is the shares held by account\r\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\r\n     */\r\n    function shareBalances(address account)\r\n        public\r\n        view\r\n        returns (uint256 heldByAccount, uint256 heldByVault)\r\n    {\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\r\n\r\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\r\n            return (balanceOf(account), 0);\r\n        }\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                vaultState.round,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        return (balanceOf(account), unredeemedShares);\r\n    }\r\n\r\n    /**\r\n     * @notice The price of a unit of share denominated in the `asset`\r\n     */\r\n    function pricePerShare() external view returns (uint256) {\r\n        return\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                vaultParams.decimals\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\r\n     * @return total balance of the vault, including the amounts locked in third party protocols\r\n     */\r\n    function totalBalance() public view returns (uint256) {\r\n        return\r\n            uint256(vaultState.lockedAmount).add(\r\n                IERC20(vaultParams.asset).balanceOf(address(this))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token decimals\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return vaultParams.decimals;\r\n    }\r\n\r\n    function cap() external view returns (uint256) {\r\n        return vaultParams.cap;\r\n    }\r\n\r\n    function nextOptionReadyAt() external view returns (uint256) {\r\n        return optionState.nextOptionReadyAt;\r\n    }\r\n\r\n    function currentOption() external view returns (address) {\r\n        return optionState.currentOption;\r\n    }\r\n\r\n    function nextOption() external view returns (address) {\r\n        return optionState.nextOption;\r\n    }\r\n\r\n    function totalPending() external view returns (uint256) {\r\n        return vaultState.totalPending;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IOptionsPurchaseQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IOptionsPurchaseQueue {\r\n    /**\r\n     * @dev Contains purchase request info\r\n     * @param optionsAmount Amount of options to purchase\r\n     * @param premiums Total premiums the buyer is spending to purchase the options (optionsAmount * ceilingPrice)\r\n     *  We need to track the premiums here since the ceilingPrice could change between the time the purchase was\r\n     *  requested and when the options are sold\r\n     * @param buyer The buyer requesting this purchase\r\n     */\r\n    struct Purchase {\r\n        uint128 optionsAmount; // Slot 0\r\n        uint128 premiums;\r\n        address buyer; // Slot 1\r\n    }\r\n\r\n    function purchases(address, uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint128,\r\n            uint128,\r\n            address\r\n        );\r\n\r\n    function totalOptionsAmount(address) external view returns (uint256);\r\n\r\n    function vaultAllocatedOptions(address) external view returns (uint256);\r\n\r\n    function whitelistedBuyer(address) external view returns (bool);\r\n\r\n    function minPurchaseAmount(address) external view returns (uint256);\r\n\r\n    function ceilingPrice(address) external view returns (uint256);\r\n\r\n    function getPurchases(address vault)\r\n        external\r\n        view\r\n        returns (Purchase[] memory);\r\n\r\n    function getPremiums(address vault, uint256 optionsAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getOptionsAllocation(address vault, uint256 allocatedOptions)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function requestPurchase(address vault, uint256 optionsAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function allocateOptions(uint256 allocatedOptions)\r\n        external\r\n        returns (uint256);\r\n\r\n    function sellToBuyers(uint256 settlementPrice) external returns (uint256);\r\n\r\n    function cancelAllPurchases(address vault) external;\r\n\r\n    function addWhitelist(address buyer) external;\r\n\r\n    function removeWhitelist(address buyer) external;\r\n\r\n    function setCeilingPrice(address vault, uint256 price) external;\r\n\r\n    function setMinPurchaseAmount(address vault, uint256 amount) external;\r\n}\r\n"
    },
    "contracts/vaults/YearnVaults/base/RibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    ReentrancyGuardUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {\r\n    ERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport {IYearnVault} from \"../../../interfaces/IYearn.sol\";\r\nimport {Vault} from \"../../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\r\nimport {IWETH} from \"../../../interfaces/IWETH.sol\";\r\n\r\ncontract RibbonVault is\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable,\r\n    ERC20Upgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  NON UPGRADEABLE STORAGE\r\n     ***********************************************/\r\n\r\n    /// @notice Stores the user's pending deposit for the round\r\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\r\n\r\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\r\n    /// This is used to determine the number of shares to be returned\r\n    /// to a user with their DepositReceipt.depositAmount\r\n    mapping(uint256 => uint256) public roundPricePerShare;\r\n\r\n    /// @notice Stores pending user withdrawals\r\n    mapping(address => Vault.Withdrawal) public withdrawals;\r\n\r\n    /// @notice Vault's parameters like cap, decimals\r\n    Vault.VaultParams public vaultParams;\r\n\r\n    /// @notice Vault's lifecycle state like round and locked amounts\r\n    Vault.VaultState public vaultState;\r\n\r\n    /// @notice Vault's state of the options sold and the timelocked option\r\n    Vault.OptionState public optionState;\r\n\r\n    /// @notice Fee recipient for the performance and management fees\r\n    address public feeRecipient;\r\n\r\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\r\n    // no access to critical vault changes\r\n    address public keeper;\r\n\r\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public performanceFee;\r\n\r\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public managementFee;\r\n\r\n    /// @notice Yearn vault contract\r\n    IYearnVault public collateralToken;\r\n\r\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\r\n    uint256[30] private ____gap;\r\n\r\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\r\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaYearnVaultStorage\r\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public immutable WETH;\r\n\r\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    address public immutable USDC;\r\n\r\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\r\n    uint256 public constant DELAY = 0;\r\n\r\n    /// @notice 7 day period between each options sale.\r\n    uint256 public constant PERIOD = 7 days;\r\n\r\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\r\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\r\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\r\n\r\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\r\n    // which allows users to perform multiple actions on their vaults\r\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\r\n    address public immutable GAMMA_CONTROLLER;\r\n\r\n    // MARGIN_POOL is Gamma protocol's collateral pool.\r\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\r\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\r\n    address public immutable MARGIN_POOL;\r\n\r\n    // SWAP_CONTRACT is a contract for settling bids via signed messages\r\n    // https://github.com/ribbon-finance/ribbon-v2/blob/master/contracts/utils/Swap.sol\r\n    address public immutable SWAP_CONTRACT;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event Deposit(address indexed account, uint256 amount, uint256 round);\r\n\r\n    event InitiateWithdraw(\r\n        address indexed account,\r\n        uint256 shares,\r\n        uint256 round\r\n    );\r\n\r\n    event Redeem(address indexed account, uint256 share, uint256 round);\r\n\r\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\r\n\r\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\r\n\r\n    event CapSet(uint256 oldCap, uint256 newCap);\r\n\r\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\r\n\r\n    event CollectVaultFees(\r\n        uint256 performanceFee,\r\n        uint256 vaultFee,\r\n        uint256 round,\r\n        address indexed feeRecipient\r\n    );\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    ) {\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_usdc != address(0), \"!_usdc\");\r\n        require(_swapContract != address(0), \"!_swapContract\");\r\n        require(_gammaController != address(0), \"!_gammaController\");\r\n        require(_marginPool != address(0), \"!_marginPool\");\r\n\r\n        WETH = _weth;\r\n        USDC = _usdc;\r\n        GAMMA_CONTROLLER = _gammaController;\r\n        MARGIN_POOL = _marginPool;\r\n        SWAP_CONTRACT = _swapContract;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     */\r\n    function baseInitialize(\r\n        address _owner,\r\n        address _keeper,\r\n        address _feeRecipient,\r\n        uint256 _managementFee,\r\n        uint256 _performanceFee,\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) internal initializer {\r\n        VaultLifecycleWithSwap.verifyInitializerParams(\r\n            _owner,\r\n            _keeper,\r\n            _feeRecipient,\r\n            _performanceFee,\r\n            _managementFee,\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _vaultParams\r\n        );\r\n\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_tokenName, _tokenSymbol);\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n\r\n        keeper = _keeper;\r\n\r\n        feeRecipient = _feeRecipient;\r\n        performanceFee = _performanceFee;\r\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\r\n            WEEKS_PER_YEAR\r\n        );\r\n        vaultParams = _vaultParams;\r\n\r\n        uint256 assetBalance = totalBalance();\r\n        ShareMath.assertUint104(assetBalance);\r\n        vaultState.lastLockedAmount = uint104(assetBalance);\r\n\r\n        vaultState.round = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper, \"!keeper\");\r\n        _;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new keeper\r\n     * @param newKeeper is the address of the new keeper\r\n     */\r\n    function setNewKeeper(address newKeeper) external onlyOwner {\r\n        require(newKeeper != address(0), \"!newKeeper\");\r\n        keeper = newKeeper;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new fee recipient\r\n     * @param newFeeRecipient is the address of the new fee recipient\r\n     */\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\r\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\r\n        feeRecipient = newFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the management fee for the vault\r\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\r\n     */\r\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\r\n        require(\r\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid management fee\"\r\n        );\r\n\r\n        // We are dividing annualized management fee by num weeks in a year\r\n        uint256 tmpManagementFee =\r\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\r\n\r\n        emit ManagementFeeSet(managementFee, newManagementFee);\r\n\r\n        managementFee = tmpManagementFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the performance fee for the vault\r\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\r\n     */\r\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\r\n        require(\r\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid performance fee\"\r\n        );\r\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\r\n        performanceFee = newPerformanceFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new cap for deposits\r\n     * @param newCap is the new cap for deposits\r\n     */\r\n    function setCap(uint256 newCap) external onlyOwner {\r\n        require(newCap > 0, \"!newCap\");\r\n        ShareMath.assertUint104(newCap);\r\n        emit CapSet(vaultParams.cap, newCap);\r\n        vaultParams.cap = uint104(newCap);\r\n    }\r\n\r\n    /************************************************\r\n     *  DEPOSIT & WITHDRAWALS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender.\r\n     * @param amount is the amount of `asset` to deposit\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"!amount\");\r\n\r\n        _depositFor(amount, msg.sender);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\r\n     * @notice Used for vault -> vault deposits on the user's behalf\r\n     * @param amount is the amount of `asset` to deposit\r\n     * @param creditor is the address that can claim/withdraw deposited amount\r\n     */\r\n    function depositFor(uint256 amount, address creditor)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"!amount\");\r\n        require(creditor != address(0), \"!creditor\");\r\n\r\n        _depositFor(amount, creditor);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the vault shares to the creditor\r\n     * @param amount is the amount of `asset` deposited\r\n     * @param creditor is the address to receieve the deposit\r\n     */\r\n    function _depositFor(uint256 amount, address creditor) private {\r\n        uint256 currentRound = vaultState.round;\r\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\r\n\r\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\r\n        require(\r\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\r\n            \"Insufficient balance\"\r\n        );\r\n\r\n        emit Deposit(creditor, amount, currentRound);\r\n\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\r\n\r\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        uint256 depositAmount = amount;\r\n        // If we have a pending deposit in the current round, we add on to the pending deposit\r\n        if (currentRound == depositReceipt.round) {\r\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\r\n            depositAmount = newAmount;\r\n        }\r\n\r\n        ShareMath.assertUint104(depositAmount);\r\n\r\n        depositReceipts[creditor] = Vault.DepositReceipt({\r\n            round: uint16(currentRound),\r\n            amount: uint104(depositAmount),\r\n            unredeemedShares: uint128(unredeemedShares)\r\n        });\r\n\r\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\r\n        ShareMath.assertUint128(newTotalPending);\r\n        vaultState.totalPending = uint128(newTotalPending);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function _initiateWithdraw(uint256 numShares) internal {\r\n        require(numShares > 0, \"!numShares\");\r\n\r\n        // We do a max redeem before initiating a withdrawal\r\n        // But we check if they must first have unredeemed shares\r\n        if (\r\n            depositReceipts[msg.sender].amount > 0 ||\r\n            depositReceipts[msg.sender].unredeemedShares > 0\r\n        ) {\r\n            _redeem(0, true);\r\n        }\r\n\r\n        // This caches the `round` variable used in shareBalances\r\n        uint256 currentRound = vaultState.round;\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\r\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\r\n        uint256 existingShares = uint256(withdrawal.shares);\r\n        uint256 withdrawalShares;\r\n        if (withdrawalIsSameRound) {\r\n            withdrawalShares = existingShares.add(numShares);\r\n        } else {\r\n            require(existingShares == 0, \"Existing withdraw\");\r\n            withdrawalShares = numShares;\r\n            withdrawals[msg.sender].round = uint16(currentRound);\r\n        }\r\n        ShareMath.assertUint128(withdrawalShares);\r\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\r\n\r\n        _transfer(msg.sender, address(this), numShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     * @return withdrawAmount the current withdrawal amount\r\n     */\r\n    function _completeWithdraw() internal returns (uint256) {\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        uint256 withdrawalShares = withdrawal.shares;\r\n        uint256 withdrawalRound = withdrawal.round;\r\n\r\n        // This checks if there is a withdrawal\r\n        require(withdrawalShares > 0, \"Not initiated\");\r\n\r\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\r\n\r\n        // We leave the round number as non-zero to save on gas for subsequent writes\r\n        withdrawals[msg.sender].shares = 0;\r\n        vaultState.queuedWithdrawShares = uint128(\r\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\r\n        );\r\n\r\n        uint256 withdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                withdrawalShares,\r\n                roundPricePerShare[withdrawalRound],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\r\n\r\n        _burn(address(this), withdrawalShares);\r\n\r\n        require(withdrawAmount > 0, \"!withdrawAmount\");\r\n\r\n        transferAsset(msg.sender, withdrawAmount);\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem\r\n     */\r\n    function redeem(uint256 numShares) external nonReentrant {\r\n        require(numShares > 0, \"!numShares\");\r\n        _redeem(numShares, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\r\n     */\r\n    function maxRedeem() external nonReentrant {\r\n        _redeem(0, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\r\n     * @param isMax is flag for when callers do a max redemption\r\n     */\r\n    function _redeem(uint256 numShares, bool isMax) internal {\r\n        Vault.DepositReceipt memory depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        // This handles the null case when depositReceipt.round = 0\r\n        // Because we start with round = 1 at `initialize`\r\n        uint256 currentRound = vaultState.round;\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        numShares = isMax ? unredeemedShares : numShares;\r\n        if (numShares == 0) {\r\n            return;\r\n        }\r\n        require(numShares <= unredeemedShares, \"Exceeds available\");\r\n\r\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\r\n        // we debit from the unredeemedShares, but leave the amount field intact\r\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\r\n        if (depositReceipt.round < currentRound) {\r\n            depositReceipts[msg.sender].amount = 0;\r\n        }\r\n\r\n        ShareMath.assertUint128(numShares);\r\n\r\n        depositReceipts[msg.sender].unredeemedShares = uint128(\r\n            unredeemedShares.sub(numShares)\r\n        );\r\n\r\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\r\n\r\n        _transfer(address(this), msg.sender, numShares);\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Helper function that performs most administrative tasks\r\n     * such as minting new shares, getting vault fees, etc.\r\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\r\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\r\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\r\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\r\n     */\r\n    function _closeRound(\r\n        uint256 lastQueuedWithdrawAmount,\r\n        uint256 currentQueuedWithdrawShares\r\n    ) internal returns (uint256 lockedBalance, uint256 queuedWithdrawAmount) {\r\n        address recipient = feeRecipient;\r\n        uint256 mintShares;\r\n        uint256 performanceFeeInAsset;\r\n        uint256 totalVaultFee;\r\n        {\r\n            uint256 newPricePerShare;\r\n            (\r\n                lockedBalance,\r\n                queuedWithdrawAmount,\r\n                newPricePerShare,\r\n                mintShares,\r\n                performanceFeeInAsset,\r\n                totalVaultFee\r\n            ) = VaultLifecycleWithSwap.closeRound(\r\n                vaultState,\r\n                VaultLifecycleWithSwap.CloseParams(\r\n                    vaultParams.decimals,\r\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\r\n                    totalSupply(),\r\n                    lastQueuedWithdrawAmount,\r\n                    performanceFee,\r\n                    managementFee,\r\n                    currentQueuedWithdrawShares\r\n                )\r\n            );\r\n\r\n            // Finalize the pricePerShare at the end of the round\r\n            uint256 currentRound = vaultState.round;\r\n            roundPricePerShare[currentRound] = newPricePerShare;\r\n\r\n            emit CollectVaultFees(\r\n                performanceFeeInAsset,\r\n                totalVaultFee,\r\n                currentRound,\r\n                recipient\r\n            );\r\n\r\n            vaultState.totalPending = 0;\r\n            vaultState.round = uint16(currentRound + 1);\r\n        }\r\n\r\n        _mint(address(this), mintShares);\r\n\r\n        if (totalVaultFee > 0) {\r\n            IERC20(vaultParams.asset).safeTransfer(\r\n                payable(recipient),\r\n                totalVaultFee\r\n            );\r\n        }\r\n\r\n        return (lockedBalance, queuedWithdrawAmount);\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Returns the asset balance held on the vault for the account\r\n     * @param account is the address to lookup balance for\r\n     * @return the amount of `asset` custodied by the vault for the user\r\n     */\r\n    function accountVaultBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _decimals = vaultParams.decimals;\r\n        uint256 assetPerShare =\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                _decimals\r\n            );\r\n        return\r\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance including unredeemed shares\r\n     * @param account is the account to lookup share balance for\r\n     * @return the share balance\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\r\n        return heldByAccount.add(heldByVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance split between account and vault holdings\r\n     * @param account is the account to lookup share balance for\r\n     * @return heldByAccount is the shares held by account\r\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\r\n     */\r\n    function shareBalances(address account)\r\n        public\r\n        view\r\n        returns (uint256 heldByAccount, uint256 heldByVault)\r\n    {\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\r\n\r\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\r\n            return (balanceOf(account), 0);\r\n        }\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                vaultState.round,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        return (balanceOf(account), unredeemedShares);\r\n    }\r\n\r\n    /**\r\n     * @notice The price of a unit of share denominated in the `asset`\r\n     */\r\n    function pricePerShare() external view returns (uint256) {\r\n        return\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                vaultParams.decimals\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\r\n     * @return total balance of the vault, including the amounts locked in third party protocols\r\n     */\r\n    function totalBalance() public view returns (uint256) {\r\n        // After calling closeRound, current option is set to none\r\n        // We also commit the lockedAmount but do not deposit into Opyn\r\n        // which results in double counting of asset balance and lockedAmount\r\n\r\n        return\r\n            optionState.currentOption != address(0)\r\n                ? uint256(vaultState.lockedAmount).add(\r\n                    IERC20(vaultParams.asset).balanceOf(address(this))\r\n                )\r\n                : IERC20(vaultParams.asset).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token decimals\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return vaultParams.decimals;\r\n    }\r\n\r\n    function cap() external view returns (uint256) {\r\n        return vaultParams.cap;\r\n    }\r\n\r\n    function nextOptionReadyAt() external view returns (uint256) {\r\n        return optionState.nextOptionReadyAt;\r\n    }\r\n\r\n    function currentOption() external view returns (address) {\r\n        return optionState.currentOption;\r\n    }\r\n\r\n    function nextOption() external view returns (address) {\r\n        return optionState.nextOption;\r\n    }\r\n\r\n    function totalPending() external view returns (uint256) {\r\n        return vaultState.totalPending;\r\n    }\r\n\r\n    /************************************************\r\n     *  HELPERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\r\n     * @param recipient is the receiving address\r\n     * @param amount is the transfer amount\r\n     */\r\n    function transferAsset(address recipient, uint256 amount) internal {\r\n        address asset = vaultParams.asset;\r\n        if (asset == WETH) {\r\n            IWETH(WETH).withdraw(amount);\r\n            (bool success, ) = recipient.call{value: amount}(\"\");\r\n            require(success, \"Transfer failed\");\r\n            return;\r\n        }\r\n        IERC20(asset).safeTransfer(recipient, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IYearn.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface IYearnVault {\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function deposit(uint256 _amount, address _recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function withdraw(\r\n        uint256 _maxShares,\r\n        address _recipient,\r\n        uint256 _maxLoss\r\n    ) external returns (uint256);\r\n\r\n    function approve(address _recipient, uint256 _amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ninterface IYearnRegistry {\r\n    function latestVault(address token) external returns (address);\r\n}\r\n\r\ninterface IYearnPricer {\r\n    function setExpiryPriceInOracle(uint256 _expiryTimestamp) external;\r\n\r\n    function getPrice() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/libraries/VaultLifecycleWithSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\nimport {ShareMath} from \"./ShareMath.sol\";\r\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\r\nimport {GnosisAuction} from \"./GnosisAuction.sol\";\r\nimport {\r\n    IOtokenFactory,\r\n    IOtoken,\r\n    IController,\r\n    GammaTypes\r\n} from \"../interfaces/GammaInterface.sol\";\r\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\r\nimport {ISwap} from \"../interfaces/ISwap.sol\";\r\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\r\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\r\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\r\n\r\nlibrary VaultLifecycleWithSwap {\r\n    using SafeMath for uint256;\r\n    using SupportsNonCompliantERC20 for IERC20;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct CommitParams {\r\n        address OTOKEN_FACTORY;\r\n        address USDC;\r\n        address collateralAsset;\r\n        address currentOption;\r\n        uint256 delay;\r\n        uint16 lastStrikeOverrideRound;\r\n        uint256 overriddenStrikePrice;\r\n        address strikeSelection;\r\n        address optionsPremiumPricer;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\r\n     * @param commitParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @return otokenAddress is the address of the new option\r\n     * @return strikePrice is the strike price of the new option\r\n     * @return delta is the delta of the new option\r\n     */\r\n    function commitNextOption(\r\n        CommitParams calldata commitParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        Vault.VaultState storage vaultState\r\n    )\r\n        external\r\n        returns (\r\n            address otokenAddress,\r\n            uint256 strikePrice,\r\n            uint256 delta\r\n        )\r\n    {\r\n        uint256 expiry = getNextExpiry(commitParams.currentOption);\r\n\r\n        IStrikeSelection selection =\r\n            IStrikeSelection(commitParams.strikeSelection);\r\n\r\n        bool isPut = vaultParams.isPut;\r\n        address underlying = vaultParams.underlying;\r\n\r\n        (strikePrice, delta) = commitParams.lastStrikeOverrideRound ==\r\n            vaultState.round\r\n            ? (commitParams.overriddenStrikePrice, selection.delta())\r\n            : selection.getStrikePrice(expiry, isPut);\r\n\r\n        require(strikePrice != 0, \"!strikePrice\");\r\n\r\n        // retrieve address if option already exists, or deploy it\r\n        otokenAddress = getOrDeployOtoken(\r\n            commitParams,\r\n            vaultParams,\r\n            underlying,\r\n            strikePrice,\r\n            expiry,\r\n            isPut\r\n        );\r\n\r\n        return (otokenAddress, strikePrice, delta);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\r\n     * @param otokenAddress is the address of the otoken\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param collateralAsset is the address of the collateral asset\r\n     * @param USDC is the address of usdc\r\n     * @param delay is the delay between commitAndClose and rollToNextOption\r\n     */\r\n    function verifyOtoken(\r\n        address otokenAddress,\r\n        Vault.VaultParams storage vaultParams,\r\n        address collateralAsset,\r\n        address USDC,\r\n        uint256 delay\r\n    ) private view {\r\n        require(otokenAddress != address(0), \"!otokenAddress\");\r\n\r\n        IOtoken otoken = IOtoken(otokenAddress);\r\n        require(otoken.isPut() == vaultParams.isPut, \"Type mismatch\");\r\n        require(\r\n            otoken.underlyingAsset() == vaultParams.underlying,\r\n            \"Wrong underlyingAsset\"\r\n        );\r\n        require(\r\n            otoken.collateralAsset() == collateralAsset,\r\n            \"Wrong collateralAsset\"\r\n        );\r\n\r\n        // we just assume all options use USDC as the strike\r\n        require(otoken.strikeAsset() == USDC, \"strikeAsset != USDC\");\r\n\r\n        uint256 readyAt = block.timestamp.add(delay);\r\n        require(otoken.expiryTimestamp() >= readyAt, \"Expiry before delay\");\r\n    }\r\n\r\n    /**\r\n     * @param decimals is the decimals of the asset\r\n     * @param totalBalance is the vault's total asset balance\r\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\r\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\r\n     * @param performanceFee is the perf fee percent to charge on premiums\r\n     * @param managementFee is the management fee percent to charge on the AUM\r\n     */\r\n    struct CloseParams {\r\n        uint256 decimals;\r\n        uint256 totalBalance;\r\n        uint256 currentShareSupply;\r\n        uint256 lastQueuedWithdrawAmount;\r\n        uint256 performanceFee;\r\n        uint256 managementFee;\r\n        uint256 currentQueuedWithdrawShares;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the shares to mint, new price per share, and\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\r\n     * @param params is the rollover parameters passed to compute the next state\r\n     * @return newLockedAmount is the amount of funds to allocate for the new round\r\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\r\n     * @return newPricePerShare is the price per share of the new round\r\n     * @return mintShares is the amount of shares to mint from deposits\r\n     * @return performanceFeeInAsset is the performance fee charged by vault\r\n     * @return totalVaultFee is the total amount of fee charged by vault\r\n     */\r\n    function closeRound(\r\n        Vault.VaultState storage vaultState,\r\n        CloseParams calldata params\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 newLockedAmount,\r\n            uint256 queuedWithdrawAmount,\r\n            uint256 newPricePerShare,\r\n            uint256 mintShares,\r\n            uint256 performanceFeeInAsset,\r\n            uint256 totalVaultFee\r\n        )\r\n    {\r\n        uint256 currentBalance = params.totalBalance;\r\n        uint256 pendingAmount = vaultState.totalPending;\r\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\r\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\r\n\r\n        // Deduct older queued withdraws so we don't charge fees on them\r\n        uint256 balanceForVaultFees =\r\n            currentBalance.sub(params.lastQueuedWithdrawAmount);\r\n\r\n        {\r\n            (performanceFeeInAsset, , totalVaultFee) = getVaultFees(\r\n                balanceForVaultFees,\r\n                vaultState.lastLockedAmount,\r\n                vaultState.totalPending,\r\n                params.performanceFee,\r\n                params.managementFee\r\n            );\r\n        }\r\n\r\n        // Take into account the fee\r\n        // so we can calculate the newPricePerShare\r\n        currentBalance = currentBalance.sub(totalVaultFee);\r\n\r\n        {\r\n            newPricePerShare = ShareMath.pricePerShare(\r\n                params.currentShareSupply.sub(lastQueuedWithdrawShares),\r\n                currentBalance.sub(params.lastQueuedWithdrawAmount),\r\n                pendingAmount,\r\n                params.decimals\r\n            );\r\n\r\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount.add(\r\n                ShareMath.sharesToAsset(\r\n                    params.currentQueuedWithdrawShares,\r\n                    newPricePerShare,\r\n                    params.decimals\r\n                )\r\n            );\r\n\r\n            // After closing the short, if the options expire in-the-money\r\n            // vault pricePerShare would go down because vault's asset balance decreased.\r\n            // This ensures that the newly-minted shares do not take on the loss.\r\n            mintShares = ShareMath.assetToShares(\r\n                pendingAmount,\r\n                newPricePerShare,\r\n                params.decimals\r\n            );\r\n        }\r\n\r\n        return (\r\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\r\n            queuedWithdrawAmount,\r\n            newPricePerShare,\r\n            mintShares,\r\n            performanceFeeInAsset,\r\n            totalVaultFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\r\n     * @param oTokenAddress is the address of the otoken to mint\r\n     * @param depositAmount is the amount of collateral to deposit\r\n     * @return the otoken mint amount\r\n     */\r\n    function createShort(\r\n        address gammaController,\r\n        address marginPool,\r\n        address oTokenAddress,\r\n        uint256 depositAmount\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n        uint256 newVaultID =\r\n            (controller.getAccountVaultCounter(address(this))).add(1);\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IOtoken oToken = IOtoken(oTokenAddress);\r\n        address collateralAsset = oToken.collateralAsset();\r\n\r\n        uint256 collateralDecimals =\r\n            uint256(IERC20Detailed(collateralAsset).decimals());\r\n        uint256 mintAmount;\r\n\r\n        if (oToken.isPut()) {\r\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\r\n            // This is because of an issue with precision.\r\n            //\r\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\r\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\r\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\r\n            //\r\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\r\n            // We retain the dust in the vault so the calling contract can withdraw the\r\n            // actual locked amount + dust at settlement.\r\n            //\r\n            // To test this behavior, we can console.log\r\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\r\n            // to see how much dust (or excess collateral) is left behind.\r\n            mintAmount = depositAmount\r\n                .mul(10**Vault.OTOKEN_DECIMALS)\r\n                .mul(10**18) // we use 10**18 to give extra precision\r\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\r\n        } else {\r\n            mintAmount = depositAmount;\r\n\r\n            if (collateralDecimals > 8) {\r\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\r\n                if (mintAmount > scaleBy) {\r\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\r\n                }\r\n            }\r\n        }\r\n\r\n        // double approve to fix non-compliant ERC20s\r\n        IERC20 collateralToken = IERC20(collateralAsset);\r\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\r\n\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](3);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.OpenVault,\r\n            address(this), // owner\r\n            address(this), // receiver\r\n            address(0), // asset, otoken\r\n            newVaultID, // vaultId\r\n            0, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.DepositCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            collateralAsset, // deposited asset\r\n            newVaultID, // vaultId\r\n            depositAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[2] = IController.ActionArgs(\r\n            IController.ActionType.MintShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            oTokenAddress, // option address\r\n            newVaultID, // vaultId\r\n            mintAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        return mintAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\r\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\r\n     calling SettleVault action, this assumption should hold.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @return amount of collateral redeemed from the vault\r\n     */\r\n    function settleShort(address gammaController) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        // The short position has been previously closed, or all the otokens have been burned.\r\n        // So we return early.\r\n        if (address(collateralToken) == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to settle the short position using the normal way\r\n        // Delete the vault and withdraw all remaining collateral from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.SettleVault,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(0), // not used\r\n            vaultID, // vaultId\r\n            0, // not used\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\r\n     * It calls the `Redeem` action to claim the payout.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param oldOption is the address of the old option\r\n     * @param asset is the address of the vault's asset\r\n     * @return amount of asset received by exercising the option\r\n     */\r\n    function settleLong(\r\n        address gammaController,\r\n        address oldOption,\r\n        address asset\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\r\n\r\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to redeem the profits\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.Redeem,\r\n            address(0), // not used\r\n            address(this), // address to send profits to\r\n            oldOption, // address of otoken\r\n            0, // not used\r\n            oldOptionBalance, // otoken balance\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        return endAssetBalance.sub(startAssetBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\r\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param currentOption is the address of the current option\r\n     * @return amount of collateral redeemed by burning otokens\r\n     */\r\n    function burnOtokens(address gammaController, address currentOption)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        uint256 numOTokensToBurn =\r\n            IERC20(currentOption).balanceOf(address(this));\r\n\r\n        require(numOTokensToBurn > 0, \"No oTokens to burn\");\r\n\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // Burning `amount` of oTokens from the ribbon vault,\r\n        // then withdrawing the corresponding collateral amount from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](2);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.BurnShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            address(vault.shortOtokens[0]), // otoken address\r\n            vaultID, // vaultId\r\n            numOTokensToBurn, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.WithdrawCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(collateralToken), // withdrawn asset\r\n            vaultID, // vaultId\r\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\r\n                vault.shortAmounts[0]\r\n            ), // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the performance and management fee for this week's round\r\n     * @param currentBalance is the balance of funds held on the vault after closing short\r\n     * @param lastLockedAmount is the amount of funds locked from the previous round\r\n     * @param pendingAmount is the pending deposit amount\r\n     * @param performanceFeePercent is the performance fee pct.\r\n     * @param managementFeePercent is the management fee pct.\r\n     * @return performanceFeeInAsset is the performance fee\r\n     * @return managementFeeInAsset is the management fee\r\n     * @return vaultFee is the total fees\r\n     */\r\n    function getVaultFees(\r\n        uint256 currentBalance,\r\n        uint256 lastLockedAmount,\r\n        uint256 pendingAmount,\r\n        uint256 performanceFeePercent,\r\n        uint256 managementFeePercent\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 performanceFeeInAsset,\r\n            uint256 managementFeeInAsset,\r\n            uint256 vaultFee\r\n        )\r\n    {\r\n        // At the first round, currentBalance=0, pendingAmount>0\r\n        // so we just do not charge anything on the first round\r\n        uint256 lockedBalanceSansPending =\r\n            currentBalance > pendingAmount\r\n                ? currentBalance.sub(pendingAmount)\r\n                : 0;\r\n\r\n        uint256 _performanceFeeInAsset;\r\n        uint256 _managementFeeInAsset;\r\n        uint256 _vaultFee;\r\n\r\n        // Take performance fee and management fee ONLY if difference between\r\n        // last week and this week's vault deposits, taking into account pending\r\n        // deposits and withdrawals, is positive. If it is negative, last week's\r\n        // option expired ITM past breakeven, and the vault took a loss so we\r\n        // do not collect performance fee for last week\r\n        if (lockedBalanceSansPending > lastLockedAmount) {\r\n            _performanceFeeInAsset = performanceFeePercent > 0\r\n                ? lockedBalanceSansPending\r\n                    .sub(lastLockedAmount)\r\n                    .mul(performanceFeePercent)\r\n                    .div(100 * Vault.FEE_MULTIPLIER)\r\n                : 0;\r\n            _managementFeeInAsset = managementFeePercent > 0\r\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\r\n                    100 * Vault.FEE_MULTIPLIER\r\n                )\r\n                : 0;\r\n\r\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\r\n        }\r\n\r\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Either retrieves the option token if it already exists, or deploy it\r\n     * @param commitParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param underlying is the address of the underlying asset of the option\r\n     * @param strikePrice is the strike price of the option\r\n     * @param expiry is the expiry timestamp of the option\r\n     * @param isPut is whether the option is a put\r\n     * @return the address of the option\r\n     */\r\n    function getOrDeployOtoken(\r\n        CommitParams calldata commitParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        address underlying,\r\n        uint256 strikePrice,\r\n        uint256 expiry,\r\n        bool isPut\r\n    ) internal returns (address) {\r\n        IOtokenFactory factory = IOtokenFactory(commitParams.OTOKEN_FACTORY);\r\n\r\n        address otokenFromFactory =\r\n            factory.getOtoken(\r\n                underlying,\r\n                commitParams.USDC,\r\n                commitParams.collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        if (otokenFromFactory != address(0)) {\r\n            return otokenFromFactory;\r\n        }\r\n\r\n        address otoken =\r\n            factory.createOtoken(\r\n                underlying,\r\n                commitParams.USDC,\r\n                commitParams.collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        verifyOtoken(\r\n            otoken,\r\n            vaultParams,\r\n            commitParams.collateralAsset,\r\n            commitParams.USDC,\r\n            commitParams.delay\r\n        );\r\n\r\n        return otoken;\r\n    }\r\n\r\n    /**\r\n     * @notice Creates an offer in the Swap Contract\r\n     * @param currentOtoken is the current otoken address\r\n     * @param currOtokenPremium is premium for each otoken\r\n     * @param swapContract the address of the swap contract\r\n     * @param vaultParams is the struct with vault general data\r\n     * @return optionAuctionID auction id of the newly created offer\r\n     */\r\n    function createOffer(\r\n        address currentOtoken,\r\n        uint256 currOtokenPremium,\r\n        address swapContract,\r\n        Vault.VaultParams storage vaultParams\r\n    ) external returns (uint256 optionAuctionID) {\r\n        require(\r\n            currOtokenPremium <= type(uint96).max,\r\n            \"currentOtokenPremium > type(uint96) max value!\"\r\n        );\r\n        require(currOtokenPremium > 0, \"!currentOtokenPremium\");\r\n\r\n        uint256 oTokenBalance = IERC20(currentOtoken).balanceOf(address(this));\r\n        require(\r\n            oTokenBalance <= type(uint128).max,\r\n            \"oTokenBalance > type(uint128) max value!\"\r\n        );\r\n\r\n        // Use safeIncrease instead of safeApproval because safeApproval is only used for initial\r\n        // approval and cannot be called again. Using safeIncrease allow us to call _createOffer\r\n        // even when we are approving the same oTokens we have used before. This might happen if\r\n        // we accidentally burn the oTokens before settlement.\r\n        uint256 allowance =\r\n            IERC20(currentOtoken).allowance(address(this), swapContract);\r\n\r\n        if (allowance < oTokenBalance) {\r\n            IERC20(currentOtoken).safeIncreaseAllowance(\r\n                swapContract,\r\n                oTokenBalance.sub(allowance)\r\n            );\r\n        }\r\n\r\n        uint256 decimals = vaultParams.decimals;\r\n\r\n        // If total size is larger than 1, set minimum bid as 1\r\n        // Otherwise, set minimum bid to one tenth the total size\r\n        uint256 minBidSize =\r\n            oTokenBalance > 10**decimals ? 10**decimals : oTokenBalance.div(10);\r\n\r\n        require(\r\n            minBidSize <= type(uint96).max,\r\n            \"minBidSize > type(uint96) max value!\"\r\n        );\r\n\r\n        currOtokenPremium = decimals > 18\r\n            ? currOtokenPremium.mul(10**(decimals.sub(18)))\r\n            : currOtokenPremium.div(10**(uint256(18).sub(decimals)));\r\n\r\n        optionAuctionID = ISwap(swapContract).createOffer(\r\n            currentOtoken,\r\n            vaultParams.asset,\r\n            uint96(currOtokenPremium),\r\n            uint96(minBidSize),\r\n            uint128(oTokenBalance)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Allocates the vault's minted options to the OptionsPurchaseQueue contract\r\n     * @dev Skipped if the optionsPurchaseQueue doesn't exist\r\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\r\n     * @param option is the minted option\r\n     * @param optionsAmount is the amount of options minted\r\n     * @param optionAllocation is the maximum % of options to allocate towards the purchase queue (will only allocate\r\n     *  up to the amount that is on the queue)\r\n     * @return allocatedOptions is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\r\n     */\r\n    function allocateOptions(\r\n        address optionsPurchaseQueue,\r\n        address option,\r\n        uint256 optionsAmount,\r\n        uint256 optionAllocation\r\n    ) external returns (uint256 allocatedOptions) {\r\n        // Skip if optionsPurchaseQueue is address(0)\r\n        if (optionsPurchaseQueue != address(0)) {\r\n            allocatedOptions = optionsAmount.mul(optionAllocation).div(\r\n                100 * Vault.OPTION_ALLOCATION_MULTIPLIER\r\n            );\r\n            allocatedOptions = IOptionsPurchaseQueue(optionsPurchaseQueue)\r\n                .getOptionsAllocation(address(this), allocatedOptions);\r\n\r\n            if (allocatedOptions != 0) {\r\n                IERC20(option).approve(optionsPurchaseQueue, allocatedOptions);\r\n                IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\r\n                    allocatedOptions\r\n                );\r\n            }\r\n        }\r\n\r\n        return allocatedOptions;\r\n    }\r\n\r\n    /**\r\n     * @notice Sell the allocated options to the purchase queue post auction settlement\r\n     * @dev Reverts if the auction hasn't settled yet\r\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\r\n     * @param swapContract The address of the swap settlement contract\r\n     * @return totalPremiums Total premiums earnt by the vault\r\n     */\r\n    function sellOptionsToQueue(\r\n        address optionsPurchaseQueue,\r\n        address swapContract,\r\n        uint256 optionAuctionID\r\n    ) external returns (uint256) {\r\n        uint256 settlementPrice =\r\n            getAuctionSettlementPrice(swapContract, optionAuctionID);\r\n        require(settlementPrice != 0, \"!settlementPrice\");\r\n\r\n        return\r\n            IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\r\n                settlementPrice\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the settlement price of a settled auction\r\n     * @param swapContract The address of the swap settlement contract\r\n     * @param optionAuctionID is the offer ID\r\n     * @return settlementPrice Auction settlement price\r\n     */\r\n    function getAuctionSettlementPrice(\r\n        address swapContract,\r\n        uint256 optionAuctionID\r\n    ) public view returns (uint256) {\r\n        return ISwap(swapContract).averagePriceForOffer(optionAuctionID);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the constructor params satisfy requirements\r\n     * @param owner is the owner of the vault with critical permissions\r\n     * @param feeRecipient is the address to recieve vault performance and management fees\r\n     * @param performanceFee is the perfomance fee pct.\r\n     * @param tokenName is the name of the token\r\n     * @param tokenSymbol is the symbol of the token\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function verifyInitializerParams(\r\n        address owner,\r\n        address keeper,\r\n        address feeRecipient,\r\n        uint256 performanceFee,\r\n        uint256 managementFee,\r\n        string calldata tokenName,\r\n        string calldata tokenSymbol,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external pure {\r\n        require(owner != address(0), \"!owner\");\r\n        require(keeper != address(0), \"!keeper\");\r\n        require(feeRecipient != address(0), \"!feeRecipient\");\r\n        require(\r\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"performanceFee >= 100%\"\r\n        );\r\n        require(\r\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"managementFee >= 100%\"\r\n        );\r\n        require(bytes(tokenName).length > 0, \"!tokenName\");\r\n        require(bytes(tokenSymbol).length > 0, \"!tokenSymbol\");\r\n\r\n        require(_vaultParams.asset != address(0), \"!asset\");\r\n        require(_vaultParams.underlying != address(0), \"!underlying\");\r\n        require(_vaultParams.minimumSupply > 0, \"!minimumSupply\");\r\n        require(_vaultParams.cap > 0, \"!cap\");\r\n        require(\r\n            _vaultParams.cap > _vaultParams.minimumSupply,\r\n            \"cap has to be higher than minimumSupply\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the next option expiry timestamp\r\n     * @param currentOption is the otoken address that the vault is currently writing\r\n     */\r\n    function getNextExpiry(address currentOption)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // uninitialized state\r\n        if (currentOption == address(0)) {\r\n            return getNextFriday(block.timestamp);\r\n        }\r\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\r\n\r\n        // After options expiry if no options are written for >1 week\r\n        // We need to give the ability continue writing options\r\n        if (block.timestamp > currentExpiry + 7 days) {\r\n            return getNextFriday(block.timestamp);\r\n        }\r\n        return getNextFriday(currentExpiry);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the next options expiry timestamp\r\n     * @param timestamp is the expiry timestamp of the current option\r\n     * Reference: https://codereview.stackexchange.com/a/33532\r\n     * Examples:\r\n     * getNextFriday(week 1 thursday) -> week 1 friday\r\n     * getNextFriday(week 1 friday) -> week 2 friday\r\n     * getNextFriday(week 1 saturday) -> week 2 friday\r\n     */\r\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\r\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\r\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\r\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\r\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\r\n\r\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\r\n        if (timestamp >= friday8am) {\r\n            friday8am += 7 days;\r\n        }\r\n        return friday8am;\r\n    }\r\n}\r\n"
    },
    "contracts/vaults/YearnVaults/RibbonThetaYearnVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {Vault} from \"../../libraries/Vault.sol\";\r\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\r\nimport {ISwap} from \"../../interfaces/ISwap.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {ILiquidityGauge} from \"../../interfaces/ILiquidityGauge.sol\";\r\nimport {RibbonVault} from \"./base/RibbonVault.sol\";\r\nimport {\r\n    RibbonThetaYearnVaultStorage\r\n} from \"../../storage/RibbonThetaYearnVaultStorage.sol\";\r\nimport {IVaultPauser} from \"../../interfaces/IVaultPauser.sol\";\r\n\r\n/**\r\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\r\n * the inheritance chain closely.\r\n * Any changes/appends in storage variable needs to happen in RibbonThetaYearnVaultStorage.\r\n * RibbonThetaYearnVault should not inherit from any other contract aside from RibbonVault, RibbonThetaYearnVaultStorage\r\n */\r\ncontract RibbonThetaYearnVault is RibbonVault, RibbonThetaYearnVaultStorage {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\r\n    address public immutable OTOKEN_FACTORY;\r\n\r\n    // The minimum duration for an option auction.\r\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event OpenShort(\r\n        address indexed options,\r\n        uint256 depositAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event CloseShort(\r\n        address indexed options,\r\n        uint256 withdrawAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\r\n\r\n    event PremiumDiscountSet(\r\n        uint256 premiumDiscount,\r\n        uint256 newPremiumDiscount\r\n    );\r\n    event AuctionDurationSet(\r\n        uint256 auctionDuration,\r\n        uint256 newAuctionDuration\r\n    );\r\n\r\n    event InstantWithdraw(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n\r\n    event NewOffer(\r\n        uint256 swapId,\r\n        address seller,\r\n        address oToken,\r\n        address biddingToken,\r\n        uint256 minPrice,\r\n        uint256 minBidSize,\r\n        uint256 totalSize\r\n    );\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _oTokenFactory,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    ) RibbonVault(_weth, _usdc, _gammaController, _marginPool, _swapContract) {\r\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\r\n        OTOKEN_FACTORY = _oTokenFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     * @param _owner is the owner of the vault with critical permissions\r\n     * @param _keeper is the keeper of the vault with medium permissions (weekly actions)\r\n     * @param _feeRecipient is the address to recieve vault performance and management fees\r\n     * @param _managementFee is the management fee pct.\r\n     * @param _performanceFee is the perfomance fee pct.\r\n     * @param _tokenName is the name of the token\r\n     * @param _tokenSymbol is the symbol of the token\r\n     * @param _optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param _strikeSelection is the address of the contract with strike selection logic\r\n     * @param _premiumDiscount is the vault's discount applied to the premium\r\n     * @param _auctionDuration is the duration of the auction\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function initialize(\r\n        address _owner,\r\n        address _keeper,\r\n        address _feeRecipient,\r\n        uint256 _managementFee,\r\n        uint256 _performanceFee,\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        address _optionsPremiumPricer,\r\n        address _strikeSelection,\r\n        uint32 _premiumDiscount,\r\n        uint256 _auctionDuration,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external initializer {\r\n        baseInitialize(\r\n            _owner,\r\n            _keeper,\r\n            _feeRecipient,\r\n            _managementFee,\r\n            _performanceFee,\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _vaultParams\r\n        );\r\n        require(_optionsPremiumPricer != address(0), \"!_optionsPremiumPricer\");\r\n        require(_strikeSelection != address(0), \"!_strikeSelection\");\r\n        require(\r\n            _premiumDiscount > 0 &&\r\n                _premiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\r\n            \"!_premiumDiscount\"\r\n        );\r\n        require(_auctionDuration >= MIN_AUCTION_DURATION, \"!_auctionDuration\");\r\n        optionsPremiumPricer = _optionsPremiumPricer;\r\n        strikeSelection = _strikeSelection;\r\n        premiumDiscount = _premiumDiscount;\r\n        auctionDuration = _auctionDuration;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new strike selection contract\r\n     * @param newStrikeSelection is the address of the new strike selection contract\r\n     */\r\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\r\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\r\n        strikeSelection = newStrikeSelection;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new options premium pricer contract\r\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\r\n     */\r\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOptionsPremiumPricer != address(0),\r\n            \"!newOptionsPremiumPricer\"\r\n        );\r\n        optionsPremiumPricer = newOptionsPremiumPricer;\r\n    }\r\n\r\n    /**\r\n     * @notice Optionality to set strike price manually\r\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\r\n     */\r\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\r\n        require(strikePrice > 0, \"!strikePrice\");\r\n        overriddenStrikePrice = strikePrice;\r\n        lastStrikeOverrideRound = vaultState.round;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new liquidityGauge contract for this vault\r\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\r\n     */\r\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\r\n        liquidityGauge = newLiquidityGauge;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets oToken Premium\r\n     * @param minPrice is the new oToken Premium in the units of 10**18\r\n     */\r\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\r\n        require(minPrice > 0, \"!minPrice\");\r\n        currentOtokenPremium = minPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new Vault Pauser contract for this vault\r\n     * @param newVaultPauser is the address of the new vaultPauser contract\r\n     */\r\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\r\n        vaultPauser = newVaultPauser;\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\r\n     * @param amount is the amount to withdraw\r\n     */\r\n    function withdrawInstantly(uint256 amount) external nonReentrant {\r\n        Vault.DepositReceipt storage depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        uint256 currentRound = vaultState.round;\r\n\r\n        require(amount > 0, \"!amount\");\r\n        require(depositReceipt.round == currentRound, \"Invalid round\");\r\n\r\n        uint256 receiptAmount = depositReceipt.amount;\r\n        require(receiptAmount >= amount, \"Exceed amount\");\r\n\r\n        // Subtraction underflow checks already ensure it is smaller than uint104\r\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\r\n        vaultState.totalPending = uint128(\r\n            uint256(vaultState.totalPending).sub(amount)\r\n        );\r\n\r\n        emit InstantWithdraw(msg.sender, amount, currentRound);\r\n\r\n        transferAsset(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\r\n        _initiateWithdraw(numShares);\r\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\r\n            numShares\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     */\r\n    function completeWithdraw() external nonReentrant {\r\n        uint256 withdrawAmount = _completeWithdraw();\r\n        lastQueuedWithdrawAmount = uint128(\r\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Stakes a users vault shares\r\n     * @param numShares is the number of shares to stake\r\n     */\r\n    function stake(uint256 numShares) external nonReentrant {\r\n        address _liquidityGauge = liquidityGauge;\r\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\r\n        require(numShares > 0);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        if (heldByAccount < numShares) {\r\n            _redeem(numShares.sub(heldByAccount), false);\r\n        }\r\n        _transfer(msg.sender, address(this), numShares);\r\n        _approve(address(this), _liquidityGauge, numShares);\r\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short and calculate the shares to mint, new price per share &\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * Since we are incrementing the round here, the options are sold in the beginning of a round\r\n     * instead of at the end of the round. For example, at round 1, we don't sell any options. We\r\n     * start selling options at the beginning of round 2.\r\n     */\r\n    function closeRound() external nonReentrant {\r\n        address oldOption = optionState.currentOption;\r\n        require(\r\n            oldOption != address(0) || vaultState.round == 1,\r\n            \"Round closed\"\r\n        );\r\n        _closeShort(oldOption);\r\n\r\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\r\n        (uint256 lockedBalance, uint256 queuedWithdrawAmount) =\r\n            _closeRound(\r\n                uint256(lastQueuedWithdrawAmount),\r\n                currQueuedWithdrawShares\r\n            );\r\n\r\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\r\n\r\n        uint256 newQueuedWithdrawShares =\r\n            uint256(vaultState.queuedWithdrawShares).add(\r\n                currQueuedWithdrawShares\r\n            );\r\n        ShareMath.assertUint128(newQueuedWithdrawShares);\r\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\r\n\r\n        currentQueuedWithdrawShares = 0;\r\n\r\n        ShareMath.assertUint104(lockedBalance);\r\n        vaultState.lockedAmount = uint104(lockedBalance);\r\n\r\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\r\n        require(\r\n            nextOptionReady <= type(uint32).max,\r\n            \"Overflow nextOptionReady\"\r\n        );\r\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short position for the vault.\r\n     */\r\n    function _closeShort(address oldOption) private {\r\n        uint256 lockedAmount = vaultState.lockedAmount;\r\n        if (oldOption != address(0)) {\r\n            vaultState.lastLockedAmount = uint104(lockedAmount);\r\n        }\r\n        vaultState.lockedAmount = 0;\r\n\r\n        optionState.currentOption = address(0);\r\n\r\n        if (oldOption != address(0)) {\r\n            uint256 withdrawAmount =\r\n                VaultLifecycleWithSwap.settleShort(GAMMA_CONTROLLER);\r\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting\r\n     */\r\n    function commitNextOption() external onlyKeeper nonReentrant {\r\n        address currentOption = optionState.currentOption;\r\n        require(\r\n            currentOption == address(0) && vaultState.round != 1,\r\n            \"Round not closed\"\r\n        );\r\n\r\n        VaultLifecycleWithSwap.CommitParams memory commitParams =\r\n            VaultLifecycleWithSwap.CommitParams({\r\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\r\n                USDC: USDC,\r\n                collateralAsset: vaultParams.asset,\r\n                currentOption: currentOption,\r\n                delay: DELAY,\r\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\r\n                overriddenStrikePrice: overriddenStrikePrice,\r\n                strikeSelection: strikeSelection,\r\n                optionsPremiumPricer: optionsPremiumPricer\r\n            });\r\n\r\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\r\n            VaultLifecycleWithSwap.commitNextOption(\r\n                commitParams,\r\n                vaultParams,\r\n                vaultState\r\n            );\r\n\r\n        emit NewOptionStrikeSelected(strikePrice, delta);\r\n\r\n        optionState.nextOption = otokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Rolls the vault's funds into a new short position and create a new offer.\r\n     */\r\n    function rollToNextOption() external onlyKeeper nonReentrant {\r\n        address newOption = optionState.nextOption;\r\n        require(newOption != address(0), \"!nextOption\");\r\n\r\n        optionState.currentOption = newOption;\r\n        optionState.nextOption = address(0);\r\n        uint256 lockedBalance = vaultState.lockedAmount;\r\n\r\n        emit OpenShort(newOption, lockedBalance, msg.sender);\r\n\r\n        VaultLifecycleWithSwap.createShort(\r\n            GAMMA_CONTROLLER,\r\n            MARGIN_POOL,\r\n            newOption,\r\n            lockedBalance\r\n        );\r\n\r\n        _createOffer();\r\n    }\r\n\r\n    function _createOffer() private {\r\n        address currentOtoken = optionState.currentOption;\r\n        uint256 currOtokenPremium = currentOtokenPremium;\r\n\r\n        optionAuctionID = VaultLifecycleWithSwap.createOffer(\r\n            currentOtoken,\r\n            currOtokenPremium,\r\n            SWAP_CONTRACT,\r\n            vaultParams\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Settle current offer\r\n     */\r\n    function settleOffer(ISwap.Bid[] calldata bids)\r\n        external\r\n        onlyKeeper\r\n        nonReentrant\r\n    {\r\n        ISwap(SWAP_CONTRACT).settleOffer(optionAuctionID, bids);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over\r\n     */\r\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\r\n        uint256 unlockedAssetAmount =\r\n            VaultLifecycleWithSwap.burnOtokens(\r\n                GAMMA_CONTROLLER,\r\n                optionState.currentOption\r\n            );\r\n\r\n        vaultState.lockedAmount = uint104(\r\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice pause a user's vault position\r\n     */\r\n    function pausePosition() external {\r\n        address _vaultPauserAddress = vaultPauser;\r\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\r\n        _redeem(0, true);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\r\n        IVaultPauser(_vaultPauserAddress).pausePosition(\r\n            msg.sender,\r\n            heldByAccount\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/storage/RibbonThetaYearnVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nabstract contract RibbonThetaYearnVaultStorageV1 {\r\n    // Logic contract used to price options\r\n    address public optionsPremiumPricer;\r\n    // Logic contract used to select strike prices\r\n    address public strikeSelection;\r\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\r\n    uint256 public premiumDiscount;\r\n    // Current oToken premium\r\n    uint256 public currentOtokenPremium;\r\n    // Last round id at which the strike was manually overridden\r\n    uint16 public lastStrikeOverrideRound;\r\n    // Price last overridden strike set to\r\n    uint256 public overriddenStrikePrice;\r\n    // Auction duration\r\n    uint256 public auctionDuration;\r\n    // Auction id of current option\r\n    uint256 public optionAuctionID;\r\n}\r\n\r\nabstract contract RibbonThetaYearnVaultStorageV2 {\r\n    // Amount locked for scheduled withdrawals last week;\r\n    uint256 public lastQueuedWithdrawAmount;\r\n}\r\n\r\nabstract contract RibbonThetaYearnVaultStorageV3 {\r\n    // LiquidityGauge contract for the vault\r\n    address public liquidityGauge;\r\n}\r\n\r\nabstract contract RibbonThetaYearnVaultStorageV4 {\r\n    // OptionsPurchaseQueue contract for selling options\r\n    address public optionsPurchaseQueue;\r\n}\r\n\r\nabstract contract RibbonThetaYearnVaultStorageV5 {\r\n    // Queued withdraw shares for the current round\r\n    uint256 public currentQueuedWithdrawShares;\r\n}\r\n\r\nabstract contract RibbonThetaYearnVaultStorageV6 {\r\n    // Vault Pauser Contract for the vault\r\n    address public vaultPauser;\r\n}\r\n\r\nabstract contract RibbonThetaYearnVaultStorageV7 {\r\n    // Check if yearn is used in vault\r\n    bool public isYearnPaused;\r\n}\r\n\r\n// We are following Compound's method of upgrading new contract implementations\r\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\r\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\r\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\r\nabstract contract RibbonThetaYearnVaultStorage is\r\n    RibbonThetaYearnVaultStorageV1,\r\n    RibbonThetaYearnVaultStorageV2,\r\n    RibbonThetaYearnVaultStorageV3,\r\n    RibbonThetaYearnVaultStorageV4,\r\n    RibbonThetaYearnVaultStorageV5,\r\n    RibbonThetaYearnVaultStorageV6,\r\n    RibbonThetaYearnVaultStorageV7\r\n{\r\n\r\n}\r\n"
    },
    "contracts/vaults/VaultPauser/RibbonVaultPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IVaultPauser} from \"../../interfaces/IVaultPauser.sol\";\r\nimport {Vault} from \"../../libraries/Vault.sol\";\r\nimport {IRibbonThetaVault} from \"../../interfaces/IRibbonThetaVault.sol\";\r\nimport {IWETH} from \"../../interfaces/IWETH.sol\";\r\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\r\n\r\ncontract RibbonVaultPauser is Ownable, IVaultPauser {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /************************************************\r\n     *  NON UPGRADEABLE STORAGE\r\n     ***********************************************/\r\n\r\n    /// @notice Stores all the vault's paused positions\r\n    struct PauseReceipt {\r\n        uint16 round;\r\n        uint128 shares;\r\n    }\r\n\r\n    mapping(address => mapping(address => PauseReceipt)) public pausedPositions;\r\n    mapping(address => bool) private registeredVaults;\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public immutable WETH;\r\n    address public immutable STETH;\r\n    address public immutable STETH_VAULT;\r\n\r\n    address public keeper;\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event Pause(\r\n        address indexed account,\r\n        address indexed vaultAddress,\r\n        uint256 share,\r\n        uint256 round\r\n    );\r\n\r\n    event Resume(\r\n        address indexed account,\r\n        address indexed vaultAddress,\r\n        uint256 withdrawAmount\r\n    );\r\n\r\n    event ProcessWithdrawal(address indexed vaultAddress, uint256 round);\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     */\r\n    constructor(\r\n        address _keeper,\r\n        address _weth,\r\n        address _steth,\r\n        address _steth_vault\r\n    ) {\r\n        require(_keeper != address(0), \"!_keeper\");\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_steth != address(0), \"!_steth\");\r\n        require(_steth_vault != address(0), \"!_steth_vault\");\r\n\r\n        keeper = _keeper;\r\n        WETH = _weth;\r\n        STETH = _steth;\r\n        STETH_VAULT = _steth_vault;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper, \"!keeper\");\r\n        _;\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    function getPausePosition(address _vaultAddress, address _userAddress)\r\n        external\r\n        view\r\n        returns (PauseReceipt memory)\r\n    {\r\n        return pausedPositions[_vaultAddress][_userAddress];\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new keeper\r\n     * @param _newKeeper is the address of the new keeper\r\n     */\r\n    function setNewKeeper(address _newKeeper) external onlyOwner {\r\n        require(_newKeeper != address(0), \"!newKeeper\");\r\n        keeper = _newKeeper;\r\n    }\r\n\r\n    /**\r\n     * @notice add vault into registered vaults\r\n     * @param _vaultAddress is the address of the new vault to be registered\r\n     */\r\n    function addVault(address _vaultAddress) external onlyOwner {\r\n        registeredVaults[_vaultAddress] = true;\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice pause position from vault by redeem all the shares from vault to Pauser\r\n     * @param _account user's address\r\n     * @param _amount the amount of shares\r\n     */\r\n    function pausePosition(address _account, uint256 _amount)\r\n        external\r\n        override\r\n    {\r\n        address currentVaultAddress = msg.sender;\r\n        IRibbonThetaVault currentVault = IRibbonThetaVault(currentVaultAddress);\r\n\r\n        // check if vault is registered\r\n        require(\r\n            registeredVaults[currentVaultAddress],\r\n            \"Vault is not registered\"\r\n        );\r\n\r\n        PauseReceipt storage pausedPosition =\r\n            pausedPositions[currentVaultAddress][_account];\r\n\r\n        // check if position is paused\r\n        require(\r\n            pausedPosition.shares == 0 && pausedPosition.round == 0,\r\n            \"Position is paused\"\r\n        );\r\n\r\n        uint16 round = currentVault.vaultState().round;\r\n\r\n        require(_amount < type(uint128).max, \"_amount overflow\");\r\n\r\n        pausedPositions[currentVaultAddress][_account] = PauseReceipt({\r\n            round: round,\r\n            shares: uint128(_amount)\r\n        });\r\n\r\n        emit Pause(_account, currentVaultAddress, _amount, round);\r\n\r\n        // transfer from user to pauser\r\n        IERC20(currentVaultAddress).safeTransferFrom(\r\n            _account,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        currentVault.initiateWithdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice resume user's position into vault by making a deposit\r\n     * @param _vaultAddress vault's address\r\n     */\r\n    function resumePosition(address _vaultAddress) external override {\r\n        IRibbonThetaVault currentVault = IRibbonThetaVault(_vaultAddress);\r\n\r\n        // check if vault is registered\r\n        require(registeredVaults[_vaultAddress], \"Vault is not registered\");\r\n\r\n        // get params and round\r\n        Vault.VaultParams memory currentParams = currentVault.vaultParams();\r\n        uint256 round = currentVault.vaultState().round;\r\n\r\n        PauseReceipt storage pauseReceipt =\r\n            pausedPositions[_vaultAddress][msg.sender];\r\n        uint256 pauseReceiptRound = pauseReceipt.round;\r\n\r\n        // check if roun is closed before resuming position\r\n        require(pauseReceiptRound < round, \"Round not closed yet\");\r\n        uint256 totalWithdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                pauseReceipt.shares,\r\n                currentVault.roundPricePerShare(pauseReceiptRound),\r\n                currentParams.decimals\r\n            );\r\n\r\n        // delete position once transfer (revert to zero)\r\n        delete pausedPositions[_vaultAddress][msg.sender];\r\n\r\n        // stETH transfers suffer from an off-by-1 error\r\n        // since we received STETH , we shall deposit using STETH instead of ETH\r\n        if (_vaultAddress == STETH_VAULT) {\r\n            totalWithdrawAmount = totalWithdrawAmount - 3;\r\n\r\n            emit Resume(msg.sender, _vaultAddress, totalWithdrawAmount - 1);\r\n            IERC20(STETH).safeApprove(_vaultAddress, totalWithdrawAmount);\r\n            currentVault.depositYieldTokenFor(totalWithdrawAmount, msg.sender);\r\n        } else {\r\n            emit Resume(msg.sender, _vaultAddress, totalWithdrawAmount);\r\n\r\n            // if asset is ETH, we will convert it into WETH before depositing\r\n            if (currentParams.asset == WETH) {\r\n                IWETH(WETH).deposit{value: totalWithdrawAmount}();\r\n            }\r\n            IERC20(currentParams.asset).safeApprove(\r\n                _vaultAddress,\r\n                totalWithdrawAmount\r\n            );\r\n\r\n            currentVault.depositFor(totalWithdrawAmount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice process withdrawals by completing in a batch\r\n     * @param _vaultAddress vault's address to be processed\r\n     */\r\n    function processWithdrawal(address _vaultAddress) external onlyKeeper {\r\n        IRibbonThetaVault currentVault = IRibbonThetaVault(_vaultAddress);\r\n        // we can only process withdrawal after closing the previous round\r\n        // hence round should be - 1\r\n        emit ProcessWithdrawal(\r\n            _vaultAddress,\r\n            currentVault.vaultState().round - 1\r\n        );\r\n        currentVault.completeWithdraw();\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {ISwap} from \"../../interfaces/ISwap.sol\";\r\nimport {\r\n    RibbonThetaSTETHVaultStorage\r\n} from \"../../storage/RibbonThetaSTETHVaultStorage.sol\";\r\nimport {Vault} from \"../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {VaultLifecycleSTETH} from \"../../libraries/VaultLifecycleSTETH.sol\";\r\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\r\nimport {ILiquidityGauge} from \"../../interfaces/ILiquidityGauge.sol\";\r\nimport {RibbonVault} from \"./base/RibbonVault.sol\";\r\nimport {IVaultPauser} from \"../../interfaces/IVaultPauser.sol\";\r\nimport {IWSTETH} from \"../../interfaces/ISTETH.sol\";\r\n\r\n/**\r\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\r\n * the inheritance chain closely.\r\n * Any changes/appends in storage variable needs to happen in RibbonThetaSTETHVaultStorage.\r\n * RibbonThetaSTETHVault should not inherit from any other contract aside from RibbonVault, RibbonThetaSTETHVaultStorage\r\n */\r\ncontract RibbonThetaSTETHVault is RibbonVault, RibbonThetaSTETHVaultStorage {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\r\n    address public immutable OTOKEN_FACTORY;\r\n\r\n    // The minimum duration for an option auction.\r\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event OpenShort(\r\n        address indexed options,\r\n        uint256 depositAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event CloseShort(\r\n        address indexed options,\r\n        uint256 withdrawAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\r\n\r\n    event AuctionDurationSet(\r\n        uint256 auctionDuration,\r\n        uint256 newAuctionDuration\r\n    );\r\n\r\n    event InstantWithdraw(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n\r\n    event NewOffer(\r\n        uint256 swapId,\r\n        address seller,\r\n        address oToken,\r\n        address biddingToken,\r\n        uint256 minPrice,\r\n        uint256 minBidSize,\r\n        uint256 totalSize\r\n    );\r\n\r\n    /************************************************\r\n     *  STRUCTS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initialization parameters for the vault.\r\n     * @param _owner is the owner of the vault with critical permissions\r\n     * @param _feeRecipient is the address to recieve vault performance and management fees\r\n     * @param _managementFee is the management fee pct.\r\n     * @param _performanceFee is the perfomance fee pct.\r\n     * @param _tokenName is the name of the token\r\n     * @param _tokenSymbol is the symbol of the token\r\n     * @param _optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param _strikeSelection is the address of the contract with strike selection logic\r\n     */\r\n    struct InitParams {\r\n        address _owner;\r\n        address _keeper;\r\n        address _feeRecipient;\r\n        uint256 _managementFee;\r\n        uint256 _performanceFee;\r\n        string _tokenName;\r\n        string _tokenSymbol;\r\n        address _optionsPremiumPricer;\r\n        address _strikeSelection;\r\n    }\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _wsteth is the LDO contract\r\n     * @param _ldo is the LDO contract\r\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _wsteth,\r\n        address _ldo,\r\n        address _oTokenFactory,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    )\r\n        RibbonVault(\r\n            _weth,\r\n            _usdc,\r\n            _wsteth,\r\n            _ldo,\r\n            _gammaController,\r\n            _marginPool,\r\n            _swapContract\r\n        )\r\n    {\r\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\r\n        OTOKEN_FACTORY = _oTokenFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     * @param _initParams is the struct with vault initialization parameters\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function initialize(\r\n        InitParams calldata _initParams,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external initializer {\r\n        baseInitialize(\r\n            _initParams._owner,\r\n            _initParams._keeper,\r\n            _initParams._feeRecipient,\r\n            _initParams._managementFee,\r\n            _initParams._performanceFee,\r\n            _initParams._tokenName,\r\n            _initParams._tokenSymbol,\r\n            _vaultParams\r\n        );\r\n        require(\r\n            _initParams._optionsPremiumPricer != address(0),\r\n            \"!_optionsPremiumPricer\"\r\n        );\r\n        require(\r\n            _initParams._strikeSelection != address(0),\r\n            \"!_strikeSelection\"\r\n        );\r\n\r\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\r\n        strikeSelection = _initParams._strikeSelection;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new strike selection or options premium pricer contract\r\n     * @param newContract is the address of the new strike selection or options premium pricer contract\r\n     * @param isStrikeSelection is whether we are setting the strike selection contract\r\n     */\r\n    function setStrikeSelectionOrPricer(\r\n        address newContract,\r\n        bool isStrikeSelection\r\n    ) external onlyOwner {\r\n        require(newContract != address(0), \"!newContract\");\r\n        if (isStrikeSelection) {\r\n            strikeSelection = newContract;\r\n        } else {\r\n            optionsPremiumPricer = newContract;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Optionality to set strike price manually\r\n     * Should be called after closeRound if we are setting current week's strike\r\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\r\n     */\r\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\r\n        require(strikePrice > 0, \"!strikePrice\");\r\n        overriddenStrikePrice = strikePrice;\r\n        lastStrikeOverrideRound = vaultState.round;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new liquidityGauge contract for this vault\r\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\r\n     */\r\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\r\n        liquidityGauge = newLiquidityGauge;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets oToken Premium\r\n     * @param minPrice is the new oToken Premium in the units of 10**18\r\n     */\r\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\r\n        require(minPrice > 0, \"!minPrice\");\r\n        currentOtokenPremium = minPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new Vault Pauser contract for this vault\r\n     * @param newVaultPauser is the address of the new vaultPauser contract\r\n     */\r\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\r\n        vaultPauser = newVaultPauser;\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\r\n     * @param amount is the amount to withdraw\r\n     */\r\n    function withdrawInstantly(uint256 amount, uint256) external nonReentrant {\r\n        Vault.DepositReceipt storage depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        uint256 currentRound = vaultState.round;\r\n        require(amount > 0, \"!amount\");\r\n        require(depositReceipt.round == currentRound, \"Invalid round\");\r\n\r\n        uint256 receiptAmount = depositReceipt.amount;\r\n        require(receiptAmount >= amount, \"Exceed amount\");\r\n\r\n        // Subtraction underflow checks already ensure it is smaller than uint104\r\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\r\n        vaultState.totalPending = uint128(\r\n            uint256(vaultState.totalPending).sub(amount)\r\n        );\r\n\r\n        emit InstantWithdraw(msg.sender, amount, currentRound);\r\n\r\n        IERC20(STETH).safeTransfer(\r\n            msg.sender,\r\n            VaultLifecycleSTETH.withdrawStEth(\r\n                STETH,\r\n                address(collateralToken),\r\n                amount\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\r\n        _initiateWithdraw(numShares);\r\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\r\n            numShares\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     */\r\n    function completeWithdraw() external nonReentrant {\r\n        uint256 withdrawAmount = _completeWithdraw();\r\n        lastQueuedWithdrawAmount = uint128(\r\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Stakes a users vault shares\r\n     * @param numShares is the number of shares to stake\r\n     */\r\n    function stake(uint256 numShares) external nonReentrant {\r\n        address _liquidityGauge = liquidityGauge;\r\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\r\n        require(numShares > 0);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        if (heldByAccount < numShares) {\r\n            _redeem(numShares.sub(heldByAccount), false);\r\n        }\r\n        _transfer(msg.sender, address(this), numShares);\r\n        _approve(address(this), _liquidityGauge, numShares);\r\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short and calculate the shares to mint, new price per share &\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * Since we are incrementing the round here, the options are sold in the beginning of a round\r\n     * instead of at the end of the round. For example, at round 1, we don't sell any options. We\r\n     * start selling options at the beginning of round 2.\r\n     */\r\n    function closeRound() external nonReentrant {\r\n        address oldOption = optionState.currentOption;\r\n        require(\r\n            oldOption != address(0) || vaultState.round == 1,\r\n            \"Round closed\"\r\n        );\r\n        _closeShort(oldOption);\r\n\r\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\r\n        (uint256 lockedBalance, uint256 queuedWithdrawAmount) =\r\n            _closeRound(\r\n                uint256(lastQueuedWithdrawAmount),\r\n                currQueuedWithdrawShares\r\n            );\r\n\r\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\r\n\r\n        uint256 newQueuedWithdrawShares =\r\n            uint256(vaultState.queuedWithdrawShares).add(\r\n                currQueuedWithdrawShares\r\n            );\r\n        ShareMath.assertUint128(newQueuedWithdrawShares);\r\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\r\n\r\n        currentQueuedWithdrawShares = 0;\r\n\r\n        ShareMath.assertUint104(lockedBalance);\r\n        vaultState.lockedAmount = uint104(lockedBalance);\r\n\r\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\r\n        require(\r\n            nextOptionReady <= type(uint32).max,\r\n            \"Overflow nextOptionReady\"\r\n        );\r\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short position for the vault.\r\n     */\r\n    function _closeShort(address oldOption) private {\r\n        uint256 lockedAmount = vaultState.lockedAmount;\r\n        if (oldOption != address(0)) {\r\n            vaultState.lastLockedAmount = uint104(lockedAmount);\r\n        }\r\n        vaultState.lockedAmount = 0;\r\n\r\n        optionState.currentOption = address(0);\r\n\r\n        if (oldOption != address(0)) {\r\n            uint256 withdrawAmount =\r\n                VaultLifecycleWithSwap.settleShort(GAMMA_CONTROLLER);\r\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting\r\n     */\r\n    function commitNextOption() external onlyKeeper nonReentrant {\r\n        address currentOption = optionState.currentOption;\r\n        require(\r\n            currentOption == address(0) && vaultState.round != 1,\r\n            \"Round not closed\"\r\n        );\r\n\r\n        VaultLifecycleWithSwap.CommitParams memory commitParams =\r\n            VaultLifecycleWithSwap.CommitParams({\r\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\r\n                USDC: USDC,\r\n                collateralAsset: address(collateralToken),\r\n                currentOption: currentOption,\r\n                delay: DELAY,\r\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\r\n                overriddenStrikePrice: overriddenStrikePrice,\r\n                strikeSelection: strikeSelection,\r\n                optionsPremiumPricer: optionsPremiumPricer\r\n            });\r\n\r\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\r\n            VaultLifecycleWithSwap.commitNextOption(\r\n                commitParams,\r\n                vaultParams,\r\n                vaultState\r\n            );\r\n\r\n        emit NewOptionStrikeSelected(strikePrice, delta);\r\n\r\n        optionState.nextOption = otokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Rolls the vault's funds into a new short position and create a new offer.\r\n     */\r\n    function rollToNextOption() external onlyKeeper nonReentrant {\r\n        address newOption = optionState.nextOption;\r\n        require(newOption != address(0), \"!nextOption\");\r\n\r\n        optionState.currentOption = newOption;\r\n        optionState.nextOption = address(0);\r\n        // Locked balance denominated in `collateralToken`\r\n        uint256 lockedBalance =\r\n            collateralToken.balanceOf(address(this)).sub(\r\n                collateralToken.getWstETHByStETH(lastQueuedWithdrawAmount)\r\n            );\r\n\r\n        emit OpenShort(newOption, lockedBalance, msg.sender);\r\n\r\n        VaultLifecycleWithSwap.createShort(\r\n            GAMMA_CONTROLLER,\r\n            MARGIN_POOL,\r\n            newOption,\r\n            lockedBalance\r\n        );\r\n\r\n        _createOffer();\r\n    }\r\n\r\n    function _createOffer() private {\r\n        address currentOtoken = optionState.currentOption;\r\n        uint256 currOtokenPremium = currentOtokenPremium;\r\n\r\n        optionAuctionID = VaultLifecycleWithSwap.createOffer(\r\n            currentOtoken,\r\n            currOtokenPremium,\r\n            SWAP_CONTRACT,\r\n            vaultParams\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Settle current offer\r\n     */\r\n    function settleOffer(ISwap.Bid[] calldata bids)\r\n        external\r\n        onlyKeeper\r\n        nonReentrant\r\n    {\r\n        ISwap(SWAP_CONTRACT).settleOffer(optionAuctionID, bids);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over\r\n     */\r\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\r\n        uint256 unlockedAssetAmount =\r\n            VaultLifecycleWithSwap.burnOtokens(\r\n                GAMMA_CONTROLLER,\r\n                optionState.currentOption\r\n            );\r\n\r\n        vaultState.lockedAmount = uint104(\r\n            uint256(vaultState.lockedAmount).sub(\r\n                collateralToken.getStETHByWstETH(unlockedAssetAmount)\r\n            )\r\n        );\r\n\r\n        // Wrap entire `asset` balance to `collateralToken` balance\r\n        VaultLifecycleSTETH.wrapToYieldToken(\r\n            WETH,\r\n            address(collateralToken),\r\n            STETH\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice pause a user's vault position\r\n     */\r\n    function pausePosition() external {\r\n        address _vaultPauserAddress = vaultPauser;\r\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\r\n        _redeem(0, true);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\r\n        IVaultPauser(_vaultPauserAddress).pausePosition(\r\n            msg.sender,\r\n            heldByAccount\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/storage/RibbonThetaSTETHVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nabstract contract RibbonThetaSTETHVaultStorageV1 {\r\n    // Logic contract used to price options\r\n    address public optionsPremiumPricer;\r\n    // Logic contract used to select strike prices\r\n    address public strikeSelection;\r\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\r\n    uint256 public premiumDiscount;\r\n    // Current oToken premium\r\n    uint256 public currentOtokenPremium;\r\n    // Last round id at which the strike was manually overridden\r\n    uint16 public lastStrikeOverrideRound;\r\n    // Price last overridden strike set to\r\n    uint256 public overriddenStrikePrice;\r\n    // Auction duration\r\n    uint256 public auctionDuration;\r\n    // Auction id of current option\r\n    uint256 public optionAuctionID;\r\n}\r\n\r\nabstract contract RibbonThetaSTETHVaultStorageV2 {\r\n    // Amount locked for scheduled withdrawals last week;\r\n    uint256 public lastQueuedWithdrawAmount;\r\n}\r\n\r\nabstract contract RibbonThetaSTETHVaultStorageV3 {\r\n    // LiquidityGauge contract for the vault\r\n    address public liquidityGauge;\r\n}\r\n\r\nabstract contract RibbonThetaSTETHVaultStorageV4 {\r\n    // Queued withdraw shares for the current round\r\n    uint256 public currentQueuedWithdrawShares;\r\n}\r\n\r\nabstract contract RibbonThetaSTETHVaultStorageV5 {\r\n    // Vault Pauser Contract for the vault\r\n    address public vaultPauser;\r\n}\r\n\r\n// We are following Compound's method of upgrading new contract implementations\r\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\r\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\r\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\r\nabstract contract RibbonThetaSTETHVaultStorage is\r\n    RibbonThetaSTETHVaultStorageV1,\r\n    RibbonThetaSTETHVaultStorageV2,\r\n    RibbonThetaSTETHVaultStorageV3,\r\n    RibbonThetaSTETHVaultStorageV4,\r\n    RibbonThetaSTETHVaultStorageV5\r\n{\r\n\r\n}\r\n"
    },
    "contracts/libraries/VaultLifecycleSTETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {DSMath} from \"../vendor/DSMath.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {VaultLifecycle} from \"./VaultLifecycle.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\nimport {ShareMath} from \"./ShareMath.sol\";\r\nimport {ISTETH, IWSTETH} from \"../interfaces/ISTETH.sol\";\r\nimport {IWETH} from \"../interfaces/IWETH.sol\";\r\nimport {ICRV} from \"../interfaces/ICRV.sol\";\r\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\r\nimport {\r\n    IOtokenFactory,\r\n    IOtoken,\r\n    IController,\r\n    GammaTypes\r\n} from \"../interfaces/GammaInterface.sol\";\r\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\r\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\r\n\r\nlibrary VaultLifecycleSTETH {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @param collateralAsset is the address of the collateral asset\r\n     * @return otokenAddress is the address of the new option\r\n     * @return strikePrice is the strike price of the new option\r\n     * @return delta is the delta of the new option\r\n     */\r\n    function commitAndClose(\r\n        VaultLifecycle.CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        Vault.VaultState storage vaultState,\r\n        address collateralAsset\r\n    )\r\n        external\r\n        returns (\r\n            address otokenAddress,\r\n            uint256 strikePrice,\r\n            uint256 delta\r\n        )\r\n    {\r\n        uint256 expiry =\r\n            VaultLifecycle.getNextExpiry(closeParams.currentOption);\r\n\r\n        IStrikeSelection selection =\r\n            IStrikeSelection(closeParams.strikeSelection);\r\n\r\n        // calculate strike and delta\r\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\r\n            vaultState.round\r\n            ? (closeParams.overriddenStrikePrice, selection.delta())\r\n            : selection.getStrikePrice(expiry, false);\r\n\r\n        require(strikePrice != 0, \"!strikePrice\");\r\n\r\n        // retrieve address if option already exists, or deploy it\r\n        otokenAddress = VaultLifecycle.getOrDeployOtoken(\r\n            closeParams,\r\n            vaultParams,\r\n            vaultParams.underlying,\r\n            collateralAsset,\r\n            strikePrice,\r\n            expiry,\r\n            false\r\n        );\r\n\r\n        return (otokenAddress, strikePrice, delta);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the shares to mint, new price per share, and\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * @param currentShareSupply is the total supply of shares\r\n     * @param currentBalance is the total balance of the vault\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @return newLockedAmount is the amount of funds to allocate for the new round\r\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\r\n     * @return newPricePerShare is the price per share of the new round\r\n     * @return mintShares is the amount of shares to mint from deposits\r\n     */\r\n    function rollover(\r\n        uint256 currentShareSupply,\r\n        uint256 currentBalance,\r\n        Vault.VaultParams calldata vaultParams,\r\n        Vault.VaultState calldata vaultState\r\n    )\r\n        external\r\n        pure\r\n        returns (\r\n            uint256 newLockedAmount,\r\n            uint256 queuedWithdrawAmount,\r\n            uint256 newPricePerShare,\r\n            uint256 mintShares\r\n        )\r\n    {\r\n        uint256 pendingAmount = uint256(vaultState.totalPending);\r\n        uint256 _decimals = vaultParams.decimals;\r\n\r\n        newPricePerShare = ShareMath.pricePerShare(\r\n            currentShareSupply,\r\n            currentBalance,\r\n            pendingAmount,\r\n            _decimals\r\n        );\r\n\r\n        // After closing the short, if the options expire in-the-money\r\n        // vault pricePerShare would go down because vault's asset balance decreased.\r\n        // This ensures that the newly-minted shares do not take on the loss.\r\n        uint256 _mintShares =\r\n            ShareMath.assetToShares(pendingAmount, newPricePerShare, _decimals);\r\n\r\n        uint256 newSupply = currentShareSupply.add(_mintShares);\r\n        uint256 queuedAmount =\r\n            newSupply > 0\r\n                ? ShareMath.sharesToAsset(\r\n                    vaultState.queuedWithdrawShares,\r\n                    newPricePerShare,\r\n                    _decimals\r\n                )\r\n                : 0;\r\n\r\n        return (\r\n            currentBalance.sub(queuedAmount),\r\n            queuedAmount,\r\n            newPricePerShare,\r\n            _mintShares\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\r\n     * @param oTokenAddress is the address of the otoken to mint\r\n     * @param depositAmount is the amount of collateral to deposit\r\n     * @return the otoken mint amount\r\n     */\r\n    function createShort(\r\n        address gammaController,\r\n        address marginPool,\r\n        address oTokenAddress,\r\n        uint256 depositAmount\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n        uint256 newVaultID =\r\n            (controller.getAccountVaultCounter(address(this))).add(1);\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IOtoken oToken = IOtoken(oTokenAddress);\r\n        address collateralAsset = oToken.collateralAsset();\r\n\r\n        uint256 collateralDecimals =\r\n            uint256(IERC20Detailed(collateralAsset).decimals());\r\n        uint256 mintAmount;\r\n\r\n        mintAmount = depositAmount;\r\n        if (collateralDecimals > 8) {\r\n            uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\r\n            if (mintAmount > scaleBy) {\r\n                mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\r\n            }\r\n        }\r\n\r\n        IERC20 collateralToken = IERC20(collateralAsset);\r\n        collateralToken.safeApprove(marginPool, depositAmount);\r\n\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](3);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.OpenVault,\r\n            address(this), // owner\r\n            address(this), // receiver\r\n            address(0), // asset, otoken\r\n            newVaultID, // vaultId\r\n            0, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.DepositCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            collateralAsset, // deposited asset\r\n            newVaultID, // vaultId\r\n            depositAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[2] = IController.ActionArgs(\r\n            IController.ActionType.MintShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            oTokenAddress, // option address\r\n            newVaultID, // vaultId\r\n            mintAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        return mintAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws stETH + WETH (if necessary) from vault using vault shares\r\n     * @param collateralToken is the address of the collateral token\r\n     * @param weth is the WETH address\r\n     * @param recipient is the recipient\r\n     * @param amount is the withdraw amount in `asset`\r\n     * @return withdrawAmount is the withdraw amount in `collateralToken`\r\n     */\r\n    function withdrawYieldAndBaseToken(\r\n        address collateralToken,\r\n        address weth,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (uint256) {\r\n        IWSTETH collateral = IWSTETH(collateralToken);\r\n\r\n        uint256 withdrawAmount = collateral.getWstETHByStETH(amount);\r\n\r\n        uint256 yieldTokenBalance =\r\n            withdrawYieldToken(collateralToken, recipient, withdrawAmount);\r\n\r\n        // If there is not enough wstETH in the vault, it withdraws as much as possible and\r\n        // transfers the rest in `asset`\r\n        if (withdrawAmount > yieldTokenBalance) {\r\n            withdrawBaseToken(\r\n                collateralToken,\r\n                weth,\r\n                recipient,\r\n                withdrawAmount,\r\n                yieldTokenBalance\r\n            );\r\n        }\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws stETH from vault\r\n     * @param collateralToken is the address of the collateral token\r\n     * @param recipient is the recipient\r\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\r\n     * @return yieldTokenBalance is the balance of the yield token\r\n     */\r\n    function withdrawYieldToken(\r\n        address collateralToken,\r\n        address recipient,\r\n        uint256 withdrawAmount\r\n    ) internal returns (uint256) {\r\n        IERC20 collateral = IERC20(collateralToken);\r\n\r\n        uint256 yieldTokenBalance = collateral.balanceOf(address(this));\r\n        uint256 yieldTokensToWithdraw =\r\n            DSMath.min(yieldTokenBalance, withdrawAmount);\r\n        if (yieldTokensToWithdraw > 0) {\r\n            collateral.safeTransfer(recipient, yieldTokensToWithdraw);\r\n        }\r\n\r\n        return yieldTokenBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws `asset` from vault\r\n     * @param collateralToken is the address of the collateral token\r\n     * @param weth is the WETH address\r\n     * @param recipient is the recipient\r\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\r\n     * @param yieldTokenBalance is the collateral token (stETH) balance of the vault\r\n     */\r\n    function withdrawBaseToken(\r\n        address collateralToken,\r\n        address weth,\r\n        address recipient,\r\n        uint256 withdrawAmount,\r\n        uint256 yieldTokenBalance\r\n    ) internal {\r\n        uint256 underlyingTokensToWithdraw =\r\n            IWSTETH(collateralToken).getStETHByWstETH(\r\n                withdrawAmount.sub(yieldTokenBalance)\r\n            );\r\n\r\n        IWETH(weth).deposit{value: underlyingTokensToWithdraw}();\r\n        IERC20(weth).safeTransfer(recipient, underlyingTokensToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @notice Unwraps the necessary amount of the wstETH token\r\n     *         and transfers ETH amount to vault\r\n     * @param amount is the amount of ETH to withdraw\r\n     * @param wstEth is the address of wstETH\r\n     * @param stethToken is the address of stETH\r\n     * @param crvPool is the address of the steth <-> eth pool on curve\r\n     * @param minETHOut is the minimum eth amount to receive from the swap\r\n     * @return amountETHOut is the amount of eth unwrapped\r\n     available for the withdrawal (may incur curve slippage)\r\n     */\r\n    function unwrapYieldToken(\r\n        uint256 amount,\r\n        address wstEth,\r\n        address stethToken,\r\n        address crvPool,\r\n        uint256 minETHOut\r\n    ) external returns (uint256) {\r\n        require(\r\n            amount >= minETHOut,\r\n            \"Amount withdrawn smaller than minETHOut from swap\"\r\n        );\r\n        require(\r\n            minETHOut.mul(10**18).div(amount) >= 0.95 ether,\r\n            \"Slippage on minETHOut too high\"\r\n        );\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        IERC20 steth = IERC20(stethToken);\r\n        uint256 stethBalance = steth.balanceOf(address(this));\r\n\r\n        // 3 different success scenarios\r\n        // Scenario 1. We hold enough ETH to satisfy withdrawal. Send it out directly\r\n        // Scenario 2. We hold enough wstETH to satisy withdrawal. Unwrap then swap\r\n        // Scenario 3. We hold enough ETH + stETH to satisfy withdrawal. Do a swap\r\n\r\n        // Scenario 1\r\n        if (ethBalance >= amount) {\r\n            return amount;\r\n        }\r\n\r\n        // Scenario 2\r\n        stethBalance = unwrapWstethForWithdrawal(\r\n            wstEth,\r\n            steth,\r\n            ethBalance,\r\n            stethBalance,\r\n            amount,\r\n            minETHOut\r\n        );\r\n\r\n        // Scenario 3\r\n        // Now that we satisfied the ETH + stETH sum, we swap the stETH amounts necessary\r\n        // to facilitate a withdrawal\r\n\r\n        // This won't underflow since we already asserted that ethBalance < amount before this\r\n        uint256 stEthAmountToSwap =\r\n            DSMath.min(amount.sub(ethBalance), stethBalance);\r\n\r\n        uint256 ethAmountOutFromSwap =\r\n            swapStEthToEth(steth, crvPool, stEthAmountToSwap);\r\n\r\n        uint256 totalETHOut = ethBalance.add(ethAmountOutFromSwap);\r\n\r\n        // Since minETHOut is derived from calling the Curve pool's getter,\r\n        // it reverts in the worst case where the user needs to unwrap and sell\r\n        // 100% of their ETH withdrawal amount\r\n        require(\r\n            totalETHOut >= minETHOut,\r\n            \"Output ETH amount smaller than minETHOut\"\r\n        );\r\n\r\n        return totalETHOut;\r\n    }\r\n\r\n    /**\r\n     * @notice Unwraps the required amount of wstETH to a target ETH amount\r\n     * @param wstEthAddress is the address for wstETH\r\n     * @param steth is the ERC20 of stETH\r\n     * @param startStEthBalance is the starting stETH balance used to determine how much more to unwrap\r\n     * @param ethAmount is the ETH amount needed for the contract\r\n     * @param minETHOut is the ETH amount but adjusted for slippage\r\n     * @return the new stETH balance\r\n     */\r\n    function unwrapWstethForWithdrawal(\r\n        address wstEthAddress,\r\n        IERC20 steth,\r\n        uint256 ethBalance,\r\n        uint256 startStEthBalance,\r\n        uint256 ethAmount,\r\n        uint256 minETHOut\r\n    ) internal returns (uint256) {\r\n        uint256 ethstEthSum = ethBalance.add(startStEthBalance);\r\n\r\n        if (ethstEthSum < minETHOut) {\r\n            uint256 stethNeededFromUnwrap = ethAmount.sub(ethstEthSum);\r\n            IWSTETH wstEth = IWSTETH(wstEthAddress);\r\n            uint256 wstAmountToUnwrap =\r\n                wstEth.getWstETHByStETH(stethNeededFromUnwrap);\r\n\r\n            wstEth.unwrap(wstAmountToUnwrap);\r\n\r\n            uint256 newStEthBalance = steth.balanceOf(address(this));\r\n            require(\r\n                ethBalance.add(newStEthBalance) >= minETHOut,\r\n                \"Unwrapping wstETH did not return sufficient stETH\"\r\n            );\r\n            return newStEthBalance;\r\n        }\r\n        return startStEthBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps from stEth to ETH on the Lido Curve pool\r\n     * @param steth is the address for the Lido staked ether\r\n     * @param crvPool is the Curve pool address to do the swap\r\n     * @param stEthAmount is the stEth amount to be swapped to Ether\r\n     * @return ethAmountOutFromSwap is the returned ETH amount from swap\r\n     */\r\n    function swapStEthToEth(\r\n        IERC20 steth,\r\n        address crvPool,\r\n        uint256 stEthAmount\r\n    ) internal returns (uint256) {\r\n        steth.safeApprove(crvPool, stEthAmount);\r\n\r\n        // CRV SWAP HERE from steth -> eth\r\n        // 0 = ETH, 1 = STETH\r\n        // We are setting 1, which is the smallest possible value for the _minAmountOut parameter\r\n        // However it is fine because we check that the totalETHOut >= minETHOut at the end\r\n        // which makes sandwich attacks not possible\r\n        uint256 ethAmountOutFromSwap =\r\n            ICRV(crvPool).exchange(1, 0, stEthAmount, 1);\r\n\r\n        return ethAmountOutFromSwap;\r\n    }\r\n\r\n    /**\r\n     * @notice Wraps the necessary amount of the base token to the yield-bearing yearn token\r\n     * @param weth is the address of weth\r\n     * @param collateralToken is the address of the collateral token\r\n     */\r\n    function wrapToYieldToken(\r\n        address weth,\r\n        address collateralToken,\r\n        address steth\r\n    ) external {\r\n        // Unwrap all weth premiums transferred to contract\r\n        IWETH wethToken = IWETH(weth);\r\n        uint256 wethBalance = wethToken.balanceOf(address(this));\r\n\r\n        if (wethBalance > 0) {\r\n            wethToken.withdraw(wethBalance);\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n\r\n        IWSTETH collateral = IWSTETH(collateralToken);\r\n        IERC20 stethToken = IERC20(steth);\r\n\r\n        if (ethBalance > 0) {\r\n            // Send eth to Lido, recieve steth\r\n            ISTETH(steth).submit{value: ethBalance}(address(this));\r\n        }\r\n\r\n        // Get all steth in contract\r\n        uint256 stethBalance = stethToken.balanceOf(address(this));\r\n\r\n        if (stethBalance > 0) {\r\n            // approve wrap\r\n            stethToken.safeApprove(collateralToken, stethBalance.add(1));\r\n            // Wrap to wstETH - need to add 1 to steth balance as it is innacurate\r\n            collateral.wrap(stethBalance.add(1));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Gets stETH for direct stETH withdrawals, converts wstETH/ETH to stETH if not enough stETH\r\n     * @param steth is the address of steth\r\n     * @param wstEth is the address of wsteth\r\n     * @param amount is the amount to withdraw\r\n     * @return amount of stETH to transfer to the user, this is to account for rounding errors when unwrapping wstETH\r\n     */\r\n    function withdrawStEth(\r\n        address steth,\r\n        address wstEth,\r\n        uint256 amount\r\n    ) external returns (uint256) {\r\n        // 3 different scenarios for withdrawing stETH directly\r\n        // Scenario 1. We hold enough stETH to satisfy withdrawal. Send it out directly\r\n        // Scenario 2. We hold enough stETH + wstETH to satisy withdrawal. Unwrap wstETH then send it\r\n        // Scenario 3. We hold enough stETH + wstETH + ETH satisfy withdrawal. Unwrap wstETH, wrap ETH then send it\r\n        uint256 _amount = amount;\r\n        uint256 stethBalance = IERC20(steth).balanceOf(address(this));\r\n        if (stethBalance >= amount) {\r\n            // Can send out the stETH directly\r\n            return amount; // We return here if we have enough stETH to satisfy the withdrawal\r\n        } else {\r\n            // If amount > stethBalance, send out the entire stethBalance and check wstETH and ETH\r\n            amount = amount.sub(stethBalance);\r\n        }\r\n        uint256 wstethBalance = IWSTETH(wstEth).balanceOf(address(this));\r\n        uint256 totalShares = ISTETH(steth).getTotalShares();\r\n        uint256 totalPooledEther = ISTETH(steth).getTotalPooledEther();\r\n        stethBalance = wstethBalance.mul(totalPooledEther).div(totalShares);\r\n        if (stethBalance >= amount) {\r\n            wstethBalance = amount.mul(totalShares).div(totalPooledEther);\r\n            // Avoids reverting if unwrap amount is 0\r\n            if (wstethBalance > 0) {\r\n                // Unwraps wstETH and sends out the received stETH directly\r\n                IWSTETH(wstEth).unwrap(wstethBalance);\r\n                // Accounts for rounding errors when unwrapping wstETH, this is safe because this function would've\r\n                // returned already if the stETH balance was greater than our withdrawal amount\r\n                return IERC20(steth).balanceOf(address(this)); // We return here if we have enough stETH + wstETH\r\n            }\r\n        } else if (stethBalance > 0) {\r\n            stethBalance = IERC20(steth).balanceOf(address(this));\r\n            IWSTETH(wstEth).unwrap(wstethBalance);\r\n            // Accounts for rounding errors when unwrapping wstETH\r\n            amount = amount.sub(\r\n                IERC20(steth).balanceOf(address(this)).sub(stethBalance)\r\n            );\r\n        }\r\n        // Wrap ETH to stETH if we don't have enough stETH + wstETH\r\n        uint256 ethBalance = address(this).balance;\r\n        if (amount > 0 && ethBalance >= amount) {\r\n            ISTETH(steth).submit{value: amount}(address(this));\r\n        } else if (ethBalance > 0) {\r\n            ISTETH(steth).submit{value: ethBalance}(address(this));\r\n        }\r\n        stethBalance = IERC20(steth).balanceOf(address(this));\r\n        // Accounts for rounding errors by a margin of 3 wei\r\n        require(_amount.add(3) >= stethBalance, \"Unwrapped too much stETH\");\r\n        require(_amount <= stethBalance.add(3), \"Unwrapped insufficient stETH\");\r\n        return stethBalance; // We return here if we have enough stETH + wstETH + ETH\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\r\n     * @param recipient is the receiving address\r\n     * @param amount is the transfer amount\r\n     */\r\n    function transferAsset(address recipient, uint256 amount) public {\r\n        (bool success, ) = payable(recipient).call{value: amount}(\"\");\r\n        require(success, \"!success\");\r\n    }\r\n\r\n    function getOTokenPremium(\r\n        address oTokenAddress,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount,\r\n        address collateralToken\r\n    ) external view returns (uint256) {\r\n        return\r\n            _getOTokenPremium(\r\n                oTokenAddress,\r\n                optionsPremiumPricer,\r\n                premiumDiscount,\r\n                collateralToken\r\n            );\r\n    }\r\n\r\n    function _getOTokenPremium(\r\n        address oTokenAddress,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount,\r\n        address collateralToken\r\n    ) internal view returns (uint256) {\r\n        IOtoken newOToken = IOtoken(oTokenAddress);\r\n        IOptionsPremiumPricer premiumPricer =\r\n            IOptionsPremiumPricer(optionsPremiumPricer);\r\n\r\n        // Apply black-scholes formula (from rvol library) to option given its features\r\n        // and get price for 100 contracts denominated in the underlying asset for call option\r\n        // and USDC for put option\r\n        uint256 optionPremium =\r\n            premiumPricer.getPremium(\r\n                newOToken.strikePrice(),\r\n                newOToken.expiryTimestamp(),\r\n                newOToken.isPut()\r\n            );\r\n\r\n        // Apply a discount to incentivize arbitraguers\r\n        optionPremium = optionPremium.mul(premiumDiscount).div(\r\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\r\n        );\r\n\r\n        // get the black scholes premium of the option and adjust premium based on\r\n        // steth <-> eth exchange rate\r\n        uint256 adjustedPremium =\r\n            DSMath.wmul(\r\n                optionPremium,\r\n                IWSTETH(collateralToken).stEthPerToken()\r\n            );\r\n\r\n        require(\r\n            adjustedPremium <= type(uint96).max,\r\n            \"adjustedPremium > type(uint96) max value!\"\r\n        );\r\n        require(adjustedPremium > 0, \"!adjustedPremium\");\r\n\r\n        return adjustedPremium;\r\n    }\r\n}\r\n"
    },
    "contracts/vaults/STETHVault/base/RibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {\r\n    ReentrancyGuardUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {\r\n    ERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\nimport {Vault} from \"../../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {VaultLifecycleSTETH} from \"../../../libraries/VaultLifecycleSTETH.sol\";\r\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\r\nimport {IWSTETH} from \"../../../interfaces/ISTETH.sol\";\r\n\r\ncontract RibbonVault is\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable,\r\n    ERC20Upgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  NON UPGRADEABLE STORAGE\r\n     ***********************************************/\r\n\r\n    /// @notice Stores the user's pending deposit for the round\r\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\r\n\r\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\r\n    /// This is used to determine the number of shares to be returned\r\n    /// to a user with their DepositReceipt.depositAmount\r\n    mapping(uint256 => uint256) public roundPricePerShare;\r\n\r\n    /// @notice Stores pending user withdrawals\r\n    mapping(address => Vault.Withdrawal) public withdrawals;\r\n\r\n    /// @notice Vault's parameters like cap, decimals\r\n    Vault.VaultParams public vaultParams;\r\n\r\n    /// @notice Vault's lifecycle state like round and locked amounts\r\n    Vault.VaultState public vaultState;\r\n\r\n    /// @notice Vault's state of the options sold and the timelocked option\r\n    Vault.OptionState public optionState;\r\n\r\n    /// @notice Fee recipient for the performance and management fees\r\n    address public feeRecipient;\r\n\r\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\r\n    // no access to critical vault changes\r\n    address public keeper;\r\n\r\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public performanceFee;\r\n\r\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public managementFee;\r\n\r\n    /// @notice wstETH vault contract\r\n    IWSTETH public immutable collateralToken;\r\n\r\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\r\n    uint256[30] private ____gap;\r\n\r\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\r\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaSTETHVaultStorage\r\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public immutable WETH;\r\n\r\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    address public immutable USDC;\r\n\r\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\r\n    uint256 public constant DELAY = 0;\r\n\r\n    /// @notice 7 day period between each options sale.\r\n    uint256 public constant PERIOD = 7 days;\r\n\r\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\r\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\r\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\r\n\r\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\r\n    // which allows users to perform multiple actions on their vaults\r\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\r\n    address public immutable GAMMA_CONTROLLER;\r\n\r\n    // MARGIN_POOL is Gamma protocol's collateral pool.\r\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\r\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\r\n    address public immutable MARGIN_POOL;\r\n\r\n    // SWAP_CONTRACT is a contract for settling bids via signed messages\r\n    // https://github.com/ribbon-finance/ribbon-v2/blob/master/contracts/utils/Swap.sol\r\n    address public immutable SWAP_CONTRACT;\r\n\r\n    /// @notice STETH contract address\r\n    address public immutable STETH;\r\n\r\n    /// @notice Lido DAO token 0x5a98fcbea516cf06857215779fd812ca3bef1b32\r\n    address public immutable LDO;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event Deposit(address indexed account, uint256 amount, uint256 round);\r\n\r\n    event InitiateWithdraw(\r\n        address indexed account,\r\n        uint256 shares,\r\n        uint256 round\r\n    );\r\n\r\n    event Redeem(address indexed account, uint256 share, uint256 round);\r\n\r\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\r\n\r\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\r\n\r\n    event CapSet(uint256 oldCap, uint256 newCap);\r\n\r\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\r\n\r\n    event CollectVaultFees(\r\n        uint256 performanceFee,\r\n        uint256 vaultFee,\r\n        uint256 round,\r\n        address indexed feeRecipient\r\n    );\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _wsteth is the wstETH contract\r\n     * @param _ldo is the LDO contract\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _wsteth,\r\n        address _ldo,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    ) {\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_usdc != address(0), \"!_usdc\");\r\n        require(_swapContract != address(0), \"!_swapContract\");\r\n        require(_wsteth != address(0), \"!_wsteth\");\r\n        require(_ldo != address(0), \"!_ldo\");\r\n        require(_gammaController != address(0), \"!_gammaController\");\r\n        require(_marginPool != address(0), \"!_marginPool\");\r\n\r\n        WETH = _weth;\r\n        USDC = _usdc;\r\n        LDO = _ldo;\r\n        STETH = IWSTETH(_wsteth).stETH();\r\n\r\n        GAMMA_CONTROLLER = _gammaController;\r\n        MARGIN_POOL = _marginPool;\r\n        SWAP_CONTRACT = _swapContract;\r\n        collateralToken = IWSTETH(_wsteth);\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     */\r\n    function baseInitialize(\r\n        address _owner,\r\n        address _keeper,\r\n        address _feeRecipient,\r\n        uint256 _managementFee,\r\n        uint256 _performanceFee,\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) internal initializer {\r\n        VaultLifecycleWithSwap.verifyInitializerParams(\r\n            _owner,\r\n            _keeper,\r\n            _feeRecipient,\r\n            _performanceFee,\r\n            _managementFee,\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _vaultParams\r\n        );\r\n\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_tokenName, _tokenSymbol);\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n\r\n        keeper = _keeper;\r\n\r\n        feeRecipient = _feeRecipient;\r\n        performanceFee = _performanceFee;\r\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\r\n            WEEKS_PER_YEAR\r\n        );\r\n        vaultParams = _vaultParams;\r\n\r\n        uint256 assetBalance = totalBalance();\r\n        ShareMath.assertUint104(assetBalance);\r\n        vaultState.lastLockedAmount = uint104(assetBalance);\r\n\r\n        vaultState.round = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper, \"!keeper\");\r\n        _;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new keeper\r\n     * @param newKeeper is the address of the new keeper\r\n     */\r\n    function setNewKeeper(address newKeeper) external onlyOwner {\r\n        require(newKeeper != address(0), \"!newKeeper\");\r\n        keeper = newKeeper;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new fee recipient\r\n     * @param newFeeRecipient is the address of the new fee recipient\r\n     */\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\r\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\r\n        feeRecipient = newFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the management fee for the vault\r\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\r\n     */\r\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\r\n        require(\r\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid management fee\"\r\n        );\r\n\r\n        // We are dividing annualized management fee by num weeks in a year\r\n        uint256 tmpManagementFee =\r\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\r\n\r\n        emit ManagementFeeSet(managementFee, newManagementFee);\r\n\r\n        managementFee = tmpManagementFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the performance fee for the vault\r\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\r\n     */\r\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\r\n        require(\r\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid performance fee\"\r\n        );\r\n\r\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\r\n\r\n        performanceFee = newPerformanceFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new cap for deposits\r\n     * @param newCap is the new cap for deposits\r\n     */\r\n    function setCap(uint256 newCap) external onlyOwner {\r\n        require(newCap > 0, \"!newCap\");\r\n        ShareMath.assertUint104(newCap);\r\n        emit CapSet(vaultParams.cap, newCap);\r\n        vaultParams.cap = uint104(newCap);\r\n    }\r\n\r\n    /************************************************\r\n     *  DEPOSIT & WITHDRAWALS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Deposits ETH into the contract and mint vault shares.\r\n     */\r\n    function depositETH() external payable nonReentrant {\r\n        require(msg.value > 0, \"!value\");\r\n\r\n        _depositFor(msg.value, msg.sender, true);\r\n    }\r\n\r\n    function depositYieldToken(uint256 amount) external {\r\n        _depositYieldTokenFor(amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `collateralAsset` into the contract and mint vault shares.\r\n     * @param amount is the amount of `collateralAsset` to deposit\r\n     * @param creditor is the amount of `collateralAsset` to deposit\r\n     */\r\n    function depositYieldTokenFor(uint256 amount, address creditor) external {\r\n        require(creditor != address(0), \"!creditor\");\r\n        _depositYieldTokenFor(amount, creditor);\r\n    }\r\n\r\n    function _depositYieldTokenFor(uint256 amount, address creditor)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"!amount\");\r\n\r\n        // stETH transfers suffer from an off-by-1 error\r\n        _depositFor(amount.sub(1), creditor, false);\r\n\r\n        IERC20(STETH).safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\r\n     * @notice Used for vault -> vault deposits on the user's behalf\r\n     * @param creditor is the address that can claim/withdraw deposited amount\r\n     */\r\n    function depositFor(address creditor) external payable nonReentrant {\r\n        require(msg.value > 0, \"!value\");\r\n        require(creditor != address(0), \"!creditor\");\r\n\r\n        _depositFor(msg.value, creditor, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the vault shares to the creditor\r\n     * @param amount is the amount of `asset` deposited\r\n     * @param creditor is the address to receieve the deposit\r\n     * @param isETH is whether this is a depositETH call\r\n     */\r\n    function _depositFor(\r\n        uint256 amount,\r\n        address creditor,\r\n        bool isETH\r\n    ) private {\r\n        uint256 currentRound = vaultState.round;\r\n        uint256 totalWithDepositedAmount =\r\n            isETH ? totalBalance() : totalBalance().add(amount);\r\n\r\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\r\n        require(\r\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\r\n            \"Insufficient balance\"\r\n        );\r\n\r\n        emit Deposit(creditor, amount, currentRound);\r\n\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\r\n\r\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        uint256 depositAmount = amount;\r\n\r\n        // If we have a pending deposit in the current round, we add on to the pending deposit\r\n        if (currentRound == depositReceipt.round) {\r\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\r\n            depositAmount = newAmount;\r\n        }\r\n\r\n        ShareMath.assertUint104(depositAmount);\r\n\r\n        depositReceipts[creditor] = Vault.DepositReceipt({\r\n            round: uint16(currentRound),\r\n            amount: uint104(depositAmount),\r\n            unredeemedShares: uint128(unredeemedShares)\r\n        });\r\n\r\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\r\n        ShareMath.assertUint128(newTotalPending);\r\n\r\n        vaultState.totalPending = uint128(newTotalPending);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function _initiateWithdraw(uint256 numShares) internal {\r\n        require(numShares > 0, \"!numShares\");\r\n\r\n        // We do a max redeem before initiating a withdrawal\r\n        // But we check if they must first have unredeemed shares\r\n        if (\r\n            depositReceipts[msg.sender].amount > 0 ||\r\n            depositReceipts[msg.sender].unredeemedShares > 0\r\n        ) {\r\n            _redeem(0, true);\r\n        }\r\n\r\n        // This caches the `round` variable used in shareBalances\r\n        uint256 currentRound = vaultState.round;\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\r\n\r\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\r\n\r\n        uint256 existingShares = uint256(withdrawal.shares);\r\n\r\n        uint256 withdrawalShares;\r\n        if (withdrawalIsSameRound) {\r\n            withdrawalShares = existingShares.add(numShares);\r\n        } else {\r\n            require(existingShares == 0, \"Existing withdraw\");\r\n            withdrawalShares = numShares;\r\n            withdrawals[msg.sender].round = uint16(currentRound);\r\n        }\r\n\r\n        ShareMath.assertUint128(withdrawalShares);\r\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\r\n\r\n        _transfer(msg.sender, address(this), numShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     * @return amountETHOut the current withdrawal amount\r\n     */\r\n    function _completeWithdraw() internal returns (uint256) {\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        uint256 withdrawalShares = withdrawal.shares;\r\n        uint256 withdrawalRound = withdrawal.round;\r\n\r\n        // This checks if there is a withdrawal\r\n        require(withdrawalShares > 0, \"Not initiated\");\r\n\r\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\r\n\r\n        // We leave the round number as non-zero to save on gas for subsequent writes\r\n        withdrawals[msg.sender].shares = 0;\r\n        vaultState.queuedWithdrawShares = uint128(\r\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\r\n        );\r\n\r\n        uint256 withdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                withdrawalShares,\r\n                roundPricePerShare[withdrawalRound],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        IERC20(STETH).safeTransfer(\r\n            msg.sender,\r\n            VaultLifecycleSTETH.withdrawStEth(\r\n                STETH,\r\n                address(collateralToken),\r\n                withdrawAmount\r\n            )\r\n        );\r\n\r\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\r\n\r\n        _burn(address(this), withdrawalShares);\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem\r\n     */\r\n    function redeem(uint256 numShares) external nonReentrant {\r\n        require(numShares > 0, \"!numShares\");\r\n        _redeem(numShares, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\r\n     */\r\n    function maxRedeem() external nonReentrant {\r\n        _redeem(0, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\r\n     * @param isMax is flag for when callers do a max redemption\r\n     */\r\n    function _redeem(uint256 numShares, bool isMax) internal {\r\n        Vault.DepositReceipt memory depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        // This handles the null case when depositReceipt.round = 0\r\n        // Because we start with round = 1 at `initialize`\r\n        uint256 currentRound = vaultState.round;\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        numShares = isMax ? unredeemedShares : numShares;\r\n        if (numShares == 0) {\r\n            return;\r\n        }\r\n        require(numShares <= unredeemedShares, \"Exceeds available\");\r\n\r\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\r\n        // we debit from the unredeemedShares, but leave the amount field intact\r\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\r\n        if (depositReceipt.round < currentRound) {\r\n            depositReceipts[msg.sender].amount = 0;\r\n        }\r\n\r\n        ShareMath.assertUint128(numShares);\r\n        depositReceipts[msg.sender].unredeemedShares = uint128(\r\n            unredeemedShares.sub(numShares)\r\n        );\r\n\r\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\r\n\r\n        _transfer(address(this), msg.sender, numShares);\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\r\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\r\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\r\n     * @param numRounds is the number of rounds to initialize in the map\r\n     */\r\n    function initRounds(uint256 numRounds) external nonReentrant {\r\n        require(numRounds > 0, \"!numRounds\");\r\n\r\n        uint256 _round = vaultState.round;\r\n        for (uint256 i = 0; i < numRounds; i++) {\r\n            uint256 index = _round + i;\r\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\r\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function that performs most administrative tasks\r\n     * such as minting new shares, getting vault fees, etc.\r\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\r\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\r\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\r\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\r\n     */\r\n    function _closeRound(\r\n        uint256 lastQueuedWithdrawAmount,\r\n        uint256 currentQueuedWithdrawShares\r\n    ) internal returns (uint256 lockedBalance, uint256 queuedWithdrawAmount) {\r\n        address recipient = feeRecipient;\r\n        address collateral = address(collateralToken);\r\n        uint256 mintShares;\r\n        uint256 performanceFeeInAsset;\r\n        uint256 totalVaultFee;\r\n        {\r\n            uint256 newPricePerShare;\r\n            (\r\n                lockedBalance,\r\n                queuedWithdrawAmount,\r\n                newPricePerShare,\r\n                mintShares,\r\n                performanceFeeInAsset,\r\n                totalVaultFee\r\n            ) = VaultLifecycleWithSwap.closeRound(\r\n                vaultState,\r\n                VaultLifecycleWithSwap.CloseParams(\r\n                    vaultParams.decimals,\r\n                    totalBalance(),\r\n                    totalSupply(),\r\n                    lastQueuedWithdrawAmount,\r\n                    performanceFee,\r\n                    managementFee,\r\n                    currentQueuedWithdrawShares\r\n                )\r\n            );\r\n\r\n            // Finalize the pricePerShare at the end of the round\r\n            uint256 currentRound = vaultState.round;\r\n            roundPricePerShare[currentRound] = newPricePerShare;\r\n\r\n            // Wrap entire `asset` balance to `collateralToken` balance\r\n            VaultLifecycleSTETH.wrapToYieldToken(WETH, collateral, STETH);\r\n\r\n            emit CollectVaultFees(\r\n                performanceFeeInAsset,\r\n                totalVaultFee,\r\n                currentRound,\r\n                recipient\r\n            );\r\n\r\n            vaultState.totalPending = 0;\r\n            vaultState.round = uint16(currentRound + 1);\r\n        }\r\n\r\n        _mint(address(this), mintShares);\r\n\r\n        if (totalVaultFee > 0) {\r\n            VaultLifecycleSTETH.withdrawYieldAndBaseToken(\r\n                collateral,\r\n                WETH,\r\n                recipient,\r\n                totalVaultFee\r\n            );\r\n        }\r\n\r\n        return (lockedBalance, queuedWithdrawAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Transfers LDO rewards to feeRecipient\r\n     */\r\n    function sendLDORewards() external {\r\n        IERC20 ldo = IERC20(LDO);\r\n        ldo.safeTransfer(feeRecipient, ldo.balanceOf(address(this)));\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Returns the asset balance held on the vault for the account\r\n     * @param account is the address to lookup balance for\r\n     * @return the amount of `asset` custodied by the vault for the user\r\n     */\r\n    function accountVaultBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _decimals = vaultParams.decimals;\r\n        uint256 assetPerShare =\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                _decimals\r\n            );\r\n        return\r\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance including unredeemed shares\r\n     * @param account is the account to lookup share balance for\r\n     * @return the share balance\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\r\n        return heldByAccount.add(heldByVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance split between account and vault holdings\r\n     * @param account is the account to lookup share balance for\r\n     * @return heldByAccount is the shares held by account\r\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\r\n     */\r\n    function shareBalances(address account)\r\n        public\r\n        view\r\n        returns (uint256 heldByAccount, uint256 heldByVault)\r\n    {\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\r\n\r\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\r\n            return (balanceOf(account), 0);\r\n        }\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                vaultState.round,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        return (balanceOf(account), unredeemedShares);\r\n    }\r\n\r\n    /**\r\n     * @notice The price of a unit of share denominated in the `asset`\r\n     */\r\n    function pricePerShare() external view returns (uint256) {\r\n        return\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                vaultParams.decimals\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\r\n     * @return total balance of the vault, including the amounts locked in third party protocols\r\n     */\r\n    function totalBalance() public view returns (uint256) {\r\n        // After calling closeRound, current option is set to none\r\n        // We also commit the lockedAmount but do not deposit into Opyn\r\n        // which results in double counting of asset balance and lockedAmount\r\n        uint256 wethBalance = IERC20(WETH).balanceOf(address(this));\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 stethFromWsteth =\r\n            collateralToken.getStETHByWstETH(\r\n                collateralToken.balanceOf(address(this))\r\n            );\r\n\r\n        uint256 stEthBalance = IERC20(STETH).balanceOf(address(this));\r\n        uint256 lockedAmount =\r\n            optionState.currentOption != address(0)\r\n                ? uint256(vaultState.lockedAmount)\r\n                : 0;\r\n\r\n        return\r\n            wethBalance\r\n                .add(lockedAmount)\r\n                .add(ethBalance)\r\n                .add(stethFromWsteth)\r\n                .add(stEthBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token decimals\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return vaultParams.decimals;\r\n    }\r\n\r\n    function cap() external view returns (uint256) {\r\n        return vaultParams.cap;\r\n    }\r\n\r\n    function nextOptionReadyAt() external view returns (uint256) {\r\n        return optionState.nextOptionReadyAt;\r\n    }\r\n\r\n    function currentOption() external view returns (address) {\r\n        return optionState.currentOption;\r\n    }\r\n\r\n    function nextOption() external view returns (address) {\r\n        return optionState.nextOption;\r\n    }\r\n\r\n    function totalPending() external view returns (uint256) {\r\n        return vaultState.totalPending;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ISTETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface IWSTETH {\r\n    function getStETHByWstETH(uint256 _amount) external view returns (uint256);\r\n\r\n    function getWstETHByStETH(uint256 _amount) external view returns (uint256);\r\n\r\n    function stEthPerToken() external view returns (uint256);\r\n\r\n    function tokensPerStEth() external view returns (uint256);\r\n\r\n    function stETH() external view returns (address);\r\n\r\n    function wrap(uint256 _amount) external returns (uint256);\r\n\r\n    function unwrap(uint256 _amount) external returns (uint256);\r\n\r\n    function approve(address _recipient, uint256 _amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ninterface ISTETH {\r\n    function getBufferedEther(uint256 _amount) external view returns (uint256);\r\n\r\n    function getPooledEthByShares(uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getSharesByPooledEth(uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function submit(address _referralAddress)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function withdraw(uint256 _amount, bytes32 _pubkeyHash)\r\n        external\r\n        returns (uint256);\r\n\r\n    function approve(address _recipient, uint256 _amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function getTotalShares() external view returns (uint256);\r\n\r\n    function getTotalPooledEther() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/ICRV.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface ICRV {\r\n    function get_dy(\r\n        int128 _indexIn,\r\n        int128 _indexOut,\r\n        uint256 _amountIn\r\n    ) external view returns (uint256);\r\n\r\n    // https://github.com/curvefi/curve-contract/blob/\r\n    // b0bbf77f8f93c9c5f4e415bce9cd71f0cdee960e/contracts/pools/steth/StableSwapSTETH.vy#L431\r\n    function exchange(\r\n        int128 _indexIn,\r\n        int128 _indexOut,\r\n        uint256 _amountIn,\r\n        uint256 _minAmountOut\r\n    ) external returns (uint256);\r\n}\r\n"
    },
    "contracts/tests/TestVaultLifecycleSTETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {ISTETH, IWSTETH} from \"../interfaces/ISTETH.sol\";\r\nimport {VaultLifecycleSTETH} from \"../libraries/VaultLifecycleSTETH.sol\";\r\n\r\ncontract TestVaultLifecycleSTETH {\r\n    address constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\r\n    address constant crvPool = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;\r\n\r\n    // To avoid using events to get the output, we just set it so we can read\r\n    // it off the contract\r\n    uint256 public output;\r\n\r\n    function unwrapYieldToken(uint256 amount, uint256 minETHOut) external {\r\n        uint256 amountETHOut =\r\n            VaultLifecycleSTETH.unwrapYieldToken(\r\n                amount,\r\n                wstETH,\r\n                IWSTETH(wstETH).stETH(),\r\n                crvPool,\r\n                minETHOut\r\n            );\r\n        output = amountETHOut;\r\n    }\r\n\r\n    function withdrawStEth(uint256 amount) external {\r\n        address steth = IWSTETH(wstETH).stETH();\r\n        uint256 amountETHOut =\r\n            VaultLifecycleSTETH.withdrawStEth(steth, wstETH, amount);\r\n        output = amountETHOut;\r\n        ISTETH(steth).transfer(msg.sender, amountETHOut);\r\n    }\r\n\r\n    // Enables test to send ETH for testing\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/utils/SAVAXDepositHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {ISAVAX} from \"../interfaces/ISAVAX.sol\";\r\nimport {IRibbonVault} from \"../interfaces/IRibbon.sol\";\r\n\r\ncontract SAVAXDepositHelper {\r\n    ISAVAX public immutable sAVAX;\r\n    IRibbonVault public immutable sAVAXVault;\r\n\r\n    constructor(address _sAVAX, address _sAVAXVault) {\r\n        require(_sAVAX != address(0), \"!sAVAX\");\r\n        require(_sAVAXVault != address(0), \"!sAVAXVault\");\r\n\r\n        sAVAX = ISAVAX(_sAVAX);\r\n        sAVAXVault = IRibbonVault(_sAVAXVault);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        uint256 sAVAXAmount = sAVAX.submit{value: msg.value}();\r\n        sAVAX.approve(address(sAVAXVault), sAVAXAmount);\r\n        sAVAXVault.depositFor(sAVAXAmount, msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ISAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ISAVAX is IERC20 {\r\n    function getSharesByPooledAvax(uint256 avaxAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPooledAvaxByShares(uint256 shareAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function submit() external payable returns (uint256);\r\n}\r\n"
    },
    "contracts/oracles/SAvaxOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IPriceOracle} from \"../interfaces/IPriceOracle.sol\";\r\nimport {ISAVAX} from \"../interfaces/ISAVAX.sol\";\r\nimport {DSMath} from \"../vendor/DSMath.sol\";\r\n\r\ncontract SAvaxOracle is IPriceOracle {\r\n    using SafeMath for uint256;\r\n\r\n    AggregatorV3Interface public immutable WAVAXOracle;\r\n    ISAVAX public immutable sAVAX;\r\n\r\n    constructor(address _sAVAX, address _WAVAXOracle) {\r\n        require(_sAVAX != address(0), \"!sAVAX\");\r\n        require(_WAVAXOracle != address(0), \"!WAVAXOracle\");\r\n\r\n        sAVAX = ISAVAX(_sAVAX);\r\n        WAVAXOracle = AggregatorV3Interface(_WAVAXOracle);\r\n    }\r\n\r\n    function _underlyingPriceToSAvaxPrice(uint256 underlyingPrice)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Passing 1e18 to getPooledAvaxByShares() gives us the number of AVAX per sAVAX.\r\n        uint256 sAvaxPerAvax = sAVAX.getPooledAvaxByShares(1e18);\r\n        return sAvaxPerAvax.mul(underlyingPrice).div(1e18);\r\n    }\r\n\r\n    function latestAnswer() external view override returns (uint256) {\r\n        (\r\n            uint80 roundID,\r\n            int256 price,\r\n            ,\r\n            uint256 timeStamp,\r\n            uint80 answeredInRound\r\n        ) = WAVAXOracle.latestRoundData();\r\n\r\n        require(answeredInRound >= roundID, \"Stale oracle price\");\r\n        require(timeStamp != 0, \"!timeStamp\");\r\n        uint256 underlyingPrice = uint256(DSMath.imax(price, 0));\r\n        return _underlyingPriceToSAvaxPrice(underlyingPrice);\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return WAVAXOracle.decimals();\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPriceOracle {\r\n    function decimals() external view returns (uint256 _decimals);\r\n\r\n    function latestAnswer() external view returns (uint256 price);\r\n}\r\n"
    },
    "contracts/libraries/VaultLifecycleYearn.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {DSMath} from \"../vendor/DSMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {VaultLifecycle} from \"./VaultLifecycle.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\nimport {ShareMath} from \"./ShareMath.sol\";\r\nimport {IYearnVault} from \"../interfaces/IYearn.sol\";\r\nimport {IWETH} from \"../interfaces/IWETH.sol\";\r\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\r\nimport {\r\n    IOtokenFactory,\r\n    IOtoken,\r\n    IController,\r\n    GammaTypes\r\n} from \"../interfaces/GammaInterface.sol\";\r\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\r\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\r\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\r\n\r\nlibrary VaultLifecycleYearn {\r\n    using SafeMath for uint256;\r\n    using SupportsNonCompliantERC20 for IERC20;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @param collateralAsset is the address of the collateral asset\r\n     * @param isYearnPaused is whether yearn is enabled in contract\r\n     * @return otokenAddress is the address of the new option\r\n     * @return strikePrice is the strike price of the new option\r\n     * @return delta is the delta of the new option\r\n     */\r\n    function commitAndClose(\r\n        VaultLifecycle.CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        Vault.VaultState storage vaultState,\r\n        address collateralAsset,\r\n        bool isYearnPaused\r\n    )\r\n        external\r\n        returns (\r\n            address otokenAddress,\r\n            uint256 strikePrice,\r\n            uint256 delta\r\n        )\r\n    {\r\n        uint256 expiry =\r\n            VaultLifecycle.getNextExpiry(closeParams.currentOption);\r\n\r\n        bool isPut = vaultParams.isPut;\r\n\r\n        IStrikeSelection selection =\r\n            IStrikeSelection(closeParams.strikeSelection);\r\n\r\n        // calculate strike and delta\r\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\r\n            vaultState.round\r\n            ? (closeParams.overriddenStrikePrice, selection.delta())\r\n            : selection.getStrikePrice(expiry, isPut);\r\n\r\n        require(strikePrice != 0, \"!strikePrice\");\r\n\r\n        // retrieve address if option already exists, or deploy it\r\n        otokenAddress = VaultLifecycle.getOrDeployOtoken(\r\n            closeParams,\r\n            vaultParams,\r\n            vaultParams.underlying,\r\n            isYearnPaused ? vaultParams.asset : collateralAsset,\r\n            strikePrice,\r\n            expiry,\r\n            isPut\r\n        );\r\n\r\n        return (otokenAddress, strikePrice, delta);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the shares to mint, new price per share, and\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * @param currentShareSupply is the total supply of shares\r\n     * @param currentBalance is the total balance of the vault\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @return newLockedAmount is the amount of funds to allocate for the new round\r\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\r\n     * @return newPricePerShare is the price per share of the new round\r\n     * @return mintShares is the amount of shares to mint from deposits\r\n     */\r\n    function rollover(\r\n        uint256 currentShareSupply,\r\n        uint256 currentBalance,\r\n        Vault.VaultParams calldata vaultParams,\r\n        Vault.VaultState calldata vaultState\r\n    )\r\n        external\r\n        pure\r\n        returns (\r\n            uint256 newLockedAmount,\r\n            uint256 queuedWithdrawAmount,\r\n            uint256 newPricePerShare,\r\n            uint256 mintShares\r\n        )\r\n    {\r\n        uint256 pendingAmount = uint256(vaultState.totalPending);\r\n        uint256 _decimals = vaultParams.decimals;\r\n\r\n        newPricePerShare = ShareMath.pricePerShare(\r\n            currentShareSupply,\r\n            currentBalance,\r\n            pendingAmount,\r\n            _decimals\r\n        );\r\n\r\n        // After closing the short, if the options expire in-the-money\r\n        // vault pricePerShare would go down because vault's asset balance decreased.\r\n        // This ensures that the newly-minted shares do not take on the loss.\r\n        uint256 _mintShares =\r\n            ShareMath.assetToShares(pendingAmount, newPricePerShare, _decimals);\r\n\r\n        uint256 newSupply = currentShareSupply.add(_mintShares);\r\n\r\n        uint256 queuedAmount =\r\n            newSupply > 0\r\n                ? ShareMath.sharesToAsset(\r\n                    vaultState.queuedWithdrawShares,\r\n                    newPricePerShare,\r\n                    _decimals\r\n                )\r\n                : 0;\r\n\r\n        return (\r\n            currentBalance.sub(queuedAmount),\r\n            queuedAmount,\r\n            newPricePerShare,\r\n            _mintShares\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws yvWETH + WETH (if necessary) from vault using vault shares\r\n     * @param weth is the weth address\r\n     * @param asset is the vault asset address\r\n     * @param collateralToken is the address of the collateral token\r\n     * @param recipient is the recipient\r\n     * @param amount is the withdraw amount in `asset`\r\n     * @return withdrawAmount is the withdraw amount in `collateralToken`\r\n     */\r\n    function withdrawYieldAndBaseToken(\r\n        address weth,\r\n        address asset,\r\n        address collateralToken,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (uint256) {\r\n        uint256 pricePerYearnShare =\r\n            IYearnVault(collateralToken).pricePerShare();\r\n        uint256 withdrawAmount =\r\n            DSMath.wdiv(\r\n                amount,\r\n                pricePerYearnShare.mul(decimalShift(collateralToken))\r\n            );\r\n        uint256 yieldTokenBalance =\r\n            withdrawYieldToken(collateralToken, recipient, withdrawAmount);\r\n\r\n        // If there is not enough yvWETH in the vault, it withdraws as much as possible and\r\n        // transfers the rest in `asset`\r\n        if (withdrawAmount > yieldTokenBalance) {\r\n            withdrawBaseToken(\r\n                weth,\r\n                asset,\r\n                collateralToken,\r\n                recipient,\r\n                withdrawAmount,\r\n                yieldTokenBalance,\r\n                pricePerYearnShare\r\n            );\r\n        }\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws yvWETH from vault\r\n     * @param collateralToken is the address of the collateral token\r\n     * @param recipient is the recipient\r\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\r\n     * @return yieldTokenBalance is the balance of the yield token\r\n     */\r\n    function withdrawYieldToken(\r\n        address collateralToken,\r\n        address recipient,\r\n        uint256 withdrawAmount\r\n    ) internal returns (uint256) {\r\n        IERC20 collateral = IERC20(collateralToken);\r\n\r\n        uint256 yieldTokenBalance = collateral.balanceOf(address(this));\r\n        uint256 yieldTokensToWithdraw =\r\n            DSMath.min(yieldTokenBalance, withdrawAmount);\r\n        if (yieldTokensToWithdraw > 0) {\r\n            collateral.safeTransfer(recipient, yieldTokensToWithdraw);\r\n        }\r\n\r\n        return yieldTokenBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws `asset` from vault\r\n     * @param weth is the weth address\r\n     * @param asset is the vault asset address\r\n     * @param collateralToken is the address of the collateral token\r\n     * @param recipient is the recipient\r\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\r\n     * @param yieldTokenBalance is the collateral token (yvWETH) balance of the vault\r\n     * @param pricePerYearnShare is the yvWETH<->WETH price ratio\r\n     */\r\n    function withdrawBaseToken(\r\n        address weth,\r\n        address asset,\r\n        address collateralToken,\r\n        address recipient,\r\n        uint256 withdrawAmount,\r\n        uint256 yieldTokenBalance,\r\n        uint256 pricePerYearnShare\r\n    ) internal {\r\n        uint256 underlyingTokensToWithdraw =\r\n            DSMath.wmul(\r\n                withdrawAmount.sub(yieldTokenBalance),\r\n                pricePerYearnShare.mul(decimalShift(collateralToken))\r\n            );\r\n        transferAsset(\r\n            weth,\r\n            asset,\r\n            payable(recipient),\r\n            underlyingTokensToWithdraw\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Unwraps the necessary amount of the yield-bearing yearn token\r\n     *         and transfers amount to vault\r\n     * @param amount is the amount of `asset` to withdraw\r\n     * @param asset is the vault asset address\r\n     * @param collateralToken is the address of the collateral token\r\n     * @param yearnWithdrawalBuffer is the buffer for withdrawals from yearn vault\r\n     * @param yearnWithdrawalSlippage is the slippage for withdrawals from yearn vault\r\n     */\r\n    function unwrapYieldToken(\r\n        uint256 amount,\r\n        address asset,\r\n        address collateralToken,\r\n        uint256 yearnWithdrawalBuffer,\r\n        uint256 yearnWithdrawalSlippage\r\n    ) external {\r\n        uint256 assetBalance = IERC20(asset).balanceOf(address(this));\r\n        IYearnVault collateral = IYearnVault(collateralToken);\r\n\r\n        uint256 amountToUnwrap =\r\n            DSMath.wdiv(\r\n                DSMath.max(assetBalance, amount).sub(assetBalance),\r\n                collateral.pricePerShare().mul(decimalShift(collateralToken))\r\n            );\r\n\r\n        if (amountToUnwrap > 0) {\r\n            amountToUnwrap = amountToUnwrap\r\n                .add(amountToUnwrap.mul(yearnWithdrawalBuffer).div(10000))\r\n                .sub(1);\r\n\r\n            collateral.withdraw(\r\n                amountToUnwrap,\r\n                address(this),\r\n                yearnWithdrawalSlippage\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Wraps the necessary amount of the base token to the yield-bearing yearn token\r\n     * @param asset is the vault asset address\r\n     * @param collateralToken is the address of the collateral token\r\n     */\r\n    function wrapToYieldToken(address asset, address collateralToken) external {\r\n        uint256 amountToWrap = IERC20(asset).balanceOf(address(this));\r\n\r\n        if (amountToWrap > 0) {\r\n            IERC20(asset).safeApprove(collateralToken, amountToWrap);\r\n\r\n            // there is a slight imprecision with regards to calculating back from yearn token -> underlying\r\n            // that stems from miscoordination between ytoken .deposit() amount wrapped and pricePerShare\r\n            // at that point in time.\r\n            // ex: if I have 1 eth, deposit 1 eth into yearn vault and calculate value of yearn token balance\r\n            // denominated in eth (via balance(yearn token) * pricePerShare) we will get 1 eth - 1 wei.\r\n            IYearnVault(collateralToken).deposit(amountToWrap, address(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\r\n     * @param weth is the weth address\r\n     * @param asset is the vault asset address\r\n     * @param recipient is the receiving address\r\n     * @param amount is the transfer amount\r\n     */\r\n    function transferAsset(\r\n        address weth,\r\n        address asset,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public {\r\n        if (asset == weth) {\r\n            IWETH(weth).withdraw(amount);\r\n            (bool success, ) = payable(recipient).call{value: amount}(\"\");\r\n            require(success, \"!success\");\r\n            return;\r\n        }\r\n        IERC20(asset).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the decimal shift between 18 decimals and asset tokens\r\n     * @param collateralToken is the address of the collateral token\r\n     */\r\n    function decimalShift(address collateralToken)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            10**(uint256(18).sub(IERC20Detailed(collateralToken).decimals()));\r\n    }\r\n\r\n    function getOTokenPremium(\r\n        address oTokenAddress,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount,\r\n        address collateralAsset,\r\n        bool isYearnPaused\r\n    ) external view returns (uint256) {\r\n        return\r\n            _getOTokenPremium(\r\n                oTokenAddress,\r\n                optionsPremiumPricer,\r\n                premiumDiscount,\r\n                collateralAsset,\r\n                isYearnPaused\r\n            );\r\n    }\r\n\r\n    function _getOTokenPremium(\r\n        address oTokenAddress,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount,\r\n        address collateralAsset,\r\n        bool isYearnPaused\r\n    ) internal view returns (uint256) {\r\n        IOtoken newOToken = IOtoken(oTokenAddress);\r\n        IOptionsPremiumPricer premiumPricer =\r\n            IOptionsPremiumPricer(optionsPremiumPricer);\r\n\r\n        // Apply black-scholes formula (from rvol library) to option given its features\r\n        // and get price for 100 contracts denominated in the underlying asset for call option\r\n        // and USDC for put option\r\n        uint256 optionPremium =\r\n            premiumPricer.getPremium(\r\n                newOToken.strikePrice(),\r\n                newOToken.expiryTimestamp(),\r\n                newOToken.isPut()\r\n            );\r\n\r\n        // Apply a discount to incentivize arbitraguers\r\n        optionPremium = optionPremium.mul(premiumDiscount).div(\r\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\r\n        );\r\n\r\n        // get the black scholes premium of the option and adjust premium based on\r\n        // collateral asset <-> asset exchange rate\r\n        uint256 adjustedPremium =\r\n            isYearnPaused\r\n                ? optionPremium\r\n                : DSMath.wmul(\r\n                    optionPremium,\r\n                    IYearnVault(collateralAsset).pricePerShare().mul(\r\n                        decimalShift(collateralAsset)\r\n                    )\r\n                );\r\n\r\n        require(\r\n            adjustedPremium <= type(uint96).max,\r\n            \"adjustedPremium > type(uint96) max value!\"\r\n        );\r\n\r\n        require(adjustedPremium > 0, \"!adjustedPremium\");\r\n\r\n        return adjustedPremium;\r\n    }\r\n}\r\n"
    },
    "contracts/vaults/RETHVault/RibbonThetaRETHVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {ISwap} from \"../../interfaces/ISwap.sol\";\r\nimport {\r\n    RibbonThetaVaultStorage\r\n} from \"../../storage/RibbonThetaVaultStorage.sol\";\r\nimport {Vault} from \"../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\r\nimport {ILiquidityGauge} from \"../../interfaces/ILiquidityGauge.sol\";\r\nimport {RibbonVault} from \"./base/RibbonVault.sol\";\r\nimport {IVaultPauser} from \"../../interfaces/IVaultPauser.sol\";\r\n\r\n/**\r\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\r\n * the inheritance chain closely.\r\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\r\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\r\n */\r\ncontract RibbonThetaRETHVault is RibbonVault, RibbonThetaVaultStorage {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\r\n    address public immutable OTOKEN_FACTORY;\r\n\r\n    // The minimum duration for an option auction.\r\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event OpenShort(\r\n        address indexed options,\r\n        uint256 depositAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event CloseShort(\r\n        address indexed options,\r\n        uint256 withdrawAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\r\n\r\n    event AuctionDurationSet(\r\n        uint256 auctionDuration,\r\n        uint256 newAuctionDuration\r\n    );\r\n\r\n    event InstantWithdraw(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n\r\n    event NewOffer(\r\n        uint256 swapId,\r\n        address seller,\r\n        address oToken,\r\n        address biddingToken,\r\n        uint256 minPrice,\r\n        uint256 minBidSize,\r\n        uint256 totalSize\r\n    );\r\n\r\n    /************************************************\r\n     *  STRUCTS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initialization parameters for the vault.\r\n     * @param _owner is the owner of the vault with critical permissions\r\n     * @param _feeRecipient is the address to recieve vault performance and management fees\r\n     * @param _managementFee is the management fee pct.\r\n     * @param _performanceFee is the perfomance fee pct.\r\n     * @param _tokenName is the name of the token\r\n     * @param _tokenSymbol is the symbol of the token\r\n     * @param _optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param _strikeSelection is the address of the contract with strike selection logic\r\n     */\r\n    struct InitParams {\r\n        address _owner;\r\n        address _keeper;\r\n        address _feeRecipient;\r\n        uint256 _managementFee;\r\n        uint256 _performanceFee;\r\n        string _tokenName;\r\n        string _tokenSymbol;\r\n        address _optionsPremiumPricer;\r\n        address _strikeSelection;\r\n    }\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _oTokenFactory,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    ) RibbonVault(_weth, _usdc, _gammaController, _marginPool, _swapContract) {\r\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\r\n        OTOKEN_FACTORY = _oTokenFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     * @param _initParams is the struct with vault initialization parameters\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function initialize(\r\n        InitParams calldata _initParams,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external initializer {\r\n        baseInitialize(\r\n            _initParams._owner,\r\n            _initParams._keeper,\r\n            _initParams._feeRecipient,\r\n            _initParams._managementFee,\r\n            _initParams._performanceFee,\r\n            _initParams._tokenName,\r\n            _initParams._tokenSymbol,\r\n            _vaultParams\r\n        );\r\n        require(\r\n            _initParams._optionsPremiumPricer != address(0),\r\n            \"!_optionsPremiumPricer\"\r\n        );\r\n        require(\r\n            _initParams._strikeSelection != address(0),\r\n            \"!_strikeSelection\"\r\n        );\r\n\r\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\r\n        strikeSelection = _initParams._strikeSelection;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new strike selection contract\r\n     * @param newStrikeSelection is the address of the new strike selection contract\r\n     */\r\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\r\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\r\n        strikeSelection = newStrikeSelection;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new options premium pricer contract\r\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\r\n     */\r\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOptionsPremiumPricer != address(0),\r\n            \"!newOptionsPremiumPricer\"\r\n        );\r\n        optionsPremiumPricer = newOptionsPremiumPricer;\r\n    }\r\n\r\n    /**\r\n     * @notice Optionality to set strike price manually\r\n     * Should be called after closeRound if we are setting current week's strike\r\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\r\n     */\r\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\r\n        require(strikePrice > 0, \"!strikePrice\");\r\n        overriddenStrikePrice = strikePrice;\r\n        lastStrikeOverrideRound = vaultState.round;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new liquidityGauge contract for this vault\r\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\r\n     */\r\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\r\n        liquidityGauge = newLiquidityGauge;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets oToken Premium\r\n     * @param minPrice is the new oToken Premium in the units of 10**18\r\n     */\r\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\r\n        require(minPrice > 0, \"!minPrice\");\r\n        currentOtokenPremium = minPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new Vault Pauser contract for this vault\r\n     * @param newVaultPauser is the address of the new vaultPauser contract\r\n     */\r\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\r\n        vaultPauser = newVaultPauser;\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\r\n     * @param amount is the amount to withdraw\r\n     */\r\n    function withdrawInstantly(uint256 amount) external nonReentrant {\r\n        Vault.DepositReceipt storage depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        uint256 currentRound = vaultState.round;\r\n        require(amount > 0, \"!amount\");\r\n        require(depositReceipt.round == currentRound, \"Invalid round\");\r\n\r\n        uint256 receiptAmount = depositReceipt.amount;\r\n        require(receiptAmount >= amount, \"Exceed amount\");\r\n\r\n        // Subtraction underflow checks already ensure it is smaller than uint104\r\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\r\n        vaultState.totalPending = uint128(\r\n            uint256(vaultState.totalPending).sub(amount)\r\n        );\r\n\r\n        emit InstantWithdraw(msg.sender, amount, currentRound);\r\n\r\n        transferAsset(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\r\n        _initiateWithdraw(numShares);\r\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\r\n            numShares\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     */\r\n    function completeWithdraw() external nonReentrant {\r\n        uint256 withdrawAmount = _completeWithdraw();\r\n        lastQueuedWithdrawAmount = uint128(\r\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Stakes a users vault shares\r\n     * @param numShares is the number of shares to stake\r\n     */\r\n    function stake(uint256 numShares) external nonReentrant {\r\n        address _liquidityGauge = liquidityGauge;\r\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\r\n        require(numShares > 0);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        if (heldByAccount < numShares) {\r\n            _redeem(numShares.sub(heldByAccount), false);\r\n        }\r\n        _transfer(msg.sender, address(this), numShares);\r\n        _approve(address(this), _liquidityGauge, numShares);\r\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short and calculate the shares to mint, new price per share &\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * Since we are incrementing the round here, the options are sold in the beginning of a round\r\n     * instead of at the end of the round. For example, at round 1, we don't sell any options. We\r\n     * start selling options at the beginning of round 2.\r\n     */\r\n    function closeRound() external nonReentrant {\r\n        address oldOption = optionState.currentOption;\r\n        require(\r\n            oldOption != address(0) || vaultState.round == 1,\r\n            \"Round closed\"\r\n        );\r\n        _closeShort(oldOption);\r\n\r\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\r\n        (uint256 lockedBalance, uint256 queuedWithdrawAmount) =\r\n            _closeRound(\r\n                uint256(lastQueuedWithdrawAmount),\r\n                currQueuedWithdrawShares\r\n            );\r\n\r\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\r\n\r\n        uint256 newQueuedWithdrawShares =\r\n            uint256(vaultState.queuedWithdrawShares).add(\r\n                currQueuedWithdrawShares\r\n            );\r\n        ShareMath.assertUint128(newQueuedWithdrawShares);\r\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\r\n\r\n        currentQueuedWithdrawShares = 0;\r\n\r\n        ShareMath.assertUint104(lockedBalance);\r\n        vaultState.lockedAmount = uint104(lockedBalance);\r\n\r\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\r\n        require(\r\n            nextOptionReady <= type(uint32).max,\r\n            \"Overflow nextOptionReady\"\r\n        );\r\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short position for the vault.\r\n     */\r\n    function _closeShort(address oldOption) private {\r\n        uint256 lockedAmount = vaultState.lockedAmount;\r\n        if (oldOption != address(0)) {\r\n            vaultState.lastLockedAmount = uint104(lockedAmount);\r\n        }\r\n        vaultState.lockedAmount = 0;\r\n\r\n        optionState.currentOption = address(0);\r\n\r\n        if (oldOption != address(0)) {\r\n            uint256 withdrawAmount =\r\n                VaultLifecycleWithSwap.settleShort(GAMMA_CONTROLLER);\r\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting\r\n     */\r\n    function commitNextOption() external onlyKeeper nonReentrant {\r\n        address currentOption = optionState.currentOption;\r\n        require(\r\n            currentOption == address(0) && vaultState.round != 1,\r\n            \"Round not closed\"\r\n        );\r\n\r\n        VaultLifecycleWithSwap.CommitParams memory commitParams =\r\n            VaultLifecycleWithSwap.CommitParams({\r\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\r\n                USDC: USDC,\r\n                collateralAsset: vaultParams.asset,\r\n                currentOption: currentOption,\r\n                delay: DELAY,\r\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\r\n                overriddenStrikePrice: overriddenStrikePrice,\r\n                strikeSelection: strikeSelection,\r\n                optionsPremiumPricer: optionsPremiumPricer\r\n            });\r\n\r\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\r\n            VaultLifecycleWithSwap.commitNextOption(\r\n                commitParams,\r\n                vaultParams,\r\n                vaultState\r\n            );\r\n\r\n        emit NewOptionStrikeSelected(strikePrice, delta);\r\n\r\n        optionState.nextOption = otokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Rolls the vault's funds into a new short position and create a new offer.\r\n     */\r\n    function rollToNextOption() external onlyKeeper nonReentrant {\r\n        address newOption = optionState.nextOption;\r\n        require(newOption != address(0), \"!nextOption\");\r\n\r\n        optionState.currentOption = newOption;\r\n        optionState.nextOption = address(0);\r\n        uint256 lockedBalance = vaultState.lockedAmount;\r\n\r\n        emit OpenShort(newOption, lockedBalance, msg.sender);\r\n\r\n        VaultLifecycleWithSwap.createShort(\r\n            GAMMA_CONTROLLER,\r\n            MARGIN_POOL,\r\n            newOption,\r\n            lockedBalance\r\n        );\r\n\r\n        _createOffer();\r\n    }\r\n\r\n    function _createOffer() private {\r\n        address currentOtoken = optionState.currentOption;\r\n        uint256 currOtokenPremium = currentOtokenPremium;\r\n\r\n        optionAuctionID = VaultLifecycleWithSwap.createOffer(\r\n            currentOtoken,\r\n            currOtokenPremium,\r\n            SWAP_CONTRACT,\r\n            vaultParams\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Settle current offer\r\n     */\r\n    function settleOffer(ISwap.Bid[] calldata bids)\r\n        external\r\n        onlyKeeper\r\n        nonReentrant\r\n    {\r\n        ISwap(SWAP_CONTRACT).settleOffer(optionAuctionID, bids);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over\r\n     */\r\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\r\n        VaultLifecycleWithSwap.burnOtokens(\r\n            GAMMA_CONTROLLER,\r\n            optionState.currentOption\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice pause a user's vault position\r\n     */\r\n    function pausePosition() external {\r\n        address _vaultPauserAddress = vaultPauser;\r\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\r\n        _redeem(0, true);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\r\n        IVaultPauser(_vaultPauserAddress).pausePosition(\r\n            msg.sender,\r\n            heldByAccount\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/vaults/RETHVault/base/RibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {\r\n    ReentrancyGuardUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {\r\n    ERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\nimport {Vault} from \"../../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\r\nimport {IWETH} from \"../../../interfaces/IWETH.sol\";\r\nimport {IRETH} from \"../../../interfaces/IRETH.sol\";\r\nimport {IRETHDepositPool} from \"../../../interfaces/IRETHDepositPool.sol\";\r\n\r\ncontract RibbonVault is\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable,\r\n    ERC20Upgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  NON UPGRADEABLE STORAGE\r\n     ***********************************************/\r\n\r\n    /// @notice Stores the user's pending deposit for the round\r\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\r\n\r\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\r\n    /// This is used to determine the number of shares to be returned\r\n    /// to a user with their DepositReceipt.depositAmount\r\n    mapping(uint256 => uint256) public roundPricePerShare;\r\n\r\n    /// @notice Stores pending user withdrawals\r\n    mapping(address => Vault.Withdrawal) public withdrawals;\r\n\r\n    /// @notice Vault's parameters like cap, decimals\r\n    Vault.VaultParams public vaultParams;\r\n\r\n    /// @notice Vault's lifecycle state like round and locked amounts\r\n    Vault.VaultState public vaultState;\r\n\r\n    /// @notice Vault's state of the options sold and the timelocked option\r\n    Vault.OptionState public optionState;\r\n\r\n    /// @notice Fee recipient for the performance and management fees\r\n    address public feeRecipient;\r\n\r\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\r\n    // no access to critical vault changes\r\n    address public keeper;\r\n\r\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public performanceFee;\r\n\r\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public managementFee;\r\n\r\n    /// @notice depositETH transactions within 24hr are paused\r\n    /// DEPRECATED - BUT DO NOT REMOVE\r\n    uint256 private _lastrETHMintCutoff;\r\n\r\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\r\n    uint256[30] private ____gap;\r\n\r\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\r\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\r\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\r\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public immutable WETH;\r\n\r\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    address public immutable USDC;\r\n\r\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\r\n    uint256 public constant DELAY = 0;\r\n\r\n    /// @notice 7 day period between each options sale.\r\n    uint256 public constant PERIOD = 7 days;\r\n\r\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\r\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\r\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\r\n\r\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\r\n    // which allows users to perform multiple actions on their vaults\r\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\r\n    address public immutable GAMMA_CONTROLLER;\r\n\r\n    // MARGIN_POOL is Gamma protocol's collateral pool.\r\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\r\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\r\n    address public immutable MARGIN_POOL;\r\n\r\n    // SWAP_CONTRACT is a contract for settling bids via signed messages\r\n    // https://github.com/ribbon-finance/ribbon-v2/blob/master/contracts/utils/Swap.sol\r\n    address public immutable SWAP_CONTRACT;\r\n\r\n    address public immutable RETH_DEPOSIT_POOL = 0x2cac916b2A963Bf162f076C0a8a4a8200BCFBfb4;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event Deposit(address indexed account, uint256 amount, uint256 round);\r\n\r\n    event InitiateWithdraw(\r\n        address indexed account,\r\n        uint256 shares,\r\n        uint256 round\r\n    );\r\n\r\n    event Redeem(address indexed account, uint256 share, uint256 round);\r\n\r\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\r\n\r\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\r\n\r\n    event CapSet(uint256 oldCap, uint256 newCap);\r\n\r\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\r\n\r\n    event CollectVaultFees(\r\n        uint256 performanceFee,\r\n        uint256 vaultFee,\r\n        uint256 round,\r\n        address indexed feeRecipient\r\n    );\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    ) {\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_usdc != address(0), \"!_usdc\");\r\n        require(_swapContract != address(0), \"!_swapContract\");\r\n        require(_gammaController != address(0), \"!_gammaController\");\r\n        require(_marginPool != address(0), \"!_marginPool\");\r\n\r\n        WETH = _weth;\r\n        USDC = _usdc;\r\n        GAMMA_CONTROLLER = _gammaController;\r\n        MARGIN_POOL = _marginPool;\r\n        SWAP_CONTRACT = _swapContract;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     */\r\n    function baseInitialize(\r\n        address _owner,\r\n        address _keeper,\r\n        address _feeRecipient,\r\n        uint256 _managementFee,\r\n        uint256 _performanceFee,\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) internal initializer {\r\n        VaultLifecycleWithSwap.verifyInitializerParams(\r\n            _owner,\r\n            _keeper,\r\n            _feeRecipient,\r\n            _performanceFee,\r\n            _managementFee,\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _vaultParams\r\n        );\r\n\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_tokenName, _tokenSymbol);\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n\r\n        keeper = _keeper;\r\n\r\n        feeRecipient = _feeRecipient;\r\n        performanceFee = _performanceFee;\r\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\r\n            WEEKS_PER_YEAR\r\n        );\r\n        vaultParams = _vaultParams;\r\n\r\n        uint256 assetBalance =\r\n            IERC20(vaultParams.asset).balanceOf(address(this));\r\n        ShareMath.assertUint104(assetBalance);\r\n        vaultState.lastLockedAmount = uint104(assetBalance);\r\n\r\n        vaultState.round = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper, \"!keeper\");\r\n        _;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new keeper\r\n     * @param newKeeper is the address of the new keeper\r\n     */\r\n    function setNewKeeper(address newKeeper) external onlyOwner {\r\n        require(newKeeper != address(0), \"!newKeeper\");\r\n        keeper = newKeeper;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new fee recipient\r\n     * @param newFeeRecipient is the address of the new fee recipient\r\n     */\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\r\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\r\n        feeRecipient = newFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the management fee for the vault\r\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\r\n     */\r\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\r\n        require(\r\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid management fee\"\r\n        );\r\n\r\n        // We are dividing annualized management fee by num weeks in a year\r\n        uint256 tmpManagementFee =\r\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\r\n\r\n        emit ManagementFeeSet(managementFee, newManagementFee);\r\n\r\n        managementFee = tmpManagementFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the performance fee for the vault\r\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\r\n     */\r\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\r\n        require(\r\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid performance fee\"\r\n        );\r\n\r\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\r\n\r\n        performanceFee = newPerformanceFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new cap for deposits\r\n     * @param newCap is the new cap for deposits\r\n     */\r\n    function setCap(uint256 newCap) external onlyOwner {\r\n        require(newCap > 0, \"!newCap\");\r\n        ShareMath.assertUint104(newCap);\r\n        emit CapSet(vaultParams.cap, newCap);\r\n        vaultParams.cap = uint104(newCap);\r\n    }\r\n\r\n    /************************************************\r\n     *  DEPOSIT & WITHDRAWALS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Deposits ETH into the contract and mint vault shares.\r\n     */\r\n    function depositETH() external payable nonReentrant {\r\n        require(msg.value > 0, \"!value\");\r\n\r\n        uint256 rETHAmount = IRETH(vaultParams.asset).getRethValue(msg.value);\r\n\r\n        _depositFor(rETHAmount, msg.sender);\r\n\r\n        // Deposit ETH for rETH\r\n        IRETHDepositPool(RETH_DEPOSIT_POOL).deposit{\r\n            value: msg.value\r\n        }();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender.\r\n     * @param amount is the amount of `asset` to deposit\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"!amount\");\r\n\r\n        _depositFor(amount, msg.sender);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\r\n     * @notice Used for vault -> vault deposits on the user's behalf\r\n     * @param amount is the amount of `asset` to deposit\r\n     * @param creditor is the address that can claim/withdraw deposited amount\r\n     */\r\n    function depositFor(uint256 amount, address creditor)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"!amount\");\r\n        require(creditor != address(0));\r\n\r\n        _depositFor(amount, creditor);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the vault shares to the creditor\r\n     * @param amount is the amount of `asset` deposited\r\n     * @param creditor is the address to receieve the deposit\r\n     */\r\n    function _depositFor(uint256 amount, address creditor) private {\r\n        uint256 currentRound = vaultState.round;\r\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\r\n\r\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\r\n        require(\r\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\r\n            \"Insufficient balance\"\r\n        );\r\n\r\n        emit Deposit(creditor, amount, currentRound);\r\n\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\r\n\r\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        uint256 depositAmount = amount;\r\n\r\n        // If we have a pending deposit in the current round, we add on to the pending deposit\r\n        if (currentRound == depositReceipt.round) {\r\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\r\n            depositAmount = newAmount;\r\n        }\r\n\r\n        ShareMath.assertUint104(depositAmount);\r\n\r\n        depositReceipts[creditor] = Vault.DepositReceipt({\r\n            round: uint16(currentRound),\r\n            amount: uint104(depositAmount),\r\n            unredeemedShares: uint128(unredeemedShares)\r\n        });\r\n\r\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\r\n        ShareMath.assertUint128(newTotalPending);\r\n\r\n        vaultState.totalPending = uint128(newTotalPending);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function _initiateWithdraw(uint256 numShares) internal {\r\n        require(numShares > 0, \"!numShares\");\r\n\r\n        // We do a max redeem before initiating a withdrawal\r\n        // But we check if they must first have unredeemed shares\r\n        if (\r\n            depositReceipts[msg.sender].amount > 0 ||\r\n            depositReceipts[msg.sender].unredeemedShares > 0\r\n        ) {\r\n            _redeem(0, true);\r\n        }\r\n\r\n        // This caches the `round` variable used in shareBalances\r\n        uint256 currentRound = vaultState.round;\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\r\n\r\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\r\n\r\n        uint256 existingShares = uint256(withdrawal.shares);\r\n\r\n        uint256 withdrawalShares;\r\n        if (withdrawalIsSameRound) {\r\n            withdrawalShares = existingShares.add(numShares);\r\n        } else {\r\n            require(existingShares == 0, \"Existing withdraw\");\r\n            withdrawalShares = numShares;\r\n            withdrawals[msg.sender].round = uint16(currentRound);\r\n        }\r\n\r\n        ShareMath.assertUint128(withdrawalShares);\r\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\r\n\r\n        _transfer(msg.sender, address(this), numShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     * @return withdrawAmount the current withdrawal amount\r\n     */\r\n    function _completeWithdraw() internal returns (uint256) {\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        uint256 withdrawalShares = withdrawal.shares;\r\n        uint256 withdrawalRound = withdrawal.round;\r\n\r\n        // This checks if there is a withdrawal\r\n        require(withdrawalShares > 0, \"Not initiated\");\r\n\r\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\r\n\r\n        // We leave the round number as non-zero to save on gas for subsequent writes\r\n        withdrawals[msg.sender].shares = 0;\r\n        vaultState.queuedWithdrawShares = uint128(\r\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\r\n        );\r\n\r\n        uint256 withdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                withdrawalShares,\r\n                roundPricePerShare[withdrawalRound],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\r\n\r\n        _burn(address(this), withdrawalShares);\r\n\r\n        require(withdrawAmount > 0, \"!withdrawAmount\");\r\n        transferAsset(msg.sender, withdrawAmount);\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem\r\n     */\r\n    function redeem(uint256 numShares) external nonReentrant {\r\n        require(numShares > 0, \"!numShares\");\r\n        _redeem(numShares, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\r\n     */\r\n    function maxRedeem() external nonReentrant {\r\n        _redeem(0, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\r\n     * @param isMax is flag for when callers do a max redemption\r\n     */\r\n    function _redeem(uint256 numShares, bool isMax) internal {\r\n        Vault.DepositReceipt memory depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        // This handles the null case when depositReceipt.round = 0\r\n        // Because we start with round = 1 at `initialize`\r\n        uint256 currentRound = vaultState.round;\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        numShares = isMax ? unredeemedShares : numShares;\r\n        if (numShares == 0) {\r\n            return;\r\n        }\r\n        require(numShares <= unredeemedShares, \"Exceeds available\");\r\n\r\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\r\n        // we debit from the unredeemedShares, but leave the amount field intact\r\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\r\n        if (depositReceipt.round < currentRound) {\r\n            depositReceipts[msg.sender].amount = 0;\r\n        }\r\n\r\n        ShareMath.assertUint128(numShares);\r\n        depositReceipts[msg.sender].unredeemedShares = uint128(\r\n            unredeemedShares.sub(numShares)\r\n        );\r\n\r\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\r\n\r\n        _transfer(address(this), msg.sender, numShares);\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\r\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\r\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\r\n     * @param numRounds is the number of rounds to initialize in the map\r\n     */\r\n    function initRounds(uint256 numRounds) external nonReentrant {\r\n        require(numRounds > 0, \"!numRounds\");\r\n\r\n        uint256 _round = vaultState.round;\r\n        for (uint256 i = 0; i < numRounds; i++) {\r\n            uint256 index = _round + i;\r\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\r\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function that performs most administrative tasks\r\n     * such as setting next option, minting new shares, getting vault fees, etc.\r\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\r\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\r\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\r\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\r\n     */\r\n    function _closeRound(\r\n        uint256 lastQueuedWithdrawAmount,\r\n        uint256 currentQueuedWithdrawShares\r\n    ) internal returns (uint256 lockedBalance, uint256 queuedWithdrawAmount) {\r\n        address recipient = feeRecipient;\r\n        uint256 mintShares;\r\n        uint256 performanceFeeInAsset;\r\n        uint256 totalVaultFee;\r\n        {\r\n            uint256 newPricePerShare;\r\n            (\r\n                lockedBalance,\r\n                queuedWithdrawAmount,\r\n                newPricePerShare,\r\n                mintShares,\r\n                performanceFeeInAsset,\r\n                totalVaultFee\r\n            ) = VaultLifecycleWithSwap.closeRound(\r\n                vaultState,\r\n                VaultLifecycleWithSwap.CloseParams(\r\n                    vaultParams.decimals,\r\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\r\n                    totalSupply(),\r\n                    lastQueuedWithdrawAmount,\r\n                    performanceFee,\r\n                    managementFee,\r\n                    currentQueuedWithdrawShares\r\n                )\r\n            );\r\n\r\n            // Finalize the pricePerShare at the end of the round\r\n            uint256 currentRound = vaultState.round;\r\n            roundPricePerShare[currentRound] = newPricePerShare;\r\n\r\n            emit CollectVaultFees(\r\n                performanceFeeInAsset,\r\n                totalVaultFee,\r\n                currentRound,\r\n                recipient\r\n            );\r\n\r\n            vaultState.totalPending = 0;\r\n            vaultState.round = uint16(currentRound + 1);\r\n        }\r\n\r\n        _mint(address(this), mintShares);\r\n\r\n        if (totalVaultFee > 0) {\r\n            transferAsset(payable(recipient), totalVaultFee);\r\n        }\r\n\r\n        return (lockedBalance, queuedWithdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\r\n     * @param recipient is the receiving address\r\n     * @param amount is the transfer amount\r\n     */\r\n    function transferAsset(address recipient, uint256 amount) internal {\r\n        address asset = vaultParams.asset;\r\n        if (asset == WETH) {\r\n            IWETH(WETH).withdraw(amount);\r\n            (bool success, ) = recipient.call{value: amount}(\"\");\r\n            require(success, \"Transfer failed\");\r\n            return;\r\n        }\r\n        IERC20(asset).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Returns the asset balance held on the vault for the account\r\n     * @param account is the address to lookup balance for\r\n     * @return the amount of `asset` custodied by the vault for the user\r\n     */\r\n    function accountVaultBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _decimals = vaultParams.decimals;\r\n        uint256 assetPerShare =\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                _decimals\r\n            );\r\n        return\r\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance including unredeemed shares\r\n     * @param account is the account to lookup share balance for\r\n     * @return the share balance\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\r\n        return heldByAccount.add(heldByVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance split between account and vault holdings\r\n     * @param account is the account to lookup share balance for\r\n     * @return heldByAccount is the shares held by account\r\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\r\n     */\r\n    function shareBalances(address account)\r\n        public\r\n        view\r\n        returns (uint256 heldByAccount, uint256 heldByVault)\r\n    {\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\r\n\r\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\r\n            return (balanceOf(account), 0);\r\n        }\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                vaultState.round,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        return (balanceOf(account), unredeemedShares);\r\n    }\r\n\r\n    /**\r\n     * @notice The price of a unit of share denominated in the `asset`\r\n     */\r\n    function pricePerShare() external view returns (uint256) {\r\n        return\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                vaultParams.decimals\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\r\n     * @return total balance of the vault, including the amounts locked in third party protocols\r\n     */\r\n    function totalBalance() public view returns (uint256) {\r\n        // After calling closeRound, current option is set to none\r\n        // We also commit the lockedAmount but do not deposit into Opyn\r\n        // which results in double counting of asset balance and lockedAmount\r\n\r\n        return\r\n            optionState.currentOption != address(0)\r\n                ? uint256(vaultState.lockedAmount).add(\r\n                    IERC20(vaultParams.asset).balanceOf(address(this))\r\n                )\r\n                : IERC20(vaultParams.asset).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token decimals\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return vaultParams.decimals;\r\n    }\r\n\r\n    function cap() external view returns (uint256) {\r\n        return vaultParams.cap;\r\n    }\r\n\r\n    function nextOptionReadyAt() external view returns (uint256) {\r\n        return optionState.nextOptionReadyAt;\r\n    }\r\n\r\n    function currentOption() external view returns (address) {\r\n        return optionState.currentOption;\r\n    }\r\n\r\n    function nextOption() external view returns (address) {\r\n        return optionState.nextOption;\r\n    }\r\n\r\n    function totalPending() external view returns (uint256) {\r\n        return vaultState.totalPending;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IRETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IRETH is IERC20 {\r\n    function getExchangeRate() external view returns (uint256);\r\n\r\n    function getETHValue(uint256 rethAmount) external view returns (uint256);\r\n\r\n    function getRethValue(uint256 ethAmount) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IRETHDepositPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IRETHDepositPool {\r\n    function deposit() external payable;\r\n}\r\n"
    },
    "contracts/vendor/CustomSafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n      require(_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)),\r\n          \"ERC20 transfer failed\");\r\n  }\r\n\r\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n      require(_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)),\r\n          \"ERC20 transferFrom failed\");\r\n  }\r\n\r\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n    if (_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value))) {\r\n        return;\r\n    }\r\n    require(_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0))\r\n        && _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)),\r\n        \"ERC20 approve failed\");\r\n  }\r\n\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private returns (bool) {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      (bool success, bytes memory returndata) = address(token).call(data);\r\n      if (!success) {\r\n          return false;\r\n      }\r\n\r\n      if (returndata.length >= 32) { // Return data is optional\r\n          return abi.decode(returndata, (bool));\r\n      }\r\n\r\n      // In a wierd case when return data is 1-31 bytes long - return false.\r\n      return returndata.length == 0;\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/tests/MockOtoken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockOtoken is ERC20 {\r\n    address public underlyingAsset;\r\n    bool public isPut;\r\n\r\n    constructor(address _underlyingAsset, bool _isPut)\r\n        ERC20(\"Otoken\", \"Otoken\")\r\n    {\r\n        underlyingAsset = _underlyingAsset;\r\n        isPut = _isPut;\r\n    }\r\n\r\n    function mint(uint256 amount) public {\r\n        ERC20._mint(msg.sender, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/PercentStrikeSelection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {\r\n    IPriceOracle\r\n} from \"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\";\r\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\r\nimport {\r\n    IManualVolatilityOracle\r\n} from \"@ribbon-finance/rvol/contracts/interfaces/IManualVolatilityOracle.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\ncontract PercentStrikeSelection is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Immutables\r\n     */\r\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\r\n\r\n    // step in absolute terms at which we will increment\r\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\r\n    uint256 public step;\r\n\r\n    // multiplier for strike selection\r\n    uint256 public strikeMultiplier;\r\n\r\n    // multiplier to shift asset prices\r\n    uint256 private immutable assetOracleMultiplier;\r\n\r\n    // Delta are in 4 decimal places. 1 * 10**4 = 1 delta.\r\n    uint256 private constant DELTA_MULTIPLIER = 10**4;\r\n\r\n    // ChainLink's USD Price oracles return results in 8 decimal places\r\n    uint256 private constant ORACLE_PRICE_MULTIPLIER = 10**8;\r\n\r\n    // Strike multiplier has 2 decimal places. For example: 150 = 1.5x spot price\r\n    uint256 private constant STRIKE_MULTIPLIER = 10**2;\r\n\r\n    event StepSet(uint256 oldStep, uint256 newStep, address indexed owner);\r\n\r\n    constructor(\r\n        address _optionsPremiumPricer,\r\n        uint256 _strikeMultiplier,\r\n        uint256 _step\r\n    ) {\r\n        require(_optionsPremiumPricer != address(0), \"!_optionsPremiumPricer\");\r\n        require(\r\n            _strikeMultiplier > STRIKE_MULTIPLIER,\r\n            \"Multiplier must be bigger than 1!\"\r\n        );\r\n        require(_step > 0, \"!_step\");\r\n\r\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\r\n\r\n        // ex: delta = 7500 (.75)\r\n        uint256 _assetOracleMultiplier =\r\n            10 **\r\n                IPriceOracle(\r\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\r\n                )\r\n                    .decimals();\r\n\r\n        step = _step;\r\n\r\n        strikeMultiplier = _strikeMultiplier;\r\n\r\n        assetOracleMultiplier = _assetOracleMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the strike price by multiplying the current underlying price\r\n     * with a multiplier\r\n     * @param expiryTimestamp is the unix timestamp of expiration\r\n     * @param isPut is whether option is put or call\r\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\r\n     * @return newDelta will be set to zero for percent strike selection\r\n     */\r\n\r\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\r\n        external\r\n        view\r\n        returns (uint256 newStrikePrice, uint256 newDelta)\r\n    {\r\n        require(\r\n            expiryTimestamp > block.timestamp,\r\n            \"Expiry must be in the future!\"\r\n        );\r\n\r\n        // asset price\r\n        uint256 strikePrice =\r\n            optionsPremiumPricer.getUnderlyingPrice().mul(strikeMultiplier).div(\r\n                STRIKE_MULTIPLIER\r\n            );\r\n\r\n        newStrikePrice = isPut\r\n            ? strikePrice.sub(strikePrice % step)\r\n            : strikePrice.add(step.sub(strikePrice % step));\r\n\r\n        newDelta = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the multiplier for setting the strike price\r\n     * @param newStrikeMultiplier is the strike multiplier (decimals = 2)\r\n     */\r\n    function setStrikeMultiplier(uint256 newStrikeMultiplier)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newStrikeMultiplier > STRIKE_MULTIPLIER,\r\n            \"Multiplier must be bigger than 1!\"\r\n        );\r\n        strikeMultiplier = newStrikeMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets new step value\r\n     * @param newStep is the new step value\r\n     */\r\n    function setStep(uint256 newStep) external onlyOwner {\r\n        require(newStep > 0, \"!newStep\");\r\n        uint256 oldStep = step;\r\n        step = newStep;\r\n        emit StepSet(oldStep, newStep, msg.sender);\r\n    }\r\n}\r\n"
    },
    "@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity >0.6.0 <0.8.7;\n\ninterface IPriceOracle {\n    function decimals() external view returns (uint256 _decimals);\n\n    function latestAnswer() external view returns (uint256 price);\n}\n"
    },
    "@ribbon-finance/rvol/contracts/interfaces/IManualVolatilityOracle.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity >0.6.0 <0.8.7;\n\ninterface IManualVolatilityOracle {\n    function vol(bytes32 optionId)\n        external\n        view\n        returns (uint256 standardDeviation);\n\n    function annualizedVol(bytes32 optionId)\n        external\n        view\n        returns (uint256 annualStdev);\n\n    function setAnnualizedVol(\n        bytes32[] calldata optionIds,\n        uint256[] calldata newAnnualizedVols\n    ) external;\n}\n"
    },
    "contracts/vaults/BaseVaultWithSwap/RibbonThetaVaultWithSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {ISwap} from \"../../interfaces/ISwap.sol\";\r\nimport {\r\n    RibbonThetaVaultStorage\r\n} from \"../../storage/RibbonThetaVaultStorage.sol\";\r\nimport {Vault} from \"../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\r\nimport {ILiquidityGauge} from \"../../interfaces/ILiquidityGauge.sol\";\r\nimport {RibbonVault} from \"./base/RibbonVault.sol\";\r\nimport {IVaultPauser} from \"../../interfaces/IVaultPauser.sol\";\r\n\r\n/**\r\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\r\n * the inheritance chain closely.\r\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\r\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\r\n */\r\ncontract RibbonThetaVaultWithSwap is RibbonVault, RibbonThetaVaultStorage {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\r\n    address public immutable OTOKEN_FACTORY;\r\n\r\n    // The minimum duration for an option auction.\r\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event OpenShort(\r\n        address indexed options,\r\n        uint256 depositAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event CloseShort(\r\n        address indexed options,\r\n        uint256 withdrawAmount,\r\n        address indexed manager\r\n    );\r\n\r\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\r\n\r\n    event AuctionDurationSet(\r\n        uint256 auctionDuration,\r\n        uint256 newAuctionDuration\r\n    );\r\n\r\n    event InstantWithdraw(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 round\r\n    );\r\n\r\n    event NewOffer(\r\n        uint256 swapId,\r\n        address seller,\r\n        address oToken,\r\n        address biddingToken,\r\n        uint256 minPrice,\r\n        uint256 minBidSize,\r\n        uint256 totalSize\r\n    );\r\n\r\n    /************************************************\r\n     *  STRUCTS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initialization parameters for the vault.\r\n     * @param _owner is the owner of the vault with critical permissions\r\n     * @param _feeRecipient is the address to recieve vault performance and management fees\r\n     * @param _managementFee is the management fee pct.\r\n     * @param _performanceFee is the perfomance fee pct.\r\n     * @param _tokenName is the name of the token\r\n     * @param _tokenSymbol is the symbol of the token\r\n     * @param _optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param _strikeSelection is the address of the contract with strike selection logic\r\n     */\r\n    struct InitParams {\r\n        address _owner;\r\n        address _keeper;\r\n        address _feeRecipient;\r\n        uint256 _managementFee;\r\n        uint256 _performanceFee;\r\n        string _tokenName;\r\n        string _tokenSymbol;\r\n        address _optionsPremiumPricer;\r\n        address _strikeSelection;\r\n    }\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _oTokenFactory,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    ) RibbonVault(_weth, _usdc, _gammaController, _marginPool, _swapContract) {\r\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\r\n        OTOKEN_FACTORY = _oTokenFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     * @param _initParams is the struct with vault initialization parameters\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function initialize(\r\n        InitParams calldata _initParams,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) external initializer {\r\n        baseInitialize(\r\n            _initParams._owner,\r\n            _initParams._keeper,\r\n            _initParams._feeRecipient,\r\n            _initParams._managementFee,\r\n            _initParams._performanceFee,\r\n            _initParams._tokenName,\r\n            _initParams._tokenSymbol,\r\n            _vaultParams\r\n        );\r\n        require(\r\n            _initParams._optionsPremiumPricer != address(0),\r\n            \"!_optionsPremiumPricer\"\r\n        );\r\n        require(\r\n            _initParams._strikeSelection != address(0),\r\n            \"!_strikeSelection\"\r\n        );\r\n\r\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\r\n        strikeSelection = _initParams._strikeSelection;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new strike selection contract\r\n     * @param newStrikeSelection is the address of the new strike selection contract\r\n     */\r\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\r\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\r\n        strikeSelection = newStrikeSelection;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new options premium pricer contract\r\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\r\n     */\r\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOptionsPremiumPricer != address(0),\r\n            \"!newOptionsPremiumPricer\"\r\n        );\r\n        optionsPremiumPricer = newOptionsPremiumPricer;\r\n    }\r\n\r\n    /**\r\n     * @notice Optionality to set strike price manually\r\n     * Should be called after closeRound if we are setting current week's strike\r\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\r\n     */\r\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\r\n        require(strikePrice > 0, \"!strikePrice\");\r\n        overriddenStrikePrice = strikePrice;\r\n        lastStrikeOverrideRound = vaultState.round;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new liquidityGauge contract for this vault\r\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\r\n     */\r\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\r\n        liquidityGauge = newLiquidityGauge;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets oToken Premium\r\n     * @param minPrice is the new oToken Premium in the units of 10**18\r\n     */\r\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\r\n        require(minPrice > 0, \"!minPrice\");\r\n        currentOtokenPremium = minPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new Vault Pauser contract for this vault\r\n     * @param newVaultPauser is the address of the new vaultPauser contract\r\n     */\r\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\r\n        vaultPauser = newVaultPauser;\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\r\n     * @param amount is the amount to withdraw\r\n     */\r\n    function withdrawInstantly(uint256 amount) external nonReentrant {\r\n        Vault.DepositReceipt storage depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        uint256 currentRound = vaultState.round;\r\n        require(amount > 0, \"!amount\");\r\n        require(depositReceipt.round == currentRound, \"Invalid round\");\r\n\r\n        uint256 receiptAmount = depositReceipt.amount;\r\n        require(receiptAmount >= amount, \"Exceed amount\");\r\n\r\n        // Subtraction underflow checks already ensure it is smaller than uint104\r\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\r\n        vaultState.totalPending = uint128(\r\n            uint256(vaultState.totalPending).sub(amount)\r\n        );\r\n\r\n        emit InstantWithdraw(msg.sender, amount, currentRound);\r\n\r\n        transferAsset(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\r\n        _initiateWithdraw(numShares);\r\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\r\n            numShares\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     */\r\n    function completeWithdraw() external nonReentrant {\r\n        uint256 withdrawAmount = _completeWithdraw();\r\n        lastQueuedWithdrawAmount = uint128(\r\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Stakes a users vault shares\r\n     * @param numShares is the number of shares to stake\r\n     */\r\n    function stake(uint256 numShares) external nonReentrant {\r\n        address _liquidityGauge = liquidityGauge;\r\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\r\n        require(numShares > 0);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        if (heldByAccount < numShares) {\r\n            _redeem(numShares.sub(heldByAccount), false);\r\n        }\r\n        _transfer(msg.sender, address(this), numShares);\r\n        _approve(address(this), _liquidityGauge, numShares);\r\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short and calculate the shares to mint, new price per share &\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * Since we are incrementing the round here, the options are sold in the beginning of a round\r\n     * instead of at the end of the round. For example, at round 1, we don't sell any options. We\r\n     * start selling options at the beginning of round 2.\r\n     */\r\n    function closeRound() external nonReentrant {\r\n        address oldOption = optionState.currentOption;\r\n        require(\r\n            oldOption != address(0) || vaultState.round == 1,\r\n            \"Round closed\"\r\n        );\r\n        _closeShort(oldOption);\r\n\r\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\r\n        (uint256 lockedBalance, uint256 queuedWithdrawAmount) =\r\n            _closeRound(\r\n                uint256(lastQueuedWithdrawAmount),\r\n                currQueuedWithdrawShares\r\n            );\r\n\r\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\r\n\r\n        uint256 newQueuedWithdrawShares =\r\n            uint256(vaultState.queuedWithdrawShares).add(\r\n                currQueuedWithdrawShares\r\n            );\r\n        ShareMath.assertUint128(newQueuedWithdrawShares);\r\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\r\n\r\n        currentQueuedWithdrawShares = 0;\r\n\r\n        ShareMath.assertUint104(lockedBalance);\r\n        vaultState.lockedAmount = uint104(lockedBalance);\r\n\r\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\r\n        require(\r\n            nextOptionReady <= type(uint32).max,\r\n            \"Overflow nextOptionReady\"\r\n        );\r\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\r\n    }\r\n\r\n    /**\r\n     * @notice Closes the existing short position for the vault.\r\n     */\r\n    function _closeShort(address oldOption) private {\r\n        uint256 lockedAmount = vaultState.lockedAmount;\r\n        if (oldOption != address(0)) {\r\n            vaultState.lastLockedAmount = uint104(lockedAmount);\r\n        }\r\n        vaultState.lockedAmount = 0;\r\n\r\n        optionState.currentOption = address(0);\r\n\r\n        if (oldOption != address(0)) {\r\n            uint256 withdrawAmount =\r\n                VaultLifecycleWithSwap.settleShort(GAMMA_CONTROLLER);\r\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting\r\n     */\r\n    function commitNextOption() external onlyKeeper nonReentrant {\r\n        address currentOption = optionState.currentOption;\r\n        require(\r\n            currentOption == address(0) && vaultState.round != 1,\r\n            \"Round not closed\"\r\n        );\r\n\r\n        VaultLifecycleWithSwap.CommitParams memory commitParams =\r\n            VaultLifecycleWithSwap.CommitParams({\r\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\r\n                USDC: USDC,\r\n                collateralAsset: vaultParams.asset,\r\n                currentOption: currentOption,\r\n                delay: DELAY,\r\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\r\n                overriddenStrikePrice: overriddenStrikePrice,\r\n                strikeSelection: strikeSelection,\r\n                optionsPremiumPricer: optionsPremiumPricer\r\n            });\r\n\r\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\r\n            VaultLifecycleWithSwap.commitNextOption(\r\n                commitParams,\r\n                vaultParams,\r\n                vaultState\r\n            );\r\n\r\n        emit NewOptionStrikeSelected(strikePrice, delta);\r\n\r\n        optionState.nextOption = otokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Rolls the vault's funds into a new short position and create a new offer.\r\n     */\r\n    function rollToNextOption() external onlyKeeper nonReentrant {\r\n        address newOption = optionState.nextOption;\r\n        require(newOption != address(0), \"!nextOption\");\r\n\r\n        optionState.currentOption = newOption;\r\n        optionState.nextOption = address(0);\r\n        uint256 lockedBalance = vaultState.lockedAmount;\r\n\r\n        emit OpenShort(newOption, lockedBalance, msg.sender);\r\n\r\n        VaultLifecycleWithSwap.createShort(\r\n            GAMMA_CONTROLLER,\r\n            MARGIN_POOL,\r\n            newOption,\r\n            lockedBalance\r\n        );\r\n\r\n        _createOffer();\r\n    }\r\n\r\n    function _createOffer() private {\r\n        address currentOtoken = optionState.currentOption;\r\n        uint256 currOtokenPremium = currentOtokenPremium;\r\n\r\n        optionAuctionID = VaultLifecycleWithSwap.createOffer(\r\n            currentOtoken,\r\n            currOtokenPremium,\r\n            SWAP_CONTRACT,\r\n            vaultParams\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Settle current offer\r\n     */\r\n    function settleOffer(ISwap.Bid[] calldata bids)\r\n        external\r\n        onlyKeeper\r\n        nonReentrant\r\n    {\r\n        ISwap(SWAP_CONTRACT).settleOffer(optionAuctionID, bids);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over\r\n     */\r\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\r\n        VaultLifecycleWithSwap.burnOtokens(\r\n            GAMMA_CONTROLLER,\r\n            optionState.currentOption\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice pause a user's vault position\r\n     */\r\n    function pausePosition() external {\r\n        address _vaultPauserAddress = vaultPauser;\r\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\r\n        _redeem(0, true);\r\n        uint256 heldByAccount = balanceOf(msg.sender);\r\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\r\n        IVaultPauser(_vaultPauserAddress).pausePosition(\r\n            msg.sender,\r\n            heldByAccount\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/vaults/BaseVaultWithSwap/base/RibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {\r\n    ReentrancyGuardUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {\r\n    OwnableUpgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {\r\n    ERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\nimport {Vault} from \"../../../libraries/Vault.sol\";\r\nimport {\r\n    VaultLifecycleWithSwap\r\n} from \"../../../libraries/VaultLifecycleWithSwap.sol\";\r\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\r\nimport {IWETH} from \"../../../interfaces/IWETH.sol\";\r\n\r\ncontract RibbonVault is\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable,\r\n    ERC20Upgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using ShareMath for Vault.DepositReceipt;\r\n\r\n    /************************************************\r\n     *  NON UPGRADEABLE STORAGE\r\n     ***********************************************/\r\n\r\n    /// @notice Stores the user's pending deposit for the round\r\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\r\n\r\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\r\n    /// This is used to determine the number of shares to be returned\r\n    /// to a user with their DepositReceipt.depositAmount\r\n    mapping(uint256 => uint256) public roundPricePerShare;\r\n\r\n    /// @notice Stores pending user withdrawals\r\n    mapping(address => Vault.Withdrawal) public withdrawals;\r\n\r\n    /// @notice Vault's parameters like cap, decimals\r\n    Vault.VaultParams public vaultParams;\r\n\r\n    /// @notice Vault's lifecycle state like round and locked amounts\r\n    Vault.VaultState public vaultState;\r\n\r\n    /// @notice Vault's state of the options sold and the timelocked option\r\n    Vault.OptionState public optionState;\r\n\r\n    /// @notice Fee recipient for the performance and management fees\r\n    address public feeRecipient;\r\n\r\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\r\n    // no access to critical vault changes\r\n    address public keeper;\r\n\r\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public performanceFee;\r\n\r\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\r\n    uint256 public managementFee;\r\n\r\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\r\n    uint256[30] private ____gap;\r\n\r\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\r\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\r\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\r\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\r\n\r\n    /************************************************\r\n     *  IMMUTABLES & CONSTANTS\r\n     ***********************************************/\r\n\r\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    address public immutable WETH;\r\n\r\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    address public immutable USDC;\r\n\r\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\r\n    uint256 public constant DELAY = 0;\r\n\r\n    /// @notice 7 day period between each options sale.\r\n    uint256 public constant PERIOD = 7 days;\r\n\r\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\r\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\r\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\r\n\r\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\r\n    // which allows users to perform multiple actions on their vaults\r\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\r\n    address public immutable GAMMA_CONTROLLER;\r\n\r\n    // MARGIN_POOL is Gamma protocol's collateral pool.\r\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\r\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\r\n    address public immutable MARGIN_POOL;\r\n\r\n    // SWAP_CONTRACT is a contract for settling bids via signed messages\r\n    // https://github.com/ribbon-finance/ribbon-v2/blob/master/contracts/utils/Swap.sol\r\n    address public immutable SWAP_CONTRACT;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    event Deposit(address indexed account, uint256 amount, uint256 round);\r\n\r\n    event InitiateWithdraw(\r\n        address indexed account,\r\n        uint256 shares,\r\n        uint256 round\r\n    );\r\n\r\n    event Redeem(address indexed account, uint256 share, uint256 round);\r\n\r\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\r\n\r\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\r\n\r\n    event CapSet(uint256 oldCap, uint256 newCap);\r\n\r\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\r\n\r\n    event CollectVaultFees(\r\n        uint256 performanceFee,\r\n        uint256 vaultFee,\r\n        uint256 round,\r\n        address indexed feeRecipient\r\n    );\r\n\r\n    /************************************************\r\n     *  CONSTRUCTOR & INITIALIZATION\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Initializes the contract with immutable variables\r\n     * @param _weth is the Wrapped Ether contract\r\n     * @param _usdc is the USDC contract\r\n     * @param _gammaController is the contract address for opyn actions\r\n     * @param _marginPool is the contract address for providing collateral to opyn\r\n     * @param _swapContract is the contract address that facilitates bids settlement\r\n     */\r\n    constructor(\r\n        address _weth,\r\n        address _usdc,\r\n        address _gammaController,\r\n        address _marginPool,\r\n        address _swapContract\r\n    ) {\r\n        require(_weth != address(0), \"!_weth\");\r\n        require(_usdc != address(0), \"!_usdc\");\r\n        require(_swapContract != address(0), \"!_swapContract\");\r\n        require(_gammaController != address(0), \"!_gammaController\");\r\n        require(_marginPool != address(0), \"!_marginPool\");\r\n\r\n        WETH = _weth;\r\n        USDC = _usdc;\r\n        GAMMA_CONTROLLER = _gammaController;\r\n        MARGIN_POOL = _marginPool;\r\n        SWAP_CONTRACT = _swapContract;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the OptionVault contract with storage variables.\r\n     */\r\n    function baseInitialize(\r\n        address _owner,\r\n        address _keeper,\r\n        address _feeRecipient,\r\n        uint256 _managementFee,\r\n        uint256 _performanceFee,\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        Vault.VaultParams calldata _vaultParams\r\n    ) internal initializer {\r\n        VaultLifecycleWithSwap.verifyInitializerParams(\r\n            _owner,\r\n            _keeper,\r\n            _feeRecipient,\r\n            _performanceFee,\r\n            _managementFee,\r\n            _tokenName,\r\n            _tokenSymbol,\r\n            _vaultParams\r\n        );\r\n\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_tokenName, _tokenSymbol);\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n\r\n        keeper = _keeper;\r\n\r\n        feeRecipient = _feeRecipient;\r\n        performanceFee = _performanceFee;\r\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\r\n            WEEKS_PER_YEAR\r\n        );\r\n        vaultParams = _vaultParams;\r\n\r\n        uint256 assetBalance =\r\n            IERC20(vaultParams.asset).balanceOf(address(this));\r\n        ShareMath.assertUint104(assetBalance);\r\n        vaultState.lastLockedAmount = uint104(assetBalance);\r\n\r\n        vaultState.round = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the keeper.\r\n     */\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper, \"!keeper\");\r\n        _;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Sets the new keeper\r\n     * @param newKeeper is the address of the new keeper\r\n     */\r\n    function setNewKeeper(address newKeeper) external onlyOwner {\r\n        require(newKeeper != address(0), \"!newKeeper\");\r\n        keeper = newKeeper;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new fee recipient\r\n     * @param newFeeRecipient is the address of the new fee recipient\r\n     */\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\r\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\r\n        feeRecipient = newFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the management fee for the vault\r\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\r\n     */\r\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\r\n        require(\r\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid management fee\"\r\n        );\r\n\r\n        // We are dividing annualized management fee by num weeks in a year\r\n        uint256 tmpManagementFee =\r\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\r\n\r\n        emit ManagementFeeSet(managementFee, newManagementFee);\r\n\r\n        managementFee = tmpManagementFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the performance fee for the vault\r\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\r\n     */\r\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\r\n        require(\r\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"Invalid performance fee\"\r\n        );\r\n\r\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\r\n\r\n        performanceFee = newPerformanceFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new cap for deposits\r\n     * @param newCap is the new cap for deposits\r\n     */\r\n    function setCap(uint256 newCap) external onlyOwner {\r\n        require(newCap > 0, \"!newCap\");\r\n        ShareMath.assertUint104(newCap);\r\n        emit CapSet(vaultParams.cap, newCap);\r\n        vaultParams.cap = uint104(newCap);\r\n    }\r\n\r\n    /************************************************\r\n     *  DEPOSIT & WITHDRAWALS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\r\n     */\r\n    function depositETH() external payable nonReentrant {\r\n        require(vaultParams.asset == WETH, \"!WETH\");\r\n        require(msg.value > 0, \"!value\");\r\n\r\n        _depositFor(msg.value, msg.sender);\r\n\r\n        IWETH(WETH).deposit{value: msg.value}();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender.\r\n     * @param amount is the amount of `asset` to deposit\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"!amount\");\r\n\r\n        _depositFor(amount, msg.sender);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\r\n     * @notice Used for vault -> vault deposits on the user's behalf\r\n     * @param amount is the amount of `asset` to deposit\r\n     * @param creditor is the address that can claim/withdraw deposited amount\r\n     */\r\n    function depositFor(uint256 amount, address creditor)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"!amount\");\r\n        require(creditor != address(0));\r\n\r\n        _depositFor(amount, creditor);\r\n\r\n        // An approve() by the msg.sender is required beforehand\r\n        IERC20(vaultParams.asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mints the vault shares to the creditor\r\n     * @param amount is the amount of `asset` deposited\r\n     * @param creditor is the address to receieve the deposit\r\n     */\r\n    function _depositFor(uint256 amount, address creditor) private {\r\n        uint256 currentRound = vaultState.round;\r\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\r\n\r\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\r\n        require(\r\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\r\n            \"Insufficient balance\"\r\n        );\r\n\r\n        emit Deposit(creditor, amount, currentRound);\r\n\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\r\n\r\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        uint256 depositAmount = amount;\r\n\r\n        // If we have a pending deposit in the current round, we add on to the pending deposit\r\n        if (currentRound == depositReceipt.round) {\r\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\r\n            depositAmount = newAmount;\r\n        }\r\n\r\n        ShareMath.assertUint104(depositAmount);\r\n\r\n        depositReceipts[creditor] = Vault.DepositReceipt({\r\n            round: uint16(currentRound),\r\n            amount: uint104(depositAmount),\r\n            unredeemedShares: uint128(unredeemedShares)\r\n        });\r\n\r\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\r\n        ShareMath.assertUint128(newTotalPending);\r\n\r\n        vaultState.totalPending = uint128(newTotalPending);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiates a withdrawal that can be processed once the round completes\r\n     * @param numShares is the number of shares to withdraw\r\n     */\r\n    function _initiateWithdraw(uint256 numShares) internal {\r\n        require(numShares > 0, \"!numShares\");\r\n\r\n        // We do a max redeem before initiating a withdrawal\r\n        // But we check if they must first have unredeemed shares\r\n        if (\r\n            depositReceipts[msg.sender].amount > 0 ||\r\n            depositReceipts[msg.sender].unredeemedShares > 0\r\n        ) {\r\n            _redeem(0, true);\r\n        }\r\n\r\n        // This caches the `round` variable used in shareBalances\r\n        uint256 currentRound = vaultState.round;\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\r\n\r\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\r\n\r\n        uint256 existingShares = uint256(withdrawal.shares);\r\n\r\n        uint256 withdrawalShares;\r\n        if (withdrawalIsSameRound) {\r\n            withdrawalShares = existingShares.add(numShares);\r\n        } else {\r\n            require(existingShares == 0, \"Existing withdraw\");\r\n            withdrawalShares = numShares;\r\n            withdrawals[msg.sender].round = uint16(currentRound);\r\n        }\r\n\r\n        ShareMath.assertUint128(withdrawalShares);\r\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\r\n\r\n        _transfer(msg.sender, address(this), numShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\r\n     * @return withdrawAmount the current withdrawal amount\r\n     */\r\n    function _completeWithdraw() internal returns (uint256) {\r\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\r\n\r\n        uint256 withdrawalShares = withdrawal.shares;\r\n        uint256 withdrawalRound = withdrawal.round;\r\n\r\n        // This checks if there is a withdrawal\r\n        require(withdrawalShares > 0, \"Not initiated\");\r\n\r\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\r\n\r\n        // We leave the round number as non-zero to save on gas for subsequent writes\r\n        withdrawals[msg.sender].shares = 0;\r\n        vaultState.queuedWithdrawShares = uint128(\r\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\r\n        );\r\n\r\n        uint256 withdrawAmount =\r\n            ShareMath.sharesToAsset(\r\n                withdrawalShares,\r\n                roundPricePerShare[withdrawalRound],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\r\n\r\n        _burn(address(this), withdrawalShares);\r\n\r\n        require(withdrawAmount > 0, \"!withdrawAmount\");\r\n        transferAsset(msg.sender, withdrawAmount);\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem\r\n     */\r\n    function redeem(uint256 numShares) external nonReentrant {\r\n        require(numShares > 0, \"!numShares\");\r\n        _redeem(numShares, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\r\n     */\r\n    function maxRedeem() external nonReentrant {\r\n        _redeem(0, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares that are owed to the account\r\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\r\n     * @param isMax is flag for when callers do a max redemption\r\n     */\r\n    function _redeem(uint256 numShares, bool isMax) internal {\r\n        Vault.DepositReceipt memory depositReceipt =\r\n            depositReceipts[msg.sender];\r\n\r\n        // This handles the null case when depositReceipt.round = 0\r\n        // Because we start with round = 1 at `initialize`\r\n        uint256 currentRound = vaultState.round;\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                currentRound,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        numShares = isMax ? unredeemedShares : numShares;\r\n        if (numShares == 0) {\r\n            return;\r\n        }\r\n        require(numShares <= unredeemedShares, \"Exceeds available\");\r\n\r\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\r\n        // we debit from the unredeemedShares, but leave the amount field intact\r\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\r\n        if (depositReceipt.round < currentRound) {\r\n            depositReceipts[msg.sender].amount = 0;\r\n        }\r\n\r\n        ShareMath.assertUint128(numShares);\r\n        depositReceipts[msg.sender].unredeemedShares = uint128(\r\n            unredeemedShares.sub(numShares)\r\n        );\r\n\r\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\r\n\r\n        _transfer(address(this), msg.sender, numShares);\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\r\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\r\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\r\n     * @param numRounds is the number of rounds to initialize in the map\r\n     */\r\n    function initRounds(uint256 numRounds) external nonReentrant {\r\n        require(numRounds > 0, \"!numRounds\");\r\n\r\n        uint256 _round = vaultState.round;\r\n        for (uint256 i = 0; i < numRounds; i++) {\r\n            uint256 index = _round + i;\r\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\r\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function that performs most administrative tasks\r\n     * such as minting new shares, getting vault fees, etc.\r\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\r\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\r\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\r\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\r\n     */\r\n    function _closeRound(\r\n        uint256 lastQueuedWithdrawAmount,\r\n        uint256 currentQueuedWithdrawShares\r\n    ) internal returns (uint256 lockedBalance, uint256 queuedWithdrawAmount) {\r\n        address recipient = feeRecipient;\r\n        uint256 mintShares;\r\n        uint256 performanceFeeInAsset;\r\n        uint256 totalVaultFee;\r\n        {\r\n            uint256 newPricePerShare;\r\n            (\r\n                lockedBalance,\r\n                queuedWithdrawAmount,\r\n                newPricePerShare,\r\n                mintShares,\r\n                performanceFeeInAsset,\r\n                totalVaultFee\r\n            ) = VaultLifecycleWithSwap.closeRound(\r\n                vaultState,\r\n                VaultLifecycleWithSwap.CloseParams(\r\n                    vaultParams.decimals,\r\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\r\n                    totalSupply(),\r\n                    lastQueuedWithdrawAmount,\r\n                    performanceFee,\r\n                    managementFee,\r\n                    currentQueuedWithdrawShares\r\n                )\r\n            );\r\n\r\n            // Finalize the pricePerShare at the end of the round\r\n            uint256 currentRound = vaultState.round;\r\n            roundPricePerShare[currentRound] = newPricePerShare;\r\n\r\n            emit CollectVaultFees(\r\n                performanceFeeInAsset,\r\n                totalVaultFee,\r\n                currentRound,\r\n                recipient\r\n            );\r\n\r\n            vaultState.totalPending = 0;\r\n            vaultState.round = uint16(currentRound + 1);\r\n        }\r\n\r\n        _mint(address(this), mintShares);\r\n\r\n        if (totalVaultFee > 0) {\r\n            transferAsset(payable(recipient), totalVaultFee);\r\n        }\r\n\r\n        return (lockedBalance, queuedWithdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\r\n     * @param recipient is the receiving address\r\n     * @param amount is the transfer amount\r\n     */\r\n    function transferAsset(address recipient, uint256 amount) internal {\r\n        address asset = vaultParams.asset;\r\n        if (asset == WETH) {\r\n            IWETH(WETH).withdraw(amount);\r\n            (bool success, ) = recipient.call{value: amount}(\"\");\r\n            require(success, \"Transfer failed\");\r\n            return;\r\n        }\r\n        IERC20(asset).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Returns the asset balance held on the vault for the account\r\n     * @param account is the address to lookup balance for\r\n     * @return the amount of `asset` custodied by the vault for the user\r\n     */\r\n    function accountVaultBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _decimals = vaultParams.decimals;\r\n        uint256 assetPerShare =\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                _decimals\r\n            );\r\n        return\r\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance including unredeemed shares\r\n     * @param account is the account to lookup share balance for\r\n     * @return the share balance\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\r\n        return heldByAccount.add(heldByVault);\r\n    }\r\n\r\n    /**\r\n     * @notice Getter for returning the account's share balance split between account and vault holdings\r\n     * @param account is the account to lookup share balance for\r\n     * @return heldByAccount is the shares held by account\r\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\r\n     */\r\n    function shareBalances(address account)\r\n        public\r\n        view\r\n        returns (uint256 heldByAccount, uint256 heldByVault)\r\n    {\r\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\r\n\r\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\r\n            return (balanceOf(account), 0);\r\n        }\r\n\r\n        uint256 unredeemedShares =\r\n            depositReceipt.getSharesFromReceipt(\r\n                vaultState.round,\r\n                roundPricePerShare[depositReceipt.round],\r\n                vaultParams.decimals\r\n            );\r\n\r\n        return (balanceOf(account), unredeemedShares);\r\n    }\r\n\r\n    /**\r\n     * @notice The price of a unit of share denominated in the `asset`\r\n     */\r\n    function pricePerShare() external view returns (uint256) {\r\n        return\r\n            ShareMath.pricePerShare(\r\n                totalSupply(),\r\n                totalBalance(),\r\n                vaultState.totalPending,\r\n                vaultParams.decimals\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\r\n     * @return total balance of the vault, including the amounts locked in third party protocols\r\n     */\r\n    function totalBalance() public view returns (uint256) {\r\n        // After calling closeRound, current option is set to none\r\n        // We also commit the lockedAmount but do not deposit into Opyn\r\n        // which results in double counting of asset balance and lockedAmount\r\n\r\n        return\r\n            optionState.currentOption != address(0)\r\n                ? uint256(vaultState.lockedAmount).add(\r\n                    IERC20(vaultParams.asset).balanceOf(address(this))\r\n                )\r\n                : IERC20(vaultParams.asset).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the token decimals\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return vaultParams.decimals;\r\n    }\r\n\r\n    function cap() external view returns (uint256) {\r\n        return vaultParams.cap;\r\n    }\r\n\r\n    function nextOptionReadyAt() external view returns (uint256) {\r\n        return optionState.nextOptionReadyAt;\r\n    }\r\n\r\n    function currentOption() external view returns (address) {\r\n        return optionState.currentOption;\r\n    }\r\n\r\n    function nextOption() external view returns (address) {\r\n        return optionState.nextOption;\r\n    }\r\n\r\n    function totalPending() external view returns (uint256) {\r\n        return vaultState.totalPending;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/STETHDepositHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {ICurveETHSTETHPool} from \"../interfaces/ICurveETHSTETHPool.sol\";\r\nimport {IRibbonThetaVault} from \"../interfaces/IRibbonThetaVault.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract STETHDepositHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    ICurveETHSTETHPool public immutable curveETHSTETHPool;\r\n    IRibbonThetaVault public immutable stETHVault;\r\n    IERC20 public immutable stETH;\r\n\r\n    constructor(\r\n        address _curveETHSTETHPool,\r\n        address _stETHVault,\r\n        address _stETH\r\n    ) {\r\n        require(_curveETHSTETHPool != address(0), \"!curveETHSTETH Pool\");\r\n        require(_stETHVault != address(0), \"!stETHVault\");\r\n        require(_stETH != address(0), \"!_stETH\");\r\n\r\n        curveETHSTETHPool = ICurveETHSTETHPool(_curveETHSTETHPool);\r\n        stETHVault = IRibbonThetaVault(_stETHVault);\r\n        stETH = IERC20(_stETH);\r\n    }\r\n\r\n    /**\r\n     * Swaps ETH -> stETH on Curve ETH-stETH pool, and deposits into stETH vault\r\n     */\r\n    function deposit(uint256 minSTETHAmount) external payable {\r\n        curveETHSTETHPool.exchange{value: msg.value}(\r\n            0,\r\n            1,\r\n            msg.value,\r\n            minSTETHAmount\r\n        );\r\n        uint256 balance = stETH.balanceOf(address(this));\r\n        stETH.safeApprove(address(stETHVault), balance);\r\n        stETHVault.depositYieldTokenFor(balance, msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ICurveETHSTETHPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ICurveETHSTETHPool {\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable returns (uint256);\r\n}\r\n"
    },
    "contracts/utils/OptionsPurchaseQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\r\nimport {IRibbonThetaVault} from \"../interfaces/IRibbonThetaVault.sol\";\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\ncontract OptionsPurchaseQueue is IOptionsPurchaseQueue, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /************************************************\r\n     *  STORAGE\r\n     ***********************************************/\r\n\r\n    /// @notice Stores the purchase queue for each vault\r\n    mapping(address => Purchase[]) public override purchases;\r\n\r\n    /// @notice Stores the total options being purchased for each vault\r\n    mapping(address => uint256) public override totalOptionsAmount;\r\n\r\n    /// @notice Stores the amount of options the vault is allocating towards the purchase queue\r\n    /// @dev When vaultAllocatedOptions != 0, new purchase requests for the vault are blocked since the vault has\r\n    ///  already allocated options for this contract\r\n    mapping(address => uint256) public override vaultAllocatedOptions;\r\n\r\n    /// @notice Stores whether a buyer is whitelisted\r\n    mapping(address => bool) public override whitelistedBuyer;\r\n\r\n    /// @notice Stores the ceiling price of a vaults options\r\n    /// @dev If the ceilingPrice != 0, then the vault is available for requesting purchases\r\n    mapping(address => uint256) public override ceilingPrice;\r\n\r\n    /// @notice Minimum amount of options a buyer needs to request from a vault, necessary to prevent the purchase\r\n    ///  queue from getting griefed\r\n    /// @dev Buyers on the whitelist are exempted from this requirement\r\n    mapping(address => uint256) public override minPurchaseAmount;\r\n\r\n    /************************************************\r\n     *  EVENTS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Emitted when a purchase is requested\r\n     * @param buyer The buyer requesting the purchase\r\n     * @param vault The vault the buyer is purchasing from\r\n     * @param optionsAmount Amount of options requested\r\n     * @param premiums Total premiums from the buyers (optionsAmount * ceilingPrice)\r\n     */\r\n    event PurchaseRequested(\r\n        address indexed buyer,\r\n        address indexed vault,\r\n        uint256 optionsAmount,\r\n        uint256 premiums\r\n    );\r\n\r\n    /**\r\n     * @notice Emitted when a purchase is cancelled\r\n     * @param buyer The buyer cancelling their purchase\r\n     * @param vault The vault the buyer was purchasing from\r\n     * @param optionsAmount Amount of options cancelled\r\n     * @param premiums Total premiums transferred back to the buyer\r\n     */\r\n    event PurchaseCancelled(\r\n        address indexed buyer,\r\n        address indexed vault,\r\n        uint256 optionsAmount,\r\n        uint256 premiums\r\n    );\r\n\r\n    /**\r\n     * @notice Emitted when the vault allocates options to be sold to the buyers\r\n     * @param vault The vault allocating options\r\n     * @param allocatedOptions Amount of options allocated\r\n     */\r\n    event OptionsAllocated(address indexed vault, uint256 allocatedOptions);\r\n\r\n    /**\r\n     * @notice Emitted when the vault sells options to the buyers\r\n     * @param vault The vault selling the options\r\n     * @param totalPremiums Total premiums earnt by the vault\r\n     * @param totalOptions Total options transferred to the buyers (allocatedOptions)\r\n     */\r\n    event OptionsSold(\r\n        address indexed vault,\r\n        uint256 totalPremiums,\r\n        uint256 totalOptions\r\n    );\r\n\r\n    /**\r\n     * @notice Emitted when a buyer is whitelisted for purchasing options\r\n     * @param buyer The whitelisted buyer\r\n     */\r\n    event AddWhitelist(address indexed buyer);\r\n\r\n    /**\r\n     * @notice Emitted when a buyer is removed from the whitelist for purchasing options\r\n     * @param buyer The blacklisted buyer\r\n     */\r\n    event RemoveWhitelist(address indexed buyer);\r\n\r\n    /**\r\n     * @notice Emitted when the ceiling price for a vault is updated\r\n     * @param vault The vault\r\n     * @param ceilingPrice The new ceiling price\r\n     */\r\n    event CeilingPriceUpdated(address indexed vault, uint256 ceilingPrice);\r\n\r\n    /**\r\n     * @notice Emitted when the minimum purchase amount for a vault is updated\r\n     * @param vault The vault\r\n     * @param optionsAmount The new minimum purchase amount\r\n     */\r\n    event MinPurchaseAmountUpdated(\r\n        address indexed vault,\r\n        uint256 optionsAmount\r\n    );\r\n\r\n    /************************************************\r\n     *  BUYER OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Create a request to purchase options from a vault at the auction settlement price\r\n     * @dev The buyer must be whitelisted to prevent the purchase queue from getting griefed (since sellToBuyers()\r\n     *  iterates through it). This function transfers the premiums for the options from the buyer at the ceiling\r\n     *  price (maximum price the buyer has to pay), however when the options are sold the buyer only pays the\r\n     *  auction settlement price and the leftover premiums are transferred back to the buyer. This function will\r\n     *  revert after the vault calls allocateOptions. New purchases can be made after the vault calls sellToBuyers().\r\n     *  The requests on the purchased queue are filled FIFO. Any unfilled/partially filled requests are refunded\r\n     *  their premiums, this can occur when the vault allocates less options than there are on the queue.\r\n     * @param vault The vault to purchase options from\r\n     * @param optionsAmount Amount of options requested\r\n     * @return premiums Amount of premiums transferred from the buyer\r\n     */\r\n    function requestPurchase(address vault, uint256 optionsAmount)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 _ceilingPrice = ceilingPrice[vault];\r\n        require(_ceilingPrice != 0, \"Invalid vault\");\r\n        require(optionsAmount != 0, \"!optionsAmount\");\r\n        // Exempt buyers on the whitelist from the minimum purchase requirement\r\n        require(\r\n            optionsAmount >= minPurchaseAmount[vault] ||\r\n                whitelistedBuyer[msg.sender],\r\n            \"Minimum purchase requirement\"\r\n        );\r\n        // This prevents new purchase requested after the vault has set its allocation\r\n        require(vaultAllocatedOptions[vault] == 0, \"Vault allocated\");\r\n\r\n        // premiums = optionsAmount * ceilingPrice\r\n        uint256 premiums =\r\n            (optionsAmount * _ceilingPrice) / (10**Vault.OTOKEN_DECIMALS);\r\n\r\n        // Add purchase to queue\r\n        purchases[vault].push(\r\n            Purchase(\r\n                SafeCast.toUint128(optionsAmount),\r\n                SafeCast.toUint128(premiums),\r\n                msg.sender\r\n            )\r\n        );\r\n\r\n        totalOptionsAmount[vault] += optionsAmount;\r\n\r\n        // Transfer premiums from the buyer to this contract\r\n        IERC20(IRibbonThetaVault(vault).vaultParams().asset).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            premiums\r\n        );\r\n\r\n        emit PurchaseRequested(msg.sender, vault, optionsAmount, premiums);\r\n\r\n        return premiums;\r\n    }\r\n\r\n    /************************************************\r\n     *  VAULT OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Allocate options to the purchase queue\r\n     * @dev Only callable by the vault selling options. Since we cannot allocate more options than there are on the\r\n     *  purchase queue, we cap the allocated options at the totalOptionsAmount. The vault decides how many options\r\n     *  of its options it wants to allocate. Allows allocating additional options if already called. Transfers the\r\n     *  options from the vault to this contract.\r\n     * @param allocatedOptions Maximum amount of options the vault can allocate to buyers\r\n     * @return allocatedOptions The actual amount of options allocated\r\n     */\r\n    function allocateOptions(uint256 allocatedOptions)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(ceilingPrice[msg.sender] != 0, \"Not vault\");\r\n\r\n        // Prevent the vault from allocating more options than there are requested\r\n        allocatedOptions = getOptionsAllocation(msg.sender, allocatedOptions);\r\n\r\n        // Blocks new purchase requests until sellToBuyers() is called\r\n        vaultAllocatedOptions[msg.sender] += allocatedOptions;\r\n\r\n        if (allocatedOptions != 0) {\r\n            // Transfer allocated options from the vault to this contract\r\n            IERC20(IRibbonThetaVault(msg.sender).currentOption())\r\n                .safeTransferFrom(msg.sender, address(this), allocatedOptions);\r\n        }\r\n\r\n        emit OptionsAllocated(msg.sender, allocatedOptions);\r\n\r\n        return allocatedOptions;\r\n    }\r\n\r\n    /**\r\n     * @notice Sells allocated options to the buyers on the purchase queue\r\n     * @dev Only callable by the vault. Lets say the vault starts an auction and it doesn't fully fill and\r\n     *  settles at a poor price. If this function were callable by anyone, then they could sell the allocated\r\n     *  options to the buyers at the poor price. Hence the vault should call this once its auction has settled at a\r\n     *  good price. The vault must allocate options first, otherwise all the buyers are returned their premiums.\r\n     *  The buyers receive their options at the auction settlement price and any leftover premiums are refunded.\r\n     *  If the auction settles above the ceiling price, the vault receives the premiums at the ceiling price (so it\r\n     *  receives premiums at a worse price than the auction) and the buyers are not refunded.\r\n     * @param settlementPrice The vault passes in the settlement price of the options\r\n     * @return totalPremiums The total premiums the vault received from the purchase queue\r\n     */\r\n    function sellToBuyers(uint256 settlementPrice)\r\n        external\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(ceilingPrice[msg.sender] != 0, \"Not vault\");\r\n\r\n        uint256 totalPremiums;\r\n        uint256 allocatedOptions = vaultAllocatedOptions[msg.sender];\r\n        uint256 totalOptions = allocatedOptions; // Cache allocatedOptions here for emitting an event later\r\n        IERC20 currentOption =\r\n            IERC20(IRibbonThetaVault(msg.sender).currentOption());\r\n        IERC20 asset =\r\n            IERC20(IRibbonThetaVault(msg.sender).vaultParams().asset);\r\n        Purchase[] memory purchaseQueue = purchases[msg.sender];\r\n\r\n        for (uint256 i; i < purchaseQueue.length; i++) {\r\n            if (allocatedOptions == 0) {\r\n                // Transfer premiums back to the buyer if no options are left\r\n                asset.safeTransfer(\r\n                    purchaseQueue[i].buyer,\r\n                    purchaseQueue[i].premiums\r\n                );\r\n            } else {\r\n                // Prevent transferring more options than there are allocated\r\n                // optionsAmount = min(purchase.optionsAmount, allocatedOptions)\r\n                uint256 optionsAmount =\r\n                    purchaseQueue[i].optionsAmount < allocatedOptions\r\n                        ? purchaseQueue[i].optionsAmount\r\n                        : allocatedOptions;\r\n\r\n                // premiums = optionsAmount * settlementPrice\r\n                uint256 premiums =\r\n                    (optionsAmount * settlementPrice) /\r\n                        (10**Vault.OTOKEN_DECIMALS);\r\n\r\n                if (premiums < purchaseQueue[i].premiums) {\r\n                    // Transfer leftover premiums back to the buyer\r\n                    asset.safeTransfer(\r\n                        purchaseQueue[i].buyer,\r\n                        purchaseQueue[i].premiums - premiums\r\n                    );\r\n\r\n                    totalPremiums += premiums;\r\n                } else {\r\n                    // If the settlement price exceed the buyer's price (ceiling price), the vault receives all\r\n                    // of the buyer's premiums at a worse price than the auction\r\n                    totalPremiums += purchaseQueue[i].premiums;\r\n                }\r\n\r\n                // Transfer options to the buyer\r\n                currentOption.safeTransfer(\r\n                    purchaseQueue[i].buyer,\r\n                    optionsAmount\r\n                );\r\n\r\n                // Deduct transferred options from allocatedOptions\r\n                allocatedOptions -= optionsAmount;\r\n            }\r\n        }\r\n\r\n        // Transfer premiums to the vault\r\n        if (totalPremiums != 0) asset.safeTransfer(msg.sender, totalPremiums);\r\n\r\n        // Clear purchase queue\r\n        delete purchases[msg.sender];\r\n        totalOptionsAmount[msg.sender] = 0;\r\n        // Purchase requests are unblocked\r\n        vaultAllocatedOptions[msg.sender] = 0;\r\n\r\n        emit OptionsSold(msg.sender, totalPremiums, totalOptions);\r\n\r\n        return totalPremiums;\r\n    }\r\n\r\n    /************************************************\r\n     *  OWNER OPERATIONS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Cancels all purchase requests for a delisted vault\r\n     * @dev Only callable by the owner. Will revert if options have already been allocated by the vault.\r\n     * @param vault The vault to cancel all purchases for\r\n     */\r\n    function cancelAllPurchases(address vault) external override onlyOwner {\r\n        // Revert if the vault is still listed\r\n        require(ceilingPrice[vault] == 0, \"Vault listed\");\r\n        // This prevents cancellations after the vault has set its allocation\r\n        require(vaultAllocatedOptions[vault] == 0, \"Vault allocated\");\r\n\r\n        IERC20 asset = IERC20(IRibbonThetaVault(vault).vaultParams().asset);\r\n        Purchase[] memory purchaseQueue = purchases[vault];\r\n\r\n        for (uint256 i; i < purchaseQueue.length; i++) {\r\n            // Refund premiums to the buyer\r\n            asset.safeTransfer(\r\n                purchaseQueue[i].buyer,\r\n                purchaseQueue[i].premiums\r\n            );\r\n\r\n            emit PurchaseCancelled(\r\n                purchaseQueue[i].buyer,\r\n                vault,\r\n                purchaseQueue[i].optionsAmount,\r\n                purchaseQueue[i].premiums\r\n            );\r\n        }\r\n\r\n        // Clear purchase queue\r\n        delete purchases[vault];\r\n        totalOptionsAmount[vault] = 0;\r\n    }\r\n\r\n    /************************************************\r\n     *  SETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Adds a buyer to the purchase queue whitelist\r\n     * @dev Only callable by the owner\r\n     * @param buyer The buyer to whitelist\r\n     */\r\n    function addWhitelist(address buyer) external override onlyOwner {\r\n        require(buyer != address(0), \"!buyer\");\r\n\r\n        whitelistedBuyer[buyer] = true;\r\n\r\n        emit AddWhitelist(buyer);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes a buyer from the purchase queue whitelist\r\n     * @dev Only callable by the owner\r\n     * @param buyer The buyer to remove from the whitelist\r\n     */\r\n    function removeWhitelist(address buyer) external override onlyOwner {\r\n        require(buyer != address(0), \"!buyer\");\r\n\r\n        whitelistedBuyer[buyer] = false;\r\n\r\n        emit RemoveWhitelist(buyer);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the ceiling price for a vault\r\n     * @dev Only callable by the owner\r\n     * @param vault The vault to set a ceiling price for\r\n     * @param price The ceiling price\r\n     */\r\n    function setCeilingPrice(address vault, uint256 price)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(vault != address(0), \"!vault\");\r\n\r\n        // Setting the ceiling price to 0 is the same as delisting a vault\r\n        ceilingPrice[vault] = price;\r\n\r\n        emit CeilingPriceUpdated(vault, price);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the minimum purchase amount for a vault\r\n     * @dev Only callable by the owner\r\n     * @param vault The vault to set the minimum purchase amount for\r\n     * @param optionsAmount The minimum options purchase amount\r\n     */\r\n    function setMinPurchaseAmount(address vault, uint256 optionsAmount)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(vault != address(0), \"!vault\");\r\n\r\n        minPurchaseAmount[vault] = optionsAmount;\r\n\r\n        emit MinPurchaseAmountUpdated(vault, optionsAmount);\r\n    }\r\n\r\n    /************************************************\r\n     *  GETTERS\r\n     ***********************************************/\r\n\r\n    /**\r\n     * @notice Gets all the purchase requests for a vault\r\n     * @param vault The vault to get purchase requests for\r\n     * @return purchases The purchase array\r\n     */\r\n    function getPurchases(address vault)\r\n        external\r\n        view\r\n        override\r\n        returns (Purchase[] memory)\r\n    {\r\n        return purchases[vault];\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the premiums the buyer needs to deposit to request a certain amount of options\r\n     * @param vault The vault to purchase options from\r\n     * @param optionsAmount Amount of options requested\r\n     * @return premiums Premiums required to request a purchase\r\n     */\r\n    function getPremiums(address vault, uint256 optionsAmount)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // premiums = optionsAmount * ceilingPrice\r\n        return\r\n            (optionsAmount * ceilingPrice[vault]) / (10**Vault.OTOKEN_DECIMALS);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of options the vault can allocate to the queue\r\n     * @param vault The vault selling options to the queue\r\n     * @param allocatedOptions Maximum amount of options the vault can allocate to the queue\r\n     * @return allocatedOptions Actual amount of options the vault allocates to the queue\r\n     */\r\n    function getOptionsAllocation(address vault, uint256 allocatedOptions)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // Prevent the vault from allocating more options than there are requested\r\n        uint256 optionsAmount =\r\n            totalOptionsAmount[vault] - vaultAllocatedOptions[vault];\r\n        // allocatedOptions = min(allocatedOptions, totalOptionsAmount[vault] - vaultAllocatedOptions[vault])\r\n        return\r\n            optionsAmount < allocatedOptions ? optionsAmount : allocatedOptions;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/tests/MockRibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\ncontract MockRibbonVault {\r\n    Vault.VaultParams public vaultParams;\r\n\r\n    address public currentOption;\r\n\r\n    function setAsset(address asset) external {\r\n        vaultParams.asset = asset;\r\n    }\r\n\r\n    function setCurrentOption(address option) external {\r\n        currentOption = option;\r\n    }\r\n\r\n    function allocateOptions(\r\n        address optionsPurchaseQueue,\r\n        address option,\r\n        uint256 optionsAmount\r\n    ) external {\r\n        IERC20(option).approve(optionsPurchaseQueue, optionsAmount);\r\n        IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\r\n            optionsAmount\r\n        );\r\n    }\r\n\r\n    function sellToBuyers(address optionsPurchaseQueue, uint256 settlementPrice)\r\n        external\r\n    {\r\n        IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\r\n            settlementPrice\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/tests/TestVaultLifecycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {VaultLifecycle} from \"../libraries/VaultLifecycle.sol\";\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\ncontract TestVaultLifecycle {\r\n    Vault.VaultState public vaultState;\r\n\r\n    function getNextFriday(uint256 currentExpiry)\r\n        external\r\n        pure\r\n        returns (uint256 nextFriday)\r\n    {\r\n        return VaultLifecycle.getNextFriday(currentExpiry);\r\n    }\r\n\r\n    function getNextExpiry(address currentOption)\r\n        external\r\n        view\r\n        returns (uint256 nextExpiry)\r\n    {\r\n        return VaultLifecycle.getNextExpiry(currentOption);\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (account == address(this)) {\r\n            return 1 ether;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function setVaultState(Vault.VaultState calldata newVaultState) public {\r\n        vaultState.totalPending = newVaultState.totalPending;\r\n        vaultState.queuedWithdrawShares = newVaultState.queuedWithdrawShares;\r\n    }\r\n\r\n    function rollover(VaultLifecycle.RolloverParams calldata params)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 newLockedAmount,\r\n            uint256 queuedWithdrawAmount,\r\n            uint256 newPricePerShare,\r\n            uint256 mintShares,\r\n            uint256 performanceFeeInAsset,\r\n            uint256 totalVaultFee\r\n        )\r\n    {\r\n        return VaultLifecycle.rollover(vaultState, params);\r\n    }\r\n\r\n    function getAuctionSettlementPrice(\r\n        address gnosisEasyAuction,\r\n        uint256 optionAuctionID\r\n    ) external view returns (uint256) {\r\n        return\r\n            VaultLifecycle.getAuctionSettlementPrice(\r\n                gnosisEasyAuction,\r\n                optionAuctionID\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/VaultLifecycleTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {Vault} from \"./Vault.sol\";\r\nimport {ShareMath} from \"./ShareMath.sol\";\r\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\r\nimport {GnosisAuction} from \"./GnosisAuction.sol\";\r\nimport {DateTime} from \"./DateTime.sol\";\r\nimport {\r\n    IOtokenFactory,\r\n    IOtoken,\r\n    IController,\r\n    GammaTypes\r\n} from \"../interfaces/GammaInterface.sol\";\r\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\r\nimport {IGnosisAuction} from \"../interfaces/IGnosisAuction.sol\";\r\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\r\n\r\nlibrary VaultLifecycleTreasury {\r\n    using SafeMath for uint256;\r\n    using SupportsNonCompliantERC20 for IERC20;\r\n\r\n    struct CloseParams {\r\n        address OTOKEN_FACTORY;\r\n        address USDC;\r\n        address currentOption;\r\n        uint256 delay;\r\n        uint16 lastStrikeOverrideRound;\r\n        uint256 overriddenStrikePrice;\r\n        uint256 period;\r\n    }\r\n\r\n    /**\r\n     * @notice Initialization parameters for the vault.\r\n     * @param _owner is the owner of the vault with critical permissions\r\n     * @param _feeRecipient is the address to recieve vault performance and management fees\r\n     * @param _managementFee is the management fee pct.\r\n     * @param _performanceFee is the perfomance fee pct.\r\n     * @param _tokenName is the name of the token\r\n     * @param _tokenSymbol is the symbol of the token\r\n     * @param _optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param _strikeSelection is the address of the contract with strike selection logic\r\n     * @param _premiumDiscount is the vault's discount applied to the premium\r\n     * @param _auctionDuration is the duration of the gnosis auction\r\n     * @param _period is the period between each option sales\r\n     */\r\n    struct InitParams {\r\n        address _owner;\r\n        address _keeper;\r\n        address _feeRecipient;\r\n        uint256 _managementFee;\r\n        uint256 _performanceFee;\r\n        string _tokenName;\r\n        string _tokenSymbol;\r\n        address _optionsPremiumPricer;\r\n        address _strikeSelection;\r\n        uint32 _premiumDiscount;\r\n        uint256 _auctionDuration;\r\n        uint256 _period;\r\n        uint256 _maxDepositors;\r\n        uint256 _minDeposit;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\r\n     * @param strikeSelection is the address of the contract with strike selection logic\r\n     * @param optionsPremiumPricer is the address of the contract with the\r\n       black-scholes premium calculation logic\r\n     * @param premiumDiscount is the vault's discount applied to the premium\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param vaultState is the struct with vault accounting state\r\n     * @return otokenAddress is the address of the new option\r\n     * @return premium is the premium of the new option\r\n     * @return strikePrice is the strike price of the new option\r\n     * @return delta is the delta of the new option\r\n     */\r\n    function commitAndClose(\r\n        address strikeSelection,\r\n        address optionsPremiumPricer,\r\n        uint256 premiumDiscount,\r\n        CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        Vault.VaultState storage vaultState\r\n    )\r\n        external\r\n        returns (\r\n            address otokenAddress,\r\n            uint256 premium,\r\n            uint256 strikePrice,\r\n            uint256 delta\r\n        )\r\n    {\r\n        uint256 expiry;\r\n\r\n        // uninitialized state\r\n        if (closeParams.currentOption == address(0)) {\r\n            expiry = getNextExpiry(block.timestamp, closeParams.period);\r\n        } else {\r\n            expiry = getNextExpiry(\r\n                IOtoken(closeParams.currentOption).expiryTimestamp(),\r\n                closeParams.period\r\n            );\r\n        }\r\n\r\n        IStrikeSelection selection = IStrikeSelection(strikeSelection);\r\n\r\n        bool isPut = vaultParams.isPut;\r\n        address underlying = vaultParams.underlying;\r\n        address asset = vaultParams.asset;\r\n\r\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\r\n            vaultState.round\r\n            ? (closeParams.overriddenStrikePrice, 0)\r\n            : selection.getStrikePrice(expiry, isPut);\r\n\r\n        require(strikePrice != 0, \"!strikePrice\");\r\n\r\n        // retrieve address if option already exists, or deploy it\r\n        otokenAddress = getOrDeployOtoken(\r\n            closeParams,\r\n            vaultParams,\r\n            underlying,\r\n            asset,\r\n            strikePrice,\r\n            expiry,\r\n            isPut\r\n        );\r\n\r\n        // get the black scholes premium of the option\r\n        premium = GnosisAuction.getOTokenPremiumInStables(\r\n            otokenAddress,\r\n            optionsPremiumPricer,\r\n            premiumDiscount\r\n        );\r\n\r\n        require(premium > 0, \"!premium\");\r\n\r\n        return (otokenAddress, premium, strikePrice, delta);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\r\n     * @param otokenAddress is the address of the otoken\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param collateralAsset is the address of the collateral asset\r\n     * @param USDC is the address of usdc\r\n     * @param delay is the delay between commitAndClose and rollToNextOption\r\n     */\r\n    function verifyOtoken(\r\n        address otokenAddress,\r\n        Vault.VaultParams storage vaultParams,\r\n        address collateralAsset,\r\n        address USDC,\r\n        uint256 delay\r\n    ) private view {\r\n        require(otokenAddress != address(0), \"!otokenAddress\");\r\n\r\n        IOtoken otoken = IOtoken(otokenAddress);\r\n        require(otoken.isPut() == vaultParams.isPut, \"Type mismatch\");\r\n        require(\r\n            otoken.underlyingAsset() == vaultParams.underlying,\r\n            \"Wrong underlyingAsset\"\r\n        );\r\n        require(\r\n            otoken.collateralAsset() == collateralAsset,\r\n            \"Wrong collateralAsset\"\r\n        );\r\n\r\n        // we just assume all options use USDC as the strike\r\n        require(otoken.strikeAsset() == USDC, \"strikeAsset != USDC\");\r\n\r\n        uint256 readyAt = block.timestamp.add(delay);\r\n        require(otoken.expiryTimestamp() >= readyAt, \"Expiry before delay\");\r\n    }\r\n\r\n    /**\r\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\r\n     * @param asset is the address of the vault's asset\r\n     * @param decimals is the decimals of the asset\r\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\r\n     * @param managementFee is the management fee percent to charge on the AUM\r\n     */\r\n    struct RolloverParams {\r\n        uint256 decimals;\r\n        uint256 totalBalance;\r\n        uint256 currentShareSupply;\r\n        uint256 lastQueuedWithdrawAmount;\r\n        uint256 managementFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the shares to mint, new price per share, and\r\n      amount of funds to re-allocate as collateral for the new round\r\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\r\n     * @param params is the rollover parameters passed to compute the next state\r\n     * @return newLockedAmount is the amount of funds to allocate for the new round\r\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\r\n     * @return newPricePerShare is the price per share of the new round\r\n     * @return mintShares is the amount of shares to mint from deposits\r\n     * @return managementFeeInAsset is the amount of management fee charged by vault\r\n     */\r\n    function rollover(\r\n        Vault.VaultState storage vaultState,\r\n        RolloverParams calldata params\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 newLockedAmount,\r\n            uint256 queuedWithdrawAmount,\r\n            uint256 newPricePerShare,\r\n            uint256 mintShares,\r\n            uint256 managementFeeInAsset\r\n        )\r\n    {\r\n        uint256 currentBalance = params.totalBalance;\r\n        uint256 pendingAmount = vaultState.totalPending;\r\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\r\n\r\n        uint256 balanceForVaultFees;\r\n        {\r\n            uint256 pricePerShareBeforeFee =\r\n                ShareMath.pricePerShare(\r\n                    params.currentShareSupply,\r\n                    currentBalance,\r\n                    pendingAmount,\r\n                    params.decimals\r\n                );\r\n\r\n            uint256 queuedWithdrawBeforeFee =\r\n                params.currentShareSupply > 0\r\n                    ? ShareMath.sharesToAsset(\r\n                        queuedWithdrawShares,\r\n                        pricePerShareBeforeFee,\r\n                        params.decimals\r\n                    )\r\n                    : 0;\r\n\r\n            // Deduct the difference between the newly scheduled withdrawals\r\n            // and the older withdrawals\r\n            // so we can charge them fees before they leave\r\n            uint256 withdrawAmountDiff =\r\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\r\n                    ? queuedWithdrawBeforeFee.sub(\r\n                        params.lastQueuedWithdrawAmount\r\n                    )\r\n                    : 0;\r\n\r\n            balanceForVaultFees = currentBalance\r\n                .sub(queuedWithdrawBeforeFee)\r\n                .add(withdrawAmountDiff);\r\n        }\r\n\r\n        managementFeeInAsset = getManagementFee(\r\n            balanceForVaultFees,\r\n            vaultState.totalPending,\r\n            params.managementFee\r\n        );\r\n\r\n        // Take into account the fee\r\n        // so we can calculate the newPricePerShare\r\n        currentBalance = currentBalance.sub(managementFeeInAsset);\r\n\r\n        {\r\n            newPricePerShare = ShareMath.pricePerShare(\r\n                params.currentShareSupply,\r\n                currentBalance,\r\n                pendingAmount,\r\n                params.decimals\r\n            );\r\n\r\n            // After closing the short, if the options expire in-the-money\r\n            // vault pricePerShare would go down because vault's asset balance decreased.\r\n            // This ensures that the newly-minted shares do not take on the loss.\r\n            mintShares = ShareMath.assetToShares(\r\n                pendingAmount,\r\n                newPricePerShare,\r\n                params.decimals\r\n            );\r\n\r\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\r\n\r\n            queuedWithdrawAmount = newSupply > 0\r\n                ? ShareMath.sharesToAsset(\r\n                    queuedWithdrawShares,\r\n                    newPricePerShare,\r\n                    params.decimals\r\n                )\r\n                : 0;\r\n        }\r\n\r\n        return (\r\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\r\n            queuedWithdrawAmount,\r\n            newPricePerShare,\r\n            mintShares,\r\n            managementFeeInAsset\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\r\n     * @param oTokenAddress is the address of the otoken to mint\r\n     * @param depositAmount is the amount of collateral to deposit\r\n     * @return the otoken mint amount\r\n     */\r\n    function createShort(\r\n        address gammaController,\r\n        address marginPool,\r\n        address oTokenAddress,\r\n        uint256 depositAmount\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n        uint256 newVaultID =\r\n            (controller.getAccountVaultCounter(address(this))).add(1);\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IOtoken oToken = IOtoken(oTokenAddress);\r\n        address collateralAsset = oToken.collateralAsset();\r\n\r\n        uint256 collateralDecimals =\r\n            uint256(IERC20Detailed(collateralAsset).decimals());\r\n        uint256 mintAmount;\r\n\r\n        if (oToken.isPut()) {\r\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\r\n            // This is because of an issue with precision.\r\n            //\r\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\r\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\r\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\r\n            //\r\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\r\n            // We retain the dust in the vault so the calling contract can withdraw the\r\n            // actual locked amount + dust at settlement.\r\n            //\r\n            // To test this behavior, we can console.log\r\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\r\n            // to see how much dust (or excess collateral) is left behind.\r\n            mintAmount = depositAmount\r\n                .mul(10**Vault.OTOKEN_DECIMALS)\r\n                .mul(10**18) // we use 10**18 to give extra precision\r\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\r\n        } else {\r\n            mintAmount = depositAmount;\r\n\r\n            if (collateralDecimals > 8) {\r\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\r\n                if (mintAmount > scaleBy) {\r\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\r\n                }\r\n            }\r\n        }\r\n\r\n        // double approve to fix non-compliant ERC20s\r\n        IERC20 collateralToken = IERC20(collateralAsset);\r\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\r\n\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](3);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.OpenVault,\r\n            address(this), // owner\r\n            address(this), // receiver\r\n            address(0), // asset, otoken\r\n            newVaultID, // vaultId\r\n            0, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.DepositCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            collateralAsset, // deposited asset\r\n            newVaultID, // vaultId\r\n            depositAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[2] = IController.ActionArgs(\r\n            IController.ActionType.MintShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            oTokenAddress, // option address\r\n            newVaultID, // vaultId\r\n            mintAmount, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        return mintAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\r\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\r\n     calling SettleVault action, this assumption should hold.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @return amount of collateral redeemed from the vault\r\n     */\r\n    function settleShort(address gammaController) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        // An otoken's collateralAsset is the vault's `asset`\r\n        // So in the context of performing Opyn short operations we call them collateralAsset\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        // The short position has been previously closed, or all the otokens have been burned.\r\n        // So we return early.\r\n        if (address(collateralToken) == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to settle the short position using the normal way\r\n        // Delete the vault and withdraw all remaining collateral from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.SettleVault,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(0), // not used\r\n            vaultID, // vaultId\r\n            0, // not used\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\r\n     * It calls the `Redeem` action to claim the payout.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param oldOption is the address of the old option\r\n     * @param asset is the address of the vault's asset\r\n     * @return amount of asset received by exercising the option\r\n     */\r\n    function settleLong(\r\n        address gammaController,\r\n        address oldOption,\r\n        address asset\r\n    ) external returns (uint256) {\r\n        IController controller = IController(gammaController);\r\n\r\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\r\n\r\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        // If it is after expiry, we need to redeem the profits\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](1);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.Redeem,\r\n            address(0), // not used\r\n            address(this), // address to send profits to\r\n            oldOption, // address of otoken\r\n            0, // not used\r\n            oldOptionBalance, // otoken balance\r\n            0, // not used\r\n            \"\" // not used\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\r\n\r\n        return endAssetBalance.sub(startAssetBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\r\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\r\n     * only have a single vault open at any given time.\r\n     * @param gammaController is the address of the opyn controller contract\r\n     * @param currentOption is the address of the current option\r\n     * @return amount of collateral redeemed by burning otokens\r\n     */\r\n    function burnOtokens(address gammaController, address currentOption)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        uint256 numOTokensToBurn =\r\n            IERC20(currentOption).balanceOf(address(this));\r\n\r\n        require(numOTokensToBurn > 0, \"No oTokens to burn\");\r\n\r\n        IController controller = IController(gammaController);\r\n\r\n        // gets the currently active vault ID\r\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\r\n\r\n        GammaTypes.Vault memory vault =\r\n            controller.getVault(address(this), vaultID);\r\n\r\n        require(vault.shortOtokens.length > 0, \"No short\");\r\n\r\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\r\n\r\n        uint256 startCollateralBalance =\r\n            collateralToken.balanceOf(address(this));\r\n\r\n        // Burning `amount` of oTokens from the ribbon vault,\r\n        // then withdrawing the corresponding collateral amount from the vault\r\n        IController.ActionArgs[] memory actions =\r\n            new IController.ActionArgs[](2);\r\n\r\n        actions[0] = IController.ActionArgs(\r\n            IController.ActionType.BurnShortOption,\r\n            address(this), // owner\r\n            address(this), // address to transfer from\r\n            address(vault.shortOtokens[0]), // otoken address\r\n            vaultID, // vaultId\r\n            numOTokensToBurn, // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        actions[1] = IController.ActionArgs(\r\n            IController.ActionType.WithdrawCollateral,\r\n            address(this), // owner\r\n            address(this), // address to transfer to\r\n            address(collateralToken), // withdrawn asset\r\n            vaultID, // vaultId\r\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\r\n                vault.shortAmounts[0]\r\n            ), // amount\r\n            0, //index\r\n            \"\" //data\r\n        );\r\n\r\n        controller.operate(actions);\r\n\r\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        return endCollateralBalance.sub(startCollateralBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the management fee for this week's round\r\n     * @param currentBalance is the balance of funds held on the vault after closing short\r\n     * @param pendingAmount is the pending deposit amount\r\n     * @param managementFeePercent is the management fee pct.\r\n     * @return managementFeeInAsset is the management fee\r\n     */\r\n    function getManagementFee(\r\n        uint256 currentBalance,\r\n        uint256 pendingAmount,\r\n        uint256 managementFeePercent\r\n    ) internal pure returns (uint256 managementFeeInAsset) {\r\n        // At the first round, currentBalance=0, pendingAmount>0\r\n        // so we just do not charge anything on the first round\r\n        uint256 lockedBalanceSansPending =\r\n            currentBalance > pendingAmount\r\n                ? currentBalance.sub(pendingAmount)\r\n                : 0;\r\n\r\n        uint256 _managementFeeInAsset;\r\n\r\n        // Always charge management fee regardless of whether the vault is\r\n        // making a profit from the previous options sale\r\n        _managementFeeInAsset = managementFeePercent > 0\r\n            ? lockedBalanceSansPending.mul(managementFeePercent).div(\r\n                100 * Vault.FEE_MULTIPLIER\r\n            )\r\n            : 0;\r\n\r\n        return _managementFeeInAsset;\r\n    }\r\n\r\n    /**\r\n     * @notice Either retrieves the option token if it already exists, or deploy it\r\n     * @param closeParams is the struct with details on previous option and strike selection details\r\n     * @param vaultParams is the struct with vault general data\r\n     * @param underlying is the address of the underlying asset of the option\r\n     * @param collateralAsset is the address of the collateral asset of the option\r\n     * @param strikePrice is the strike price of the option\r\n     * @param expiry is the expiry timestamp of the option\r\n     * @param isPut is whether the option is a put\r\n     * @return the address of the option\r\n     */\r\n    function getOrDeployOtoken(\r\n        CloseParams calldata closeParams,\r\n        Vault.VaultParams storage vaultParams,\r\n        address underlying,\r\n        address collateralAsset,\r\n        uint256 strikePrice,\r\n        uint256 expiry,\r\n        bool isPut\r\n    ) internal returns (address) {\r\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\r\n\r\n        address otokenFromFactory =\r\n            factory.getOtoken(\r\n                underlying,\r\n                closeParams.USDC,\r\n                collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        if (otokenFromFactory != address(0)) {\r\n            return otokenFromFactory;\r\n        }\r\n\r\n        address otoken =\r\n            factory.createOtoken(\r\n                underlying,\r\n                closeParams.USDC,\r\n                collateralAsset,\r\n                strikePrice,\r\n                expiry,\r\n                isPut\r\n            );\r\n\r\n        verifyOtoken(\r\n            otoken,\r\n            vaultParams,\r\n            collateralAsset,\r\n            closeParams.USDC,\r\n            closeParams.delay\r\n        );\r\n\r\n        return otoken;\r\n    }\r\n\r\n    /**\r\n     * @notice Starts the gnosis auction\r\n     * @param auctionDetails is the struct with all the custom parameters of the auction\r\n     * @return the auction id of the newly created auction\r\n     */\r\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        return GnosisAuction.startAuction(auctionDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Settles the gnosis auction\r\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\r\n     * @param auctionID is the auction ID of the gnosis easy auction\r\n     */\r\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\r\n        internal\r\n    {\r\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\r\n    }\r\n\r\n    /**\r\n     * @notice Places a bid in an auction\r\n     * @param bidDetails is the struct with all the details of the\r\n      bid including the auction's id and how much to bid\r\n     */\r\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\r\n        external\r\n        returns (\r\n            uint256 sellAmount,\r\n            uint256 buyAmount,\r\n            uint64 userId\r\n        )\r\n    {\r\n        return GnosisAuction.placeBid(bidDetails);\r\n    }\r\n\r\n    /**\r\n     * @notice Claims the oTokens belonging to the vault\r\n     * @param auctionSellOrder is the sell order of the bid\r\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\r\n     holding custody to the funds\r\n     * @param counterpartyThetaVault is the address of the counterparty theta\r\n     vault of this delta vault\r\n     */\r\n    function claimAuctionOtokens(\r\n        Vault.AuctionSellOrder calldata auctionSellOrder,\r\n        address gnosisEasyAuction,\r\n        address counterpartyThetaVault\r\n    ) external {\r\n        GnosisAuction.claimAuctionOtokens(\r\n            auctionSellOrder,\r\n            gnosisEasyAuction,\r\n            counterpartyThetaVault\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the constructor params satisfy requirements\r\n     * @param _initParams is the initialization parameter including owner, keeper, etc.\r\n     * @param _vaultParams is the struct with vault general data\r\n     */\r\n    function verifyInitializerParams(\r\n        InitParams calldata _initParams,\r\n        Vault.VaultParams calldata _vaultParams,\r\n        uint256 _min_auction_duration\r\n    ) external pure {\r\n        require(_initParams._owner != address(0), \"!_owner\");\r\n        require(_initParams._keeper != address(0), \"!_keeper\");\r\n        require(_initParams._feeRecipient != address(0), \"!_feeRecipient\");\r\n        require(\r\n            _initParams._performanceFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"performanceFee >= 100%\"\r\n        );\r\n        require(\r\n            _initParams._managementFee < 100 * Vault.FEE_MULTIPLIER,\r\n            \"managementFee >= 100%\"\r\n        );\r\n        require(bytes(_initParams._tokenName).length > 0, \"!_tokenName\");\r\n        require(bytes(_initParams._tokenSymbol).length > 0, \"!_tokenSymbol\");\r\n        require(\r\n            (_initParams._period == 7) ||\r\n                (_initParams._period == 14) ||\r\n                (_initParams._period == 30) ||\r\n                (_initParams._period == 90) ||\r\n                (_initParams._period == 180),\r\n            \"!_period\"\r\n        );\r\n        require(\r\n            _initParams._optionsPremiumPricer != address(0),\r\n            \"!_optionsPremiumPricer\"\r\n        );\r\n        require(\r\n            _initParams._strikeSelection != address(0),\r\n            \"!_strikeSelection\"\r\n        );\r\n        require(\r\n            _initParams._premiumDiscount > 0 &&\r\n                _initParams._premiumDiscount <\r\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\r\n            \"!_premiumDiscount\"\r\n        );\r\n        require(\r\n            _initParams._auctionDuration >= _min_auction_duration,\r\n            \"!_auctionDuration\"\r\n        );\r\n        require(_initParams._maxDepositors > 0, \"!_maxDepositors\");\r\n        require(_initParams._minDeposit > 0, \"!_minDeposit\");\r\n\r\n        require(_vaultParams.asset != address(0), \"!asset\");\r\n        require(_vaultParams.underlying != address(0), \"!underlying\");\r\n        require(_vaultParams.minimumSupply > 0, \"!minimumSupply\");\r\n        require(_vaultParams.cap > 0, \"!cap\");\r\n        require(\r\n            _vaultParams.cap > _vaultParams.minimumSupply,\r\n            \"cap has to be higher than minimumSupply\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the next options expiry timestamp, this function should be called\r\n     when there is sufficient guard to ensure valid period\r\n     * @param timestamp is the expiry timestamp of the current option\r\n     * @param period is no. of days in between option sales. Available periods are: \r\n     * 7(1w), 14(2w), 30(1m), 90(3m), 180(6m)\r\n     */\r\n    function getNextExpiry(uint256 timestamp, uint256 period)\r\n        internal\r\n        pure\r\n        returns (uint256 nextExpiry)\r\n    {\r\n        if (period == 7) {\r\n            nextExpiry = DateTime.getNextFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? nextExpiry + 1 weeks\r\n                : nextExpiry;\r\n        } else if (period == 14) {\r\n            nextExpiry = DateTime.getNextFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? nextExpiry + 2 weeks\r\n                : nextExpiry;\r\n        } else if (period == 30) {\r\n            nextExpiry = DateTime.getMonthLastFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? DateTime.getMonthLastFriday(nextExpiry + 1 weeks)\r\n                : nextExpiry;\r\n        } else if (period == 90) {\r\n            nextExpiry = DateTime.getQuarterLastFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? DateTime.getQuarterLastFriday(nextExpiry + 1 weeks)\r\n                : nextExpiry;\r\n        } else if (period == 180) {\r\n            nextExpiry = DateTime.getBiannualLastFriday(timestamp);\r\n            nextExpiry = nextExpiry <= timestamp\r\n                ? DateTime.getBiannualLastFriday(nextExpiry + 1 weeks)\r\n                : nextExpiry;\r\n        }\r\n\r\n        nextExpiry = nextExpiry - (nextExpiry % (24 hours)) + (8 hours);\r\n    }\r\n}\r\n"
    },
    "contracts/tests/TestVaultLifecycleTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {VaultLifecycleTreasury} from \"../libraries/VaultLifecycleTreasury.sol\";\r\n\r\ncontract TestVaultLifecycleTreasury {\r\n    function getNextExpiry(uint256 currentExpiry, uint256 interval)\r\n        external\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return VaultLifecycleTreasury.getNextExpiry(currentExpiry, interval);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/DeltaStrikeSelection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {\r\n    IPriceOracle\r\n} from \"@ribbon-finance/rvol/contracts/interfaces/IPriceOracle.sol\";\r\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\r\nimport {\r\n    IManualVolatilityOracle\r\n} from \"@ribbon-finance/rvol/contracts/interfaces/IManualVolatilityOracle.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\ncontract DeltaStrikeSelection is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Immutables\r\n     */\r\n    IOptionsPremiumPricer public immutable optionsPremiumPricer;\r\n\r\n    IManualVolatilityOracle public immutable volatilityOracle;\r\n\r\n    // delta for options strike price selection. 1 is 10000 (10**4)\r\n    uint256 public delta;\r\n\r\n    // step in absolute terms at which we will increment\r\n    // (ex: 100 * 10 ** assetOracleDecimals means we will move at increments of 100 points)\r\n    uint256 public step;\r\n\r\n    // multiplier to shift asset prices\r\n    uint256 private immutable assetOracleMultiplier;\r\n\r\n    // Delta are in 4 decimal places. 1 * 10**4 = 1 delta.\r\n    uint256 private constant DELTA_MULTIPLIER = 10**4;\r\n\r\n    // ChainLink's USD Price oracles return results in 8 decimal places\r\n    uint256 private constant ORACLE_PRICE_MULTIPLIER = 10**8;\r\n\r\n    event DeltaSet(uint256 oldDelta, uint256 newDelta, address indexed owner);\r\n    event StepSet(uint256 oldStep, uint256 newStep, address indexed owner);\r\n\r\n    constructor(\r\n        address _optionsPremiumPricer,\r\n        uint256 _delta,\r\n        uint256 _step\r\n    ) {\r\n        require(_optionsPremiumPricer != address(0), \"!_optionsPremiumPricer\");\r\n        require(_delta > 0, \"!_delta\");\r\n        require(_delta <= DELTA_MULTIPLIER, \"newDelta cannot be more than 1\");\r\n        require(_step > 0, \"!_step\");\r\n\r\n        optionsPremiumPricer = IOptionsPremiumPricer(_optionsPremiumPricer);\r\n        volatilityOracle = IManualVolatilityOracle(\r\n            IOptionsPremiumPricer(_optionsPremiumPricer).volatilityOracle()\r\n        );\r\n        // ex: delta = 7500 (.75)\r\n        delta = _delta;\r\n        uint256 _assetOracleMultiplier =\r\n            10 **\r\n                IPriceOracle(\r\n                    IOptionsPremiumPricer(_optionsPremiumPricer).priceOracle()\r\n                )\r\n                    .decimals();\r\n\r\n        step = _step;\r\n\r\n        assetOracleMultiplier = _assetOracleMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the strike price satisfying the delta value\r\n     * given the expiry timestamp and whether option is call or put\r\n     * @param expiryTimestamp is the unix timestamp of expiration\r\n     * @param isPut is whether option is put or call\r\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\r\n     * @return newDelta is the delta of the option given its parameters\r\n     */\r\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\r\n        external\r\n        view\r\n        returns (uint256 newStrikePrice, uint256 newDelta)\r\n    {\r\n        // asset's annualized volatility\r\n        uint256 annualizedVol =\r\n            volatilityOracle.annualizedVol(optionsPremiumPricer.optionId()).mul(\r\n                10**10\r\n            );\r\n        return _getStrikePrice(expiryTimestamp, isPut, annualizedVol);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the strike price satisfying the delta value\r\n     * given the expiry timestamp and whether option is call or put\r\n     * @param expiryTimestamp is the unix timestamp of expiration\r\n     * @param isPut is whether option is put or call\r\n     * @param annualizedVol is IV of the asset at the specified delta\r\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\r\n     * @return newDelta is the delta of the option given its parameters\r\n     */\r\n    function getStrikePriceWithVol(\r\n        uint256 expiryTimestamp,\r\n        bool isPut,\r\n        uint256 annualizedVol\r\n    ) external view returns (uint256 newStrikePrice, uint256 newDelta) {\r\n        return\r\n            _getStrikePrice(expiryTimestamp, isPut, annualizedVol.mul(10**10));\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the strike price satisfying the delta value\r\n     * given the expiry timestamp and whether option is call or put\r\n     * @param expiryTimestamp is the unix timestamp of expiration\r\n     * @param isPut is whether option is put or call\r\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\r\n     * @return newDelta is the delta of the option given its parameters\r\n     */\r\n\r\n    function _getStrikePrice(\r\n        uint256 expiryTimestamp,\r\n        bool isPut,\r\n        uint256 annualizedVol\r\n    ) internal view returns (uint256 newStrikePrice, uint256 newDelta) {\r\n        require(\r\n            expiryTimestamp > block.timestamp,\r\n            \"Expiry must be in the future!\"\r\n        );\r\n\r\n        // asset price\r\n        uint256 assetPrice = optionsPremiumPricer.getUnderlyingPrice();\r\n\r\n        // For each asset prices with step of 'step' (down if put, up if call)\r\n        //   if asset's getOptionDelta(currStrikePrice, spotPrice, annualizedVol, t) == (isPut ? 1 - delta:delta)\r\n        //   with certain margin of error\r\n        //        return strike price\r\n\r\n        uint256 strike =\r\n            isPut\r\n                ? assetPrice.sub(assetPrice % step).sub(step)\r\n                : assetPrice.add(step - (assetPrice % step)).add(step);\r\n        uint256 targetDelta = isPut ? DELTA_MULTIPLIER.sub(delta) : delta;\r\n        uint256 prevDelta = isPut ? 0 : DELTA_MULTIPLIER;\r\n\r\n        while (true) {\r\n            uint256 currDelta =\r\n                optionsPremiumPricer.getOptionDelta(\r\n                    assetPrice.mul(ORACLE_PRICE_MULTIPLIER).div(\r\n                        assetOracleMultiplier\r\n                    ),\r\n                    strike,\r\n                    annualizedVol,\r\n                    expiryTimestamp\r\n                );\r\n            //  If the current delta is between the previous\r\n            //  strike price delta and current strike price delta\r\n            //  then we are done\r\n            bool foundTargetStrikePrice =\r\n                isPut\r\n                    ? targetDelta >= prevDelta && targetDelta <= currDelta\r\n                    : targetDelta <= prevDelta && targetDelta >= currDelta;\r\n\r\n            if (foundTargetStrikePrice) {\r\n                uint256 finalDelta =\r\n                    _getBestDelta(prevDelta, currDelta, targetDelta, isPut);\r\n                uint256 finalStrike =\r\n                    _getBestStrike(finalDelta, prevDelta, strike, isPut);\r\n                require(\r\n                    isPut\r\n                        ? finalStrike <= assetPrice\r\n                        : finalStrike >= assetPrice,\r\n                    \"Invalid strike price\"\r\n                );\r\n                // make decimals consistent with oToken strike price decimals (10 ** 8)\r\n                return (\r\n                    finalStrike.mul(ORACLE_PRICE_MULTIPLIER).div(\r\n                        assetOracleMultiplier\r\n                    ),\r\n                    finalDelta\r\n                );\r\n            }\r\n\r\n            strike = isPut ? strike.sub(step) : strike.add(step);\r\n\r\n            prevDelta = currDelta;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Rounds to best delta value\r\n     * @param prevDelta is the delta of the previous strike price\r\n     * @param currDelta is delta of the current strike price\r\n     * @param targetDelta is the delta we are targeting\r\n     * @param isPut is whether its a put\r\n     * @return the best delta value\r\n     */\r\n    function _getBestDelta(\r\n        uint256 prevDelta,\r\n        uint256 currDelta,\r\n        uint256 targetDelta,\r\n        bool isPut\r\n    ) private pure returns (uint256) {\r\n        uint256 finalDelta;\r\n\r\n        // for tie breaks (ex: 0.05 <= 0.1 <= 0.15) round to higher strike price\r\n        // for calls and lower strike price for puts for deltas\r\n        if (isPut) {\r\n            uint256 upperBoundDiff = currDelta.sub(targetDelta);\r\n            uint256 lowerBoundDiff = targetDelta.sub(prevDelta);\r\n            finalDelta = lowerBoundDiff <= upperBoundDiff\r\n                ? prevDelta\r\n                : currDelta;\r\n        } else {\r\n            uint256 upperBoundDiff = prevDelta.sub(targetDelta);\r\n            uint256 lowerBoundDiff = targetDelta.sub(currDelta);\r\n            finalDelta = lowerBoundDiff <= upperBoundDiff\r\n                ? currDelta\r\n                : prevDelta;\r\n        }\r\n\r\n        return finalDelta;\r\n    }\r\n\r\n    /**\r\n     * @notice Rounds to best delta value\r\n     * @param finalDelta is the best delta value we found\r\n     * @param prevDelta is delta of the previous strike price\r\n     * @param strike is the strike of the previous iteration\r\n     * @param isPut is whether its a put\r\n     * @return the best strike\r\n     */\r\n    function _getBestStrike(\r\n        uint256 finalDelta,\r\n        uint256 prevDelta,\r\n        uint256 strike,\r\n        bool isPut\r\n    ) private view returns (uint256) {\r\n        if (finalDelta != prevDelta) {\r\n            return strike;\r\n        }\r\n        return isPut ? strike.add(step) : strike.sub(step);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets new delta value\r\n     * @param newDelta is the new delta value\r\n     */\r\n    function setDelta(uint256 newDelta) external onlyOwner {\r\n        require(newDelta > 0, \"!newDelta\");\r\n        require(newDelta <= DELTA_MULTIPLIER, \"newDelta cannot be more than 1\");\r\n        uint256 oldDelta = delta;\r\n        delta = newDelta;\r\n        emit DeltaSet(oldDelta, newDelta, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets new step value\r\n     * @param newStep is the new step value\r\n     */\r\n    function setStep(uint256 newStep) external onlyOwner {\r\n        require(newStep > 0, \"!newStep\");\r\n        uint256 oldStep = step;\r\n        step = newStep;\r\n        emit StepSet(oldStep, newStep, msg.sender);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/UniswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {ISwapRouter} from \"../interfaces/ISwapRouter.sol\";\r\nimport {IUniswapV3Factory} from \"../interfaces/IUniswapV3Factory.sol\";\r\nimport \"./Path.sol\";\r\n\r\nlibrary UniswapRouter {\r\n    using Path for bytes;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @notice Check if the path set for swap is valid\r\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\r\n     * @param validTokenIn is the contract address of the correct tokenIn\r\n     * @param validTokenOut is the contract address of the correct tokenOut\r\n     * @param uniswapFactory is the contract address of UniswapV3 factory\r\n     * @return isValidPath is whether the path is valid\r\n     */\r\n    function checkPath(\r\n        bytes memory swapPath,\r\n        address validTokenIn,\r\n        address validTokenOut,\r\n        address uniswapFactory\r\n    ) internal view returns (bool isValidPath) {\r\n        // Function checks if the tokenIn and tokenOut in the swapPath\r\n        // matches the validTokenIn and validTokenOut specified.\r\n        address tokenIn;\r\n        address tokenOut;\r\n        address tempTokenIn;\r\n        uint24 fee;\r\n        IUniswapV3Factory factory = IUniswapV3Factory(uniswapFactory);\r\n\r\n        // Return early if swapPath is below the bare minimum (43)\r\n        require(swapPath.length >= 43, \"Path too short\");\r\n        // Return early if swapPath is above the max (66)\r\n        // At worst we have 2 hops e.g. USDC > WETH > asset\r\n        require(swapPath.length <= 66, \"Path too long\");\r\n\r\n        // Decode the first pool in path\r\n        (tokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\r\n\r\n        // Check to factory if pool exists\r\n        require(\r\n            factory.getPool(tokenIn, tokenOut, fee) != address(0),\r\n            \"Pool does not exist\"\r\n        );\r\n\r\n        // Check next pool if multiple pools\r\n        while (swapPath.hasMultiplePools()) {\r\n            // Remove the first pool from path\r\n            swapPath = swapPath.skipToken();\r\n            // Check the next pool and update tokenOut\r\n            (tempTokenIn, tokenOut, fee) = swapPath.decodeFirstPool();\r\n\r\n            require(\r\n                factory.getPool(tokenIn, tokenOut, fee) != address(0),\r\n                \"Pool does not exist\"\r\n            );\r\n        }\r\n\r\n        return tokenIn == validTokenIn && tokenOut == validTokenOut;\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps assets by calling UniswapV3 router\r\n     * @param recipient is the address of recipient of the tokenOut\r\n     * @param tokenIn is the address of the token given to the router\r\n     * @param amountIn is the amount of tokenIn given to the router\r\n     * @param minAmountOut is the minimum acceptable amount of tokenOut received from swap\r\n     * @param router is the contract address of UniswapV3 router\r\n     * @param swapPath is the swap path e.g. encodePacked(tokenIn, poolFee, tokenOut)\r\n     * @return amountOut is the amount of tokenOut received from the swap\r\n     */\r\n    function swap(\r\n        address recipient,\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        address router,\r\n        bytes calldata swapPath\r\n    ) internal returns (uint256 amountOut) {\r\n        // Approve router to spend tokenIn\r\n        IERC20(tokenIn).safeApprove(router, amountIn);\r\n\r\n        // Swap assets using UniswapV3 router\r\n        ISwapRouter.ExactInputParams memory swapParams =\r\n            ISwapRouter.ExactInputParams({\r\n                recipient: recipient,\r\n                path: swapPath,\r\n                deadline: block.timestamp.add(10 minutes),\r\n                amountIn: amountIn,\r\n                amountOutMinimum: minAmountOut\r\n            });\r\n\r\n        amountOut = ISwapRouter(router).exactInput(swapParams);\r\n\r\n        return amountOut;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.8.4;\r\npragma abicoder v2;\r\n\r\n/// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountIn);\r\n}\r\n"
    },
    "contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\n// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\r\npragma solidity =0.8.4;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n}\r\n"
    },
    "contracts/libraries/Path.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\n// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\r\npragma solidity =0.8.4;\r\n\r\nimport \"./BytesLib.sol\";\r\n\r\n/// @title Functions for manipulating path data for multihop swaps\r\nlibrary Path {\r\n    using BytesLib for bytes;\r\n\r\n    /// @dev The length of the bytes encoded address\r\n    uint256 private constant ADDR_SIZE = 20;\r\n    /// @dev The length of the bytes encoded fee\r\n    uint256 private constant FEE_SIZE = 3;\r\n\r\n    /// @dev The offset of a single token address and pool fee\r\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\r\n    /// @dev The offset of an encoded pool key\r\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\r\n    /// @dev The minimum length of an encoding that contains 2 or more pools\r\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH =\r\n        POP_OFFSET + NEXT_OFFSET;\r\n\r\n    /// @notice Returns true iff the path contains two or more pools\r\n    /// @param path The encoded swap path\r\n    /// @return True if path contains two or more pools, otherwise false\r\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\r\n    }\r\n\r\n    /// @notice Returns the number of pools in the path\r\n    /// @param path The encoded swap path\r\n    /// @return The number of pools in the path\r\n    function numPools(bytes memory path) internal pure returns (uint256) {\r\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\r\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Decodes the first pool in path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return tokenA The first token of the given pool\r\n    /// @return tokenB The second token of the given pool\r\n    /// @return fee The fee level of the pool\r\n    function decodeFirstPool(bytes memory path)\r\n        internal\r\n        pure\r\n        returns (\r\n            address tokenA,\r\n            address tokenB,\r\n            uint24 fee\r\n        )\r\n    {\r\n        tokenA = path.toAddress(0);\r\n        fee = path.toUint24(ADDR_SIZE);\r\n        tokenB = path.toAddress(NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Gets the segment corresponding to the first pool in the path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return The segment containing all data necessary to target the first pool in the path\r\n    function getFirstPool(bytes memory path)\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        return path.slice(0, POP_OFFSET);\r\n    }\r\n\r\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\r\n    /// @param path The swap path\r\n    /// @return The remaining token + fee elements in the path\r\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity =0.8.4;\r\n\r\nlibrary BytesLib {\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n                case 0 {\r\n                    // Get a location of some free memory and store it in tempBytes as\r\n                    // Solidity does for memory variables.\r\n                    tempBytes := mload(0x40)\r\n\r\n                    // The first word of the slice result is potentially a partial\r\n                    // word read from the original array. To read it, we calculate\r\n                    // the length of that partial word and start copying that many\r\n                    // bytes into the array. The first word we copy will start with\r\n                    // data we don't care about, but the last `lengthmod` bytes will\r\n                    // land at the beginning of the contents of the new array. When\r\n                    // we're done copying, we overwrite the full first word with\r\n                    // the actual length of the slice.\r\n                    let lengthmod := and(_length, 31)\r\n\r\n                    // The multiplication in the next line is necessary\r\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                    // the following copy loop was copying the origin's length\r\n                    // and then ending prematurely not copying everything it should.\r\n                    let mc := add(\r\n                        add(tempBytes, lengthmod),\r\n                        mul(0x20, iszero(lengthmod))\r\n                    )\r\n                    let end := add(mc, _length)\r\n\r\n                    for {\r\n                        // The multiplication in the next line has the same exact purpose\r\n                        // as the one above.\r\n                        let cc := add(\r\n                            add(\r\n                                add(_bytes, lengthmod),\r\n                                mul(0x20, iszero(lengthmod))\r\n                            ),\r\n                            _start\r\n                        )\r\n                    } lt(mc, end) {\r\n                        mc := add(mc, 0x20)\r\n                        cc := add(cc, 0x20)\r\n                    } {\r\n                        mstore(mc, mload(cc))\r\n                    }\r\n\r\n                    mstore(tempBytes, _length)\r\n\r\n                    //update free-memory pointer\r\n                    //allocating the array padded to 32 bytes like the compiler does now\r\n                    mstore(0x40, and(add(mc, 31), not(31)))\r\n                }\r\n                //if we want a zero-length slice let's just return a zero-length array\r\n                default {\r\n                    tempBytes := mload(0x40)\r\n                    //zero out the 32 bytes slice we are about to return\r\n                    //we need to do it because Solidity does not garbage collect\r\n                    mstore(tempBytes, 0)\r\n\r\n                    mstore(0x40, add(tempBytes, 0x20))\r\n                }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(\r\n                mload(add(add(_bytes, 0x20), _start)),\r\n                0x1000000000000000000000000\r\n            )\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint24(bytes memory _bytes, uint256 _start)\r\n        internal\r\n        pure\r\n        returns (uint24)\r\n    {\r\n        require(_bytes.length >= _start + 3, \"toUint24_outOfBounds\");\r\n        uint24 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x3), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n}\r\n"
    },
    "contracts/storage/RibbonDeltaVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\nimport {IRibbonThetaVault} from \"../interfaces/IRibbonThetaVault.sol\";\r\nimport {Vault} from \"../libraries/Vault.sol\";\r\n\r\nabstract contract RibbonDeltaVaultStorageV1 {\r\n    // Ribbon counterparty theta vault\r\n    IRibbonThetaVault public counterpartyThetaVault;\r\n    // % of funds to be used for weekly option purchase\r\n    uint256 public optionAllocation;\r\n    // Delta vault equivalent of lockedAmount\r\n    uint256 public balanceBeforePremium;\r\n    // User Id of delta vault in latest gnosis auction\r\n    Vault.AuctionSellOrder public auctionSellOrder;\r\n}\r\n\r\nabstract contract RibbonDeltaVaultStorageV2 {\r\n    // Amount locked for scheduled withdrawals last week;\r\n    uint128 public lastQueuedWithdrawAmount;\r\n}\r\n\r\n// We are following Compound's method of upgrading new contract implementations\r\n// When we need to add new storage variables, we create a new version of RibbonDeltaVaultStorage\r\n// e.g. RibbonDeltaVaultStorage<versionNumber>, so finally it would look like\r\n// contract RibbonDeltaVaultStorage is RibbonDeltaVaultStorageV1, RibbonDeltaVaultStorageV2\r\nabstract contract RibbonDeltaVaultStorage is\r\n    RibbonDeltaVaultStorageV1,\r\n    RibbonDeltaVaultStorageV2\r\n{\r\n\r\n}\r\n"
    },
    "contracts/tests/MockLiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    SafeERC20\r\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract MockLiquidityGauge {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public lp_token;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    constructor(address _lp_token) {\r\n        lp_token = _lp_token;\r\n    }\r\n\r\n    function deposit(\r\n        uint256 _value,\r\n        address _addr,\r\n        bool\r\n    ) external {\r\n        if (_value != 0) {\r\n            totalSupply += _value;\r\n            balanceOf[_addr] += _value;\r\n\r\n            IERC20(lp_token).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _value\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/vendor/upgrades/UpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport './Proxy.sol';\r\nimport '@openzeppelin/contracts/utils/Address.sol';\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/vendor/upgrades/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive () payable external {\r\n    // _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n"
    },
    "contracts/vendor/upgrades/AdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.8;\r\n\r\nimport './UpgradeabilityProxy.sol';\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param admin_ Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address admin_, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(admin_);\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return adminAddress The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address adminAddress) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return implementationAddress The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address implementationAddress) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal override virtual {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n"
    },
    "contracts/utils/ManualStrikeSelection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ManualStrikeSelection is Ownable {\r\n    /// @dev Selected strike price\r\n    uint256 public strikePrice;\r\n\r\n    /// @dev Delta for options strike price selection. 1 is 10000 (10**4)\r\n    uint256 public constant delta = 1000;\r\n\r\n    /**\r\n     * @notice Sets the strike price, only callable by the owner\r\n     * @param _strikePrice is the strike price of the option\r\n     */\r\n    function setStrikePrice(uint256 _strikePrice) external onlyOwner {\r\n        strikePrice = _strikePrice;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the strike price satisfying the delta value\r\n     * given the expiry timestamp and whether option is call or put\r\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\r\n     * @return newDelta is the delta of the option given its parameters\r\n     */\r\n    function getStrikePrice(uint256, bool)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (strikePrice, delta);\r\n    }\r\n}\r\n"
    },
    "contracts/tests/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockERC20 is ERC20 {\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {}\r\n\r\n    function mint(address to, uint256 value) external {\r\n        _mint(to, value);\r\n    }\r\n\r\n    function burn(address from, uint256 value) external {\r\n        _burn(from, value);\r\n    }\r\n}\r\n"
    },
    "contracts/oracles/OpynOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\nimport {IOracle} from \"../interfaces/GammaInterface.sol\";\r\nimport {IPriceOracle} from \"../interfaces/IPriceOracle.sol\";\r\n\r\ncontract OpynOracle is IPriceOracle {\r\n    /// @dev base decimals\r\n    uint256 public constant override decimals = 8;\r\n\r\n    /// @notice Gamma Protocol oracle\r\n    IOracle public immutable oracle;\r\n\r\n    /// @notice Asset to get the price of\r\n    address public immutable asset;\r\n\r\n    constructor(address _oracle, address _asset) {\r\n        require(_oracle != address(0), \"!oracle\");\r\n        require(_asset != address(0), \"!asset\");\r\n\r\n        oracle = IOracle(_oracle);\r\n        asset = _asset;\r\n    }\r\n\r\n    function latestAnswer() external view override returns (uint256) {\r\n        return oracle.getPrice(asset);\r\n    }\r\n}\r\n"
    },
    "contracts/tests/TestShareMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport {ShareMath} from \"../libraries/ShareMath.sol\";\r\n\r\ncontract TestShareMath {\r\n    function assetToShares(\r\n        uint256 assetAmount,\r\n        uint256 pps,\r\n        uint256 decimals\r\n    ) external pure returns (uint256) {\r\n        return ShareMath.assetToShares(assetAmount, pps, decimals);\r\n    }\r\n\r\n    function sharesToAsset(\r\n        uint256 shares,\r\n        uint256 pps,\r\n        uint256 decimals\r\n    ) external pure returns (uint256) {\r\n        return ShareMath.sharesToAsset(shares, pps, decimals);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}