{
  "address": "0x0FF7C2D2a935d31D354bF7ea7FDaD39DE0141a5A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gammaController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marginPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisEasyAuction",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "AuctionDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CloseShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auctioningToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionCounter",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "InitiateGnosisAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InstantWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "NewOptionStrikeSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "OpenShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumDiscount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "PremiumDiscountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAMMA_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GNOSIS_EASY_AUCTION",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OTOKEN_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRemainingOTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitAndClose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOtokenPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentQueuedWithdrawShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numRounds",
          "type": "uint256"
        }
      ],
      "name": "initRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_keeper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_optionsPremiumPricer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_strikeSelection",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_premiumDiscount",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "_auctionDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct RibbonThetaVault.InitParams",
          "name": "_initParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastStrikeOverrideRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOptionReadyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionAuctionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionState",
      "outputs": [
        {
          "internalType": "address",
          "name": "nextOption",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOption",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nextOptionReadyAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionsPremiumPricer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionsPurchaseQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overriddenStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollToNextOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellOptionsToQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "setAuctionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLiquidityGauge",
          "type": "address"
        }
      ],
      "name": "setLiquidityGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "setMinPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOptionsPremiumPricer",
          "type": "address"
        }
      ],
      "name": "setOptionsPremiumPricer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOptionsPurchaseQueue",
          "type": "address"
        }
      ],
      "name": "setOptionsPurchaseQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "setPremiumDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "strikePrice",
          "type": "uint128"
        }
      ],
      "name": "setStrikePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrikeSelection",
          "type": "address"
        }
      ],
      "name": "setStrikeSelection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVaultPauser",
          "type": "address"
        }
      ],
      "name": "setVaultPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikeSelection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint56",
          "name": "minimumSupply",
          "type": "uint56"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawInstantly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe9c57bb4c7962ad16f7626869fad4fe10e685ceda47facfce820f2aee5e20c3",
  "receipt": {
    "to": null,
    "from": "0x691c87dc570563D1D0AD7Fd0bb099ED367858863",
    "contractAddress": "0x0FF7C2D2a935d31D354bF7ea7FDaD39DE0141a5A",
    "transactionIndex": 66,
    "gasUsed": "5260200",
    "logsBloom": "0x
    "blockHash": "0x250f34185f7cd356bf1a7b044781113b54bf62901852e4007b9be7015a4dc0bf",
    "transactionHash": "0xfe9c57bb4c7962ad16f7626869fad4fe10e685ceda47facfce820f2aee5e20c3",
    "logs": [],
    "blockNumber": 14972180,
    "cumulativeGasUsed": "10504691",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0x4114b7C04bBbA682130cae2bA26FC5d2473B4Ddc",
    "0x4bec71A4Ac41eE9761440F6921DD17bA1C1213B1",
    "0x3c212a044760de5a529b3ba59363ddeccc2210be",
    "0x0b7fFc1f4AD541A4Ed16b40D8c37f0929158D101"
  ],
  "solcInputHash": "9be2afd118232434b07255c894c5e6e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gammaController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisEasyAuction\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CloseShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"InitiateGnosisAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InstantWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"NewOptionStrikeSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"OpenShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"PremiumDiscountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMMA_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNOSIS_EASY_AUCTION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTOKEN_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRemainingOTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitAndClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOtokenPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentQueuedWithdrawShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numRounds\",\"type\":\"uint256\"}],\"name\":\"initRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strikeSelection\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_premiumDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct RibbonThetaVault.InitParams\",\"name\":\"_initParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStrikeOverrideRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOptionReadyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionAuctionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nextOption\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOption\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionReadyAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPurchaseQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overriddenStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollToNextOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOptionsToQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOptionsPremiumPricer\",\"type\":\"address\"}],\"name\":\"setOptionsPremiumPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOptionsPurchaseQueue\",\"type\":\"address\"}],\"name\":\"setOptionsPurchaseQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"setPremiumDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"}],\"name\":\"setStrikePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrikeSelection\",\"type\":\"address\"}],\"name\":\"setStrikeSelection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVaultPauser\",\"type\":\"address\"}],\"name\":\"setVaultPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikeSelection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_gammaController\":\"is the contract address for opyn actions\",\"_gnosisEasyAuction\":\"is the contract address that facilitates gnosis auctions\",\"_marginPool\":\"is the contract address for providing collateral to opyn\",\"_oTokenFactory\":\"is the contract address for minting new opyn option types (strikes, asset, expiry)\",\"_usdc\":\"is the USDC contract\",\"_weth\":\"is the Wrapped Ether contract\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\"}},\"depositFor(uint256,address)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"creditor\":\"is the address that can claim/withdraw deposited amount\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initRounds(uint256)\":{\"params\":{\"numRounds\":\"is the number of rounds to initialize in the map\"}},\"initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256),(bool,uint8,address,address,uint56,uint104))\":{\"params\":{\"_initParams\":\"is the struct with vault initialization parameters\",\"_vaultParams\":\"is the struct with vault general data\"}},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverTokens(address,address)\":{\"params\":{\"recipient\":\"is the recipient of the recovered tokens\",\"token\":\"is the ERC20 token to recover from the vault\"}},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAuctionDuration(uint256)\":{\"params\":{\"newAuctionDuration\":\"is the auction duration\"}},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setLiquidityGauge(address)\":{\"params\":{\"newLiquidityGauge\":\"is the address of the new liquidityGauge contract\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setMinPrice(uint256)\":{\"params\":{\"minPrice\":\"is the new oToken Premium in the units of 10**18\"}},\"setNewKeeper(address)\":{\"params\":{\"newKeeper\":\"is the address of the new keeper\"}},\"setOptionsPremiumPricer(address)\":{\"params\":{\"newOptionsPremiumPricer\":\"is the address of the new strike selection contract\"}},\"setOptionsPurchaseQueue(address)\":{\"params\":{\"newOptionsPurchaseQueue\":\"is the address of the new optionsPurchaseQueue contract\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"setPremiumDiscount(uint256)\":{\"params\":{\"newPremiumDiscount\":\"is the premium discount\"}},\"setStrikePrice(uint128)\":{\"params\":{\"strikePrice\":\"is the strike price of the new oTokens (decimals = 8)\"}},\"setStrikeSelection(address)\":{\"params\":{\"newStrikeSelection\":\"is the address of the new strike selection contract\"}},\"setVaultPauser(address)\":{\"params\":{\"newVaultPauser\":\"is the address of the new vaultPauser contract\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"stake(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to stake\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawInstantly(uint256)\":{\"params\":{\"amount\":\"is the amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELAY()\":{\"notice\":\"Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\"},\"OTOKEN_FACTORY()\":{\"notice\":\"oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\"},\"PERIOD()\":{\"notice\":\"7 day period between each options sale.\"},\"USDC()\":{\"notice\":\"USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"},\"WETH()\":{\"notice\":\"WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"},\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"burnRemainingOTokens()\":{\"notice\":\"Burn the remaining oTokens left over from gnosis auction.\"},\"commitAndClose()\":{\"notice\":\"Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious.\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"constructor\":{\"notice\":\"Initializes the contract with immutable variables\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"deposit(uint256)\":{\"notice\":\"Deposits the `asset` from msg.sender.\"},\"depositETH()\":{\"notice\":\"Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\"},\"depositFor(uint256,address)\":{\"notice\":\"Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initRounds(uint256)\":{\"notice\":\"Helper function that helps to save gas for writing values into the roundPricePerShare map.         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\"},\"initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256),(bool,uint8,address,address,uint56,uint104))\":{\"notice\":\"Initializes the OptionVault contract with storage variables.\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"keeper()\":{\"notice\":\"role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"optionState()\":{\"notice\":\"Vault's state of the options sold and the timelocked option\"},\"pausePosition()\":{\"notice\":\"pause a user's vault position\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"recoverTokens(address,address)\":{\"notice\":\"Recovery function that returns an ERC20 token to the recipient\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"rollToNextOption()\":{\"notice\":\"Rolls the vault's funds into a new short position.\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"sellOptionsToQueue()\":{\"notice\":\"Sell the allocated options to the purchase queue post auction settlement\"},\"setAuctionDuration(uint256)\":{\"notice\":\"Sets the new auction duration\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setLiquidityGauge(address)\":{\"notice\":\"Sets the new liquidityGauge contract for this vault\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setMinPrice(uint256)\":{\"notice\":\"Sets oToken Premium\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"},\"setOptionsPremiumPricer(address)\":{\"notice\":\"Sets the new options premium pricer contract\"},\"setOptionsPurchaseQueue(address)\":{\"notice\":\"Sets the new optionsPurchaseQueue contract for this vault\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"setPremiumDiscount(uint256)\":{\"notice\":\"Sets the new discount on premiums for options we are selling\"},\"setStrikePrice(uint128)\":{\"notice\":\"Optionality to set strike price manually\"},\"setStrikeSelection(address)\":{\"notice\":\"Sets the new strike selection contract\"},\"setVaultPauser(address)\":{\"notice\":\"Sets the new Vault Pauser contract for this vault\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"stake(uint256)\":{\"notice\":\"Stakes a users vault shares\"},\"startAuction()\":{\"notice\":\"Initiate the gnosis auction.\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts locked into a short position\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawInstantly(uint256)\":{\"notice\":\"Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"notice\":\"UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage. RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/BaseVaults/RibbonThetaVault.sol\":\"RibbonThetaVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\\ninterface IOracle {\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function updateAssetPricer(address _asset, address _pricer) external;\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x148930e8fd36c64b8dbe75c2ba71117eaf4a6da5a019e08f3ff8161b274785ba\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x226639ee48018ec78891a829816799c9b9f6bbec7e84c4ca43cdc7dc8a07628f\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface ILiquidityGauge {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        bool _claim_rewards\\n    ) external;\\n\\n    function withdraw(uint256 _value) external;\\n}\\n\",\"keccak256\":\"0x0865aecb52ae4467761aa81e48957cde1c5486e270b4a671f8ff07861b801105\",\"license\":\"MIT\"},\"contracts/interfaces/IOptionsPurchaseQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IOptionsPurchaseQueue {\\n    /**\\n     * @dev Contains purchase request info\\n     * @param optionsAmount Amount of options to purchase\\n     * @param premiums Total premiums the buyer is spending to purchase the options (optionsAmount * ceilingPrice)\\n     *  We need to track the premiums here since the ceilingPrice could change between the time the purchase was\\n     *  requested and when the options are sold\\n     * @param buyer The buyer requesting this purchase\\n     */\\n    struct Purchase {\\n        uint128 optionsAmount; // Slot 0\\n        uint128 premiums;\\n        address buyer; // Slot 1\\n    }\\n\\n    function purchases(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint128,\\n            uint128,\\n            address\\n        );\\n\\n    function totalOptionsAmount(address) external view returns (uint256);\\n\\n    function vaultAllocatedOptions(address) external view returns (uint256);\\n\\n    function whitelistedBuyer(address) external view returns (bool);\\n\\n    function minPurchaseAmount(address) external view returns (uint256);\\n\\n    function ceilingPrice(address) external view returns (uint256);\\n\\n    function getPurchases(address vault)\\n        external\\n        view\\n        returns (Purchase[] memory);\\n\\n    function getPremiums(address vault, uint256 optionsAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getOptionsAllocation(address vault, uint256 allocatedOptions)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requestPurchase(address vault, uint256 optionsAmount)\\n        external\\n        returns (uint256);\\n\\n    function allocateOptions(uint256 allocatedOptions)\\n        external\\n        returns (uint256);\\n\\n    function sellToBuyers(uint256 settlementPrice) external returns (uint256);\\n\\n    function cancelAllPurchases(address vault) external;\\n\\n    function addWhitelist(address buyer) external;\\n\\n    function removeWhitelist(address buyer) external;\\n\\n    function setCeilingPrice(address vault, uint256 price) external;\\n\\n    function setMinPurchaseAmount(address vault, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3033ae23c42a0da011d8e43d911ec7d999ccbc18a73e24098dfd202a71000086\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonVault {\\n    function deposit(uint256 amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function cap() external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n}\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function optionId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd9ffea587ce992000d8a9f8d4b1bc8c40008633c35121b3d11ab8c6a7dd5ecbc\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function roundPricePerShare(uint256) external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function initiateWithdraw(uint256 numShares) external;\\n\\n    function completeWithdraw() external;\\n\\n    function maxRedeem() external;\\n\\n    function depositYieldTokenFor(uint256 amount, address creditor) external;\\n\\n    function symbol() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x864d0ad28b9e301865f3ed7c5b561c1035e607c689f42023a91959fd41548c16\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IVaultPauser {\\n    /// @notice pause vault position of an account with max amount\\n    /// @param _account the address of user\\n    /// @param _amount amount of shares\\n    function pausePosition(address _account, uint256 _amount) external;\\n\\n    /// @notice resume vault position of an account with max amount\\n    /// @param _vaultAddress the address of vault\\n    function resumePosition(address _vaultAddress) external;\\n}\\n\",\"keccak256\":\"0x8327eccf3e134700dcf180baa109d55e2225fd3fa5bdfe0dcfc232973c7aa185\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x027f79659aea02845423eb96cfc4f926efb2214745463e3cbcfe4e4c24a065d9\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 oTokenPremium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocation;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\n        require(oTokenSellAmount > 0, \\\"No otokens to sell\\\");\\n\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            DSMath.wmul(\\n                oTokenSellAmount.mul(10**10),\\n                auctionDetails.oTokenPremium\\n            );\\n\\n        minBidAmount = auctionDetails.assetDecimals > 18\\n            ? minBidAmount.mul(10**(auctionDetails.assetDecimals.sub(18)))\\n            : minBidAmount.div(\\n                10**(uint256(18).sub(auctionDetails.assetDecimals))\\n            );\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of oToken we minted and are selling\\n            auctionDetails.oTokenAddress,\\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\\n            auctionDetails.asset,\\n            // orders can be cancelled at any time during the auction\\n            auctionEnd,\\n            // order will last for `duration`\\n            auctionEnd,\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.oTokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            .mul(bidDetails.optionAllocation)\\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\\n            .div(bidDetails.optionPremium)\\n            .div(10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.oTokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n\\n        return (sellAmount, buyAmount, userId);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address oTokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but otokens will be transferred to gnosis.\\n        uint256 oTokenSellAmount =\\n            IERC20(oTokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        return oTokenSellAmount;\\n    }\\n\\n    function getOTokenPremiumInStables(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated USDC for both call and put options\\n        uint256 optionPremium =\\n            premiumPricer.getPremiumInStables(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xfbe9e9b0da571d9b83545d3ae71827da0f91bd1c68c6b68955907e6e967e4972\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x90bc4b56ee48f314d1e326903bdb2926bed143fa4e6867a7d44975503106bf56\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x3119c096a02be6137015be605caf65412e0dd4b7df5f25e73bab4f88fddfa5d6\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOptionsPurchaseQueue} from \\\"../interfaces/IOptionsPurchaseQueue.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\n\\nlibrary VaultLifecycle {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverrideRound;\\n        uint256 overriddenStrikePrice;\\n        address strikeSelection;\\n        address optionsPremiumPricer;\\n        uint256 premiumDiscount;\\n    }\\n\\n    /// @notice Default maximum option allocation for the queue (50%)\\n    uint256 internal constant QUEUE_OPTION_ALLOCATION = 5000;\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return otokenAddress is the address of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry = getNextExpiry(closeParams.currentOption);\\n\\n        IStrikeSelection selection =\\n            IStrikeSelection(closeParams.strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        return (otokenAddress, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param decimals is the decimals of the asset\\n     * @param totalBalance is the vaults total balance of the asset\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n        uint256 currentQueuedWithdrawShares;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        // Deduct older queued withdraws so we don't charge fees on them\\n        uint256 balanceForVaultFees =\\n            currentBalance.sub(params.lastQueuedWithdrawAmount);\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycle\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance.sub(totalVaultFee);\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply.sub(lastQueuedWithdrawShares),\\n                currentBalance.sub(params.lastQueuedWithdrawAmount),\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount.add(\\n                ShareMath.sharesToAsset(\\n                    params.currentQueuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                )\\n            );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n        }\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\n                .mul(10**18) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n\\n            if (collateralDecimals > 8) {\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n                if (mintAmount > scaleBy) {\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                }\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param oldOption is the address of the old option\\n     * @param asset is the address of the vault's asset\\n     * @return amount of asset received by exercising the option\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param currentOption is the address of the current option\\n     * @return amount of collateral redeemed by burning otokens\\n     */\\n    function burnOtokens(address gammaController, address currentOption)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 numOTokensToBurn =\\n            IERC20(currentOption).balanceOf(address(this));\\n\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\n\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning `amount` of oTokens from the ribbon vault,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            numOTokensToBurn, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\n                vault.shortAmounts[0]\\n            ), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance.sub(pendingAmount)\\n                : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? lockedBalanceSansPending\\n                    .sub(lastLockedAmount)\\n                    .mul(performanceFeePercent)\\n                    .div(100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\\n                    100 * Vault.FEE_MULTIPLIER\\n                )\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrice is the strike price of the option\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return the address of the option\\n     */\\n    function getOrDeployOtoken(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(\\n            otoken,\\n            vaultParams,\\n            collateralAsset,\\n            closeParams.USDC,\\n            closeParams.delay\\n        );\\n\\n        return otoken;\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) external view returns (uint256) {\\n        return\\n            _getOTokenPremium(\\n                oTokenAddress,\\n                optionsPremiumPricer,\\n                premiumDiscount\\n            );\\n    }\\n\\n    function _getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        uint256 optionPremium =\\n            premiumPricer.getPremium(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n        require(optionPremium > 0, \\\"!optionPremium\\\");\\n\\n        return optionPremium;\\n    }\\n\\n    /**\\n     * @notice Starts the gnosis auction\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\n     * @return the auction id of the newly created auction\\n     */\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Settles the gnosis auction\\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\\n     * @param auctionID is the auction ID of the gnosis easy auction\\n     */\\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\\n        internal\\n    {\\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\\n    }\\n\\n    /**\\n     * @notice Places a bid in an auction\\n     * @param bidDetails is the struct with all the details of the\\n      bid including the auction's id and how much to bid\\n     */\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\n        external\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        return GnosisAuction.placeBid(bidDetails);\\n    }\\n\\n    /**\\n     * @notice Claims the oTokens belonging to the vault\\n     * @param auctionSellOrder is the sell order of the bid\\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\\n     holding custody to the funds\\n     * @param counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     */\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) external {\\n        GnosisAuction.claimAuctionOtokens(\\n            auctionSellOrder,\\n            gnosisEasyAuction,\\n            counterpartyThetaVault\\n        );\\n    }\\n\\n    /**\\n     * @notice Allocates the vault's minted options to the OptionsPurchaseQueue contract\\n     * @dev Skipped if the optionsPurchaseQueue doesn't exist\\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\\n     * @param option is the minted option\\n     * @param optionsAmount is the amount of options minted\\n     * @param optionAllocation is the maximum % of options to allocate towards the purchase queue (will only allocate\\n     *  up to the amount that is on the queue)\\n     * @return allocatedOptions is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\\n     */\\n    function allocateOptions(\\n        address optionsPurchaseQueue,\\n        address option,\\n        uint256 optionsAmount,\\n        uint256 optionAllocation\\n    ) external returns (uint256 allocatedOptions) {\\n        // Skip if optionsPurchaseQueue is address(0)\\n        if (optionsPurchaseQueue != address(0)) {\\n            allocatedOptions = optionsAmount.mul(optionAllocation).div(\\n                100 * Vault.OPTION_ALLOCATION_MULTIPLIER\\n            );\\n            allocatedOptions = IOptionsPurchaseQueue(optionsPurchaseQueue)\\n                .getOptionsAllocation(address(this), allocatedOptions);\\n\\n            if (allocatedOptions != 0) {\\n                IERC20(option).approve(optionsPurchaseQueue, allocatedOptions);\\n                IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\\n                    allocatedOptions\\n                );\\n            }\\n        }\\n\\n        return allocatedOptions;\\n    }\\n\\n    /**\\n     * @notice Sell the allocated options to the purchase queue post auction settlement\\n     * @dev Reverts if the auction hasn't settled yet\\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\\n     * @return totalPremiums Total premiums earnt by the vault\\n     */\\n    function sellOptionsToQueue(\\n        address optionsPurchaseQueue,\\n        address gnosisEasyAuction,\\n        uint256 optionAuctionID\\n    ) external returns (uint256) {\\n        uint256 settlementPrice =\\n            getAuctionSettlementPrice(gnosisEasyAuction, optionAuctionID);\\n        require(settlementPrice != 0, \\\"!settlementPrice\\\");\\n\\n        return\\n            IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\\n                settlementPrice\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the settlement price of a settled auction\\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\\n     * @return settlementPrice Auction settlement price\\n     */\\n    function getAuctionSettlementPrice(\\n        address gnosisEasyAuction,\\n        uint256 optionAuctionID\\n    ) public view returns (uint256) {\\n        bytes32 clearingPriceOrder =\\n            IGnosisAuction(gnosisEasyAuction)\\n                .auctionData(optionAuctionID)\\n                .clearingPriceOrder;\\n\\n        if (clearingPriceOrder == bytes32(0)) {\\n            // Current auction hasn't settled yet\\n            return 0;\\n        } else {\\n            // We decode the clearingPriceOrder to find the auction settlement price\\n            // settlementPrice = clearingPriceOrder.sellAmount / clearingPriceOrder.buyAmount\\n            return\\n                (10**Vault.OTOKEN_DECIMALS)\\n                    .mul(\\n                    uint96(uint256(clearingPriceOrder)) // sellAmount\\n                )\\n                    .div(\\n                    uint96(uint256(clearingPriceOrder) >> 96) // buyAmount\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param owner is the owner of the vault with critical permissions\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        address owner,\\n        address keeper,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next option expiry timestamp\\n     * @param currentOption is the otoken address that the vault is currently writing\\n     */\\n    function getNextExpiry(address currentOption)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // uninitialized state\\n        if (currentOption == address(0)) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\\n\\n        // After options expiry if no options are written for >1 week\\n        // We need to give the ability continue writing options\\n        if (block.timestamp > currentExpiry + 7 days) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        return getNextFriday(currentExpiry);\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param timestamp is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (timestamp >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n}\\n\",\"keccak256\":\"0xfe813149d5acf5f051ca63e486fa2f613a894be5d6448d9deb76c96959c28926\",\"license\":\"MIT\"},\"contracts/storage/RibbonThetaVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nabstract contract RibbonThetaVaultStorageV1 {\\n    // Logic contract used to price options\\n    address public optionsPremiumPricer;\\n    // Logic contract used to select strike prices\\n    address public strikeSelection;\\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\\n    uint256 public premiumDiscount;\\n    // Current oToken premium\\n    uint256 public currentOtokenPremium;\\n    // Last round id at which the strike was manually overridden\\n    uint16 public lastStrikeOverrideRound;\\n    // Price last overridden strike set to\\n    uint256 public overriddenStrikePrice;\\n    // Auction duration\\n    uint256 public auctionDuration;\\n    // Auction id of current option\\n    uint256 public optionAuctionID;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV3 {\\n    // DEPRECATED: Auction will be denominated in USDC if true\\n    bool private _isUsdcAuction;\\n    // DEPRECATED: Path for swaps\\n    bytes private _swapPath;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV4 {\\n    // LiquidityGauge contract for the vault\\n    address public liquidityGauge;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV5 {\\n    // OptionsPurchaseQueue contract for selling options\\n    address public optionsPurchaseQueue;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV6 {\\n    // Queued withdraw shares for the current round\\n    uint256 public currentQueuedWithdrawShares;\\n}\\n\\nabstract contract RibbonThetaVaultStorageV7 {\\n    // Vault Pauser Contract for the vault\\n    address public vaultPauser;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\\nabstract contract RibbonThetaVaultStorage is\\n    RibbonThetaVaultStorageV1,\\n    RibbonThetaVaultStorageV2,\\n    RibbonThetaVaultStorageV3,\\n    RibbonThetaVaultStorageV4,\\n    RibbonThetaVaultStorageV5,\\n    RibbonThetaVaultStorageV6,\\n    RibbonThetaVaultStorageV7\\n{\\n\\n}\\n\",\"keccak256\":\"0x7b5655f98746dacb66c55371c9289b33def3567fd7037e89a7f87565a416168f\",\"license\":\"MIT\"},\"contracts/vaults/BaseVaults/RibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {\\n    RibbonThetaVaultStorage\\n} from \\\"../../storage/RibbonThetaVaultStorage.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {ILiquidityGauge} from \\\"../../interfaces/ILiquidityGauge.sol\\\";\\nimport {IVaultPauser} from \\\"../../interfaces/IVaultPauser.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\\n */\\ncontract RibbonThetaVault is RibbonVault, RibbonThetaVaultStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable OTOKEN_FACTORY;\\n\\n    // The minimum duration for an option auction.\\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenShort(\\n        address indexed options,\\n        uint256 depositAmount,\\n        address indexed manager\\n    );\\n\\n    event CloseShort(\\n        address indexed options,\\n        uint256 withdrawAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\n\\n    event PremiumDiscountSet(\\n        uint256 premiumDiscount,\\n        uint256 newPremiumDiscount\\n    );\\n\\n    event AuctionDurationSet(\\n        uint256 auctionDuration,\\n        uint256 newAuctionDuration\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    /************************************************\\n     *  STRUCTS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initialization parameters for the vault.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\n     * @param _auctionDuration is the duration of the gnosis auction\\n     */\\n    struct InitParams {\\n        address _owner;\\n        address _keeper;\\n        address _feeRecipient;\\n        uint256 _managementFee;\\n        uint256 _performanceFee;\\n        string _tokenName;\\n        string _tokenSymbol;\\n        address _optionsPremiumPricer;\\n        address _strikeSelection;\\n        uint32 _premiumDiscount;\\n        uint256 _auctionDuration;\\n    }\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction\\n        )\\n    {\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        OTOKEN_FACTORY = _oTokenFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _initParams is the struct with vault initialization parameters\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        InitParams calldata _initParams,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _initParams._owner,\\n            _initParams._keeper,\\n            _initParams._feeRecipient,\\n            _initParams._managementFee,\\n            _initParams._performanceFee,\\n            _initParams._tokenName,\\n            _initParams._tokenSymbol,\\n            _vaultParams\\n        );\\n        require(\\n            _initParams._optionsPremiumPricer != address(0),\\n            \\\"!_optionsPremiumPricer\\\"\\n        );\\n        require(\\n            _initParams._strikeSelection != address(0),\\n            \\\"!_strikeSelection\\\"\\n        );\\n        require(\\n            _initParams._premiumDiscount > 0 &&\\n                _initParams._premiumDiscount <\\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"!_premiumDiscount\\\"\\n        );\\n        require(\\n            _initParams._auctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"!_auctionDuration\\\"\\n        );\\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\\n        strikeSelection = _initParams._strikeSelection;\\n        premiumDiscount = _initParams._premiumDiscount;\\n        auctionDuration = _initParams._auctionDuration;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new discount on premiums for options we are selling\\n     * @param newPremiumDiscount is the premium discount\\n     */\\n    function setPremiumDiscount(uint256 newPremiumDiscount)\\n        external\\n        onlyKeeper\\n    {\\n        require(\\n            newPremiumDiscount > 0 &&\\n                newPremiumDiscount <= 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"Invalid discount\\\"\\n        );\\n\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\n\\n        premiumDiscount = newPremiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the new auction duration\\n     * @param newAuctionDuration is the auction duration\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\n        require(\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"Invalid auction duration\\\"\\n        );\\n\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\n\\n        auctionDuration = newAuctionDuration;\\n    }\\n\\n    /**\\n     * @notice Sets the new strike selection contract\\n     * @param newStrikeSelection is the address of the new strike selection contract\\n     */\\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\\n        require(newStrikeSelection != address(0), \\\"!newStrikeSelection\\\");\\n        strikeSelection = newStrikeSelection;\\n    }\\n\\n    /**\\n     * @notice Sets the new options premium pricer contract\\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\\n     */\\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newOptionsPremiumPricer != address(0),\\n            \\\"!newOptionsPremiumPricer\\\"\\n        );\\n        optionsPremiumPricer = newOptionsPremiumPricer;\\n    }\\n\\n    /**\\n     * @notice Optionality to set strike price manually\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\n     */\\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\n        overriddenStrikePrice = strikePrice;\\n        lastStrikeOverrideRound = vaultState.round;\\n    }\\n\\n    /**\\n     * @notice Sets the new liquidityGauge contract for this vault\\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\\n     */\\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\\n        liquidityGauge = newLiquidityGauge;\\n    }\\n\\n    /**\\n     * @notice Sets the new optionsPurchaseQueue contract for this vault\\n     * @param newOptionsPurchaseQueue is the address of the new optionsPurchaseQueue contract\\n     */\\n    function setOptionsPurchaseQueue(address newOptionsPurchaseQueue)\\n        external\\n        onlyOwner\\n    {\\n        optionsPurchaseQueue = newOptionsPurchaseQueue;\\n    }\\n\\n    /**\\n     * @notice Sets oToken Premium\\n     * @param minPrice is the new oToken Premium in the units of 10**18\\n     */\\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\\n        require(minPrice > 0, \\\"!minPrice\\\");\\n        currentOtokenPremium = minPrice;\\n    }\\n\\n    /**\\n     * @notice Sets the new Vault Pauser contract for this vault\\n     * @param newVaultPauser is the address of the new vaultPauser contract\\n     */\\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\\n        vaultPauser = newVaultPauser;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw\\n     */\\n    function withdrawInstantly(uint256 amount) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending).sub(amount)\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n\\n        transferAsset(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        _initiateWithdraw(numShares);\\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\\n            numShares\\n        );\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Stakes a users vault shares\\n     * @param numShares is the number of shares to stake\\n     */\\n    function stake(uint256 numShares) external nonReentrant {\\n        address _liquidityGauge = liquidityGauge;\\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\\n        require(numShares > 0);\\n        uint256 heldByAccount = balanceOf(msg.sender);\\n        if (heldByAccount < numShares) {\\n            _redeem(numShares.sub(heldByAccount), false);\\n        }\\n        _transfer(msg.sender, address(this), numShares);\\n        _approve(address(this), _liquidityGauge, numShares);\\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        VaultLifecycle.CloseParams memory closeParams =\\n            VaultLifecycle.CloseParams({\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\n                USDC: USDC,\\n                currentOption: oldOption,\\n                delay: DELAY,\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\n                overriddenStrikePrice: overriddenStrikePrice,\\n                strikeSelection: strikeSelection,\\n                optionsPremiumPricer: optionsPremiumPricer,\\n                premiumDiscount: premiumDiscount\\n            });\\n\\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\\n            VaultLifecycle.commitAndClose(closeParams, vaultParams, vaultState);\\n\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\n\\n        optionState.nextOption = otokenAddress;\\n\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        _closeShort(oldOption);\\n    }\\n\\n    /**\\n     * @notice Closes the existing short position for the vault.\\n     */\\n    function _closeShort(address oldOption) private {\\n        uint256 lockedAmount = vaultState.lockedAmount;\\n        if (oldOption != address(0)) {\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\n        }\\n        vaultState.lockedAmount = 0;\\n\\n        optionState.currentOption = address(0);\\n\\n        if (oldOption != address(0)) {\\n            uint256 withdrawAmount =\\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\\n\\n        (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        ) =\\n            _rollToNextOption(\\n                lastQueuedWithdrawAmount,\\n                currQueuedWithdrawShares\\n            );\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(\\n                currQueuedWithdrawShares\\n            );\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        currentQueuedWithdrawShares = 0;\\n\\n        ShareMath.assertUint104(lockedBalance);\\n        vaultState.lockedAmount = uint104(lockedBalance);\\n\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\n\\n        uint256 optionsMintAmount =\\n            VaultLifecycle.createShort(\\n                GAMMA_CONTROLLER,\\n                MARGIN_POOL,\\n                newOption,\\n                lockedBalance\\n            );\\n\\n        VaultLifecycle.allocateOptions(\\n            optionsPurchaseQueue,\\n            newOption,\\n            optionsMintAmount,\\n            VaultLifecycle.QUEUE_OPTION_ALLOCATION\\n        );\\n\\n        _startAuction();\\n    }\\n\\n    /**\\n     * @notice Initiate the gnosis auction.\\n     */\\n    function startAuction() external onlyKeeper nonReentrant {\\n        _startAuction();\\n    }\\n\\n    function _startAuction() private {\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\n\\n        address currentOtoken = optionState.currentOption;\\n\\n        auctionDetails.oTokenAddress = currentOtoken;\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        auctionDetails.asset = vaultParams.asset;\\n        auctionDetails.assetDecimals = vaultParams.decimals;\\n        auctionDetails.oTokenPremium = currentOtokenPremium;\\n        auctionDetails.duration = auctionDuration;\\n\\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Sell the allocated options to the purchase queue post auction settlement\\n     */\\n    function sellOptionsToQueue() external onlyKeeper nonReentrant {\\n        VaultLifecycle.sellOptionsToQueue(\\n            optionsPurchaseQueue,\\n            GNOSIS_EASY_AUCTION,\\n            optionAuctionID\\n        );\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\n     */\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\n        uint256 unlockedAssetAmount =\\n            VaultLifecycle.burnOtokens(\\n                GAMMA_CONTROLLER,\\n                optionState.currentOption\\n            );\\n\\n        vaultState.lockedAmount = uint104(\\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Recovery function that returns an ERC20 token to the recipient\\n     * @param token is the ERC20 token to recover from the vault\\n     * @param recipient is the recipient of the recovered tokens\\n     */\\n    function recoverTokens(address token, address recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(token != vaultParams.asset, \\\"Vault asset not recoverable\\\");\\n        require(token != address(this), \\\"Vault share not recoverable\\\");\\n        require(recipient != address(this), \\\"Recipient cannot be vault\\\");\\n\\n        IERC20(token).safeTransfer(\\n            recipient,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice pause a user's vault position\\n     */\\n    function pausePosition() external {\\n        address _vaultPauserAddress = vaultPauser;\\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\\n        _redeem(0, true);\\n        uint256 heldByAccount = balanceOf(msg.sender);\\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\\n        IVaultPauser(_vaultPauserAddress).pausePosition(\\n            msg.sender,\\n            heldByAccount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x471650289455d6c87a3b1c0188f71b4e4ba76cee072b4957c91974dc1bd8b7c0\",\"license\":\"MIT\"},\"contracts/vaults/BaseVaults/base/RibbonVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {Vault} from \\\"../../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../../../libraries/ShareMath.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\ncontract RibbonVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n    uint256[30] private ____gap;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 0;\\n\\n    /// @notice 7 day period between each options sale.\\n    uint256 public constant PERIOD = 7 days;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function baseInitialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) internal initializer {\\n        VaultLifecycle.verifyInitializerParams(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _performanceFee,\\n            _managementFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        keeper = _keeper;\\n\\n        feeRecipient = _feeRecipient;\\n        performanceFee = _performanceFee;\\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\\n            WEEKS_PER_YEAR\\n        );\\n        vaultParams = _vaultParams;\\n\\n        uint256 assetBalance =\\n            IERC20(vaultParams.asset).balanceOf(address(this));\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\\n     */\\n    function depositETH() external payable nonReentrant {\\n        require(vaultParams.asset == WETH, \\\"!WETH\\\");\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        _depositFor(msg.value, msg.sender);\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender.\\n     * @param amount is the amount of `asset` to deposit\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        _depositFor(amount, msg.sender);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param amount is the amount of `asset` to deposit\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(uint256 amount, address creditor)\\n        external\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"!amount\\\");\\n        require(creditor != address(0));\\n\\n        _depositFor(amount, creditor);\\n\\n        // An approve() by the msg.sender is required beforehand\\n        IERC20(vaultParams.asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     */\\n    function _depositFor(uint256 amount, address creditor) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function _initiateWithdraw(uint256 numShares) internal {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return withdrawAmount the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n        transferAsset(msg.sender, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\\n     * @return newOption is the new option address\\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n     */\\n    function _rollToNextOption(\\n        uint256 lastQueuedWithdrawAmount,\\n        uint256 currentQueuedWithdrawShares\\n    )\\n        internal\\n        returns (\\n            address newOption,\\n            uint256 lockedBalance,\\n            uint256 queuedWithdrawAmount\\n        )\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        address recipient = feeRecipient;\\n        uint256 mintShares;\\n        uint256 performanceFeeInAsset;\\n        uint256 totalVaultFee;\\n        {\\n            uint256 newPricePerShare;\\n            (\\n                lockedBalance,\\n                queuedWithdrawAmount,\\n                newPricePerShare,\\n                mintShares,\\n                performanceFeeInAsset,\\n                totalVaultFee\\n            ) = VaultLifecycle.rollover(\\n                vaultState,\\n                VaultLifecycle.RolloverParams(\\n                    vaultParams.decimals,\\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee,\\n                    currentQueuedWithdrawShares\\n                )\\n            );\\n\\n            optionState.currentOption = newOption;\\n            optionState.nextOption = address(0);\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                recipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n        }\\n\\n        _mint(address(this), mintShares);\\n\\n        if (totalVaultFee > 0) {\\n            transferAsset(payable(recipient), totalVaultFee);\\n        }\\n\\n        return (newOption, lockedBalance, queuedWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) internal {\\n        address asset = vaultParams.asset;\\n        if (asset == WETH) {\\n            IWETH(WETH).withdraw(amount);\\n            (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            return;\\n        }\\n        IERC20(asset).safeTransfer(recipient, amount);\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        return\\n            uint256(vaultState.lockedAmount).add(\\n                IERC20(vaultParams.asset).balanceOf(address(this))\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n}\\n\",\"keccak256\":\"0x61a60582033658ad077f4901cb30779df28caf05f690b894849d48d6ef245240\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200619838038062006198833981016040819052620000359162000261565b85858484846001600160a01b0385166200007f5760405162461bcd60e51b8152602060048201526006602482015265042beeecae8d60d31b60448201526064015b60405180910390fd5b6001600160a01b038416620000c05760405162461bcd60e51b8152602060048201526006602482015265215f7573646360d01b604482015260640162000076565b6001600160a01b038116620001185760405162461bcd60e51b815260206004820152601360248201527f215f676e6f7369734561737941756374696f6e00000000000000000000000000604482015260640162000076565b6001600160a01b038316620001645760405162461bcd60e51b815260206004820152601160248201527010afb3b0b6b6b0a1b7b73a3937b63632b960791b604482015260640162000076565b6001600160a01b038216620001ab5760405162461bcd60e51b815260206004820152600c60248201526b0857db585c99da5b941bdbdb60a21b604482015260640162000076565b6001600160601b0319606095861b811660805293851b841660a05291841b831660c052831b821660e05290911b16610100526001600160a01b038416620002275760405162461bcd60e51b815260206004820152600f60248201526e215f6f546f6b656e466163746f727960881b604482015260640162000076565b50505060601b6001600160601b0319166101205250620002e19050565b80516001600160a01b03811681146200025c57600080fd5b919050565b60008060008060008060c087890312156200027a578182fd5b620002858762000244565b9550620002956020880162000244565b9450620002a56040880162000244565b9350620002b56060880162000244565b9250620002c56080880162000244565b9150620002d560a0880162000244565b90509295509295509295565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c615e0162000397600039600081816110000152612e67015260008181610a2f015281816120b20152613f4b01526000818161094d015261294e0152600081816105ad01528181611f4b0152818161292601526148ae015260008181610bc00152612e8c015260008181610ea001528181613137015281816131e3015281816137ef015261382c0152615e016000f3fe6080604052600436106104c05760003560e01c806387153eb111610276578063b4d1d7951161014f578063e73c63d5116100c1578063f656ba5111610085578063f656ba51146110db578063f756fa2114611110578063f957a06714611125578063f9a0be6814611145578063fba7dc6114611166578063fe56e2321461118757600080fd5b8063e73c63d514611068578063e74b981b1461107e578063ea00b1ca1461109e578063f2fde38b146110b3578063f6326fb3146110d357600080fd5b8063d13f1b3e11610113578063d13f1b3e14610f78578063d164cc1514610f98578063d5f2638214610fb8578063db006a7514610fce578063db43e86214610fee578063dd62ed3e1461102257600080fd5b8063b4d1d79514610ef7578063b6b55f2514610f0e578063b9f8092b14610f2e578063ca59409414610f43578063ce7c2ac214610f5857600080fd5b8063a285c9e8116101e8578063a6f7f5d6116101ac578063a6f7f5d614610e38578063a9059cbb14610e4e578063aced166114610e6e578063ad5c464814610e8e578063ad7a672f14610ec2578063afa6626414610ed757600080fd5b8063a285c9e814610d98578063a2db9d8314610dba578063a457c2d714610dd8578063a497e67414610df8578063a694fc3a14610e1857600080fd5b8063947061b51161023a578063947061b514610c1e57806395d89b4114610c3f57806399530b0614610c545780639be43daa14610c695780639fcc2d7514610c89578063a083ff1714610d3557600080fd5b806387153eb114610b6b5780638778878214610b9857806389a3027114610bae5780638b10cc7c14610be25780638da5cb5b14610c0057600080fd5b806347786d37116103a85780636719b2ee1161031a57806370897b23116102de57806370897b2314610a6657806370a0823114610a86578063715018a614610abc5780637a9262a214610ad15780637e108d5214610b3557806383536ff314610b5557600080fd5b80636719b2ee1461096f57806369b41170146109f35780636b64c76914610a085780636c10f66c14610a1d5780636f31ab3414610a5157600080fd5b8063573f0d6e1161036c578063573f0d6e146108b157806358358207146108d15780635ea8cd12146108f1578063600a2cfb14610911578063611b034d14610926578063650cce8a1461093b57600080fd5b806347786d37146108245780634ac88cb6146108445780634b2431d914610864578063503c70aa1461087b57806355489bb21461089157600080fd5b806330630da4116104415780633ec143d3116104055780633ec143d3146107625780633f23bb73146107905780633f90916a146107b0578063432833a6146107ce5780634603c0aa146107e4578063469048401461080457600080fd5b806330630da4146106ba578063313ce567146106da578063355274ea1461070457806336efd16f14610722578063395093511461074257600080fd5b806318160ddd1161048857806318160ddd146105865780631a92f6c21461059b57806323b872dd146105e75780632728f333146106075780632775d01c1461069a57600080fd5b8063048bf085146104c5578063056097ac146104e757806306fdde0314610507578063095ea7b3146105325780630cbf54c814610562575b600080fd5b3480156104d157600080fd5b506104e56104e036600461548a565b6111a7565b005b3480156104f357600080fd5b506104e56105023660046154a6565b6111fd565b34801561051357600080fd5b5061051c6113cf565b6040516105299190615821565b60405180910390f35b34801561053e57600080fd5b5061055261054d36600461551e565b611461565b6040519015158152602001610529565b34801561056e57600080fd5b5061057860fb5481565b604051908152602001610529565b34801561059257600080fd5b50609954610578565b3480156105a757600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610529565b3480156105f357600080fd5b506105526106023660046154de565b611478565b34801561061357600080fd5b5060cf5460d0546106559161ffff8116916001600160681b03620100008304811692600160781b900416906001600160801b0380821691600160801b90041685565b6040805161ffff90961686526001600160681b03948516602087015293909216928401929092526001600160801b03918216606084015216608082015260a001610529565b3480156106a657600080fd5b506104e56106b536600461561e565b611524565b3480156106c657600080fd5b506104e56106d536600461548a565b6116c7565b3480156106e657600080fd5b5060cc54610100900460ff1660405160ff9091168152602001610529565b34801561071057600080fd5b5060ce546001600160681b0316610578565b34801561072e57600080fd5b506104e561073d36600461564e565b61175f565b34801561074e57600080fd5b5061055261075d36600461551e565b6117e7565b34801561076e57600080fd5b5060f95461077d9061ffff1681565b60405161ffff9091168152602001610529565b34801561079c57600080fd5b506105786107ab36600461548a565b611823565b3480156107bc57600080fd5b5060d0546001600160801b0316610578565b3480156107da57600080fd5b5061057860fc5481565b3480156107f057600080fd5b506104e56107ff36600461548a565b611876565b34801561081057600080fd5b5060d3546105cf906001600160a01b031681565b34801561083057600080fd5b506104e561083f36600461561e565b611918565b34801561085057600080fd5b506104e561085f36600461548a565b6119f3565b34801561087057600080fd5b506105786101025481565b34801561088757600080fd5b5061057860fd5481565b34801561089d57600080fd5b506104e56108ac3660046155f7565b611a40565b3480156108bd57600080fd5b506104e56108cc36600461548a565b611ad8565b3480156108dd57600080fd5b506104e56108ec36600461559b565b611b25565b3480156108fd57600080fd5b506104e561090c36600461561e565b611e74565b34801561091d57600080fd5b506104e5611edf565b34801561093257600080fd5b506104e561203a565b34801561094757600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561097b57600080fd5b506109c261098a36600461548a565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b031690820152606001610529565b3480156109ff57600080fd5b50610578600081565b348015610a1457600080fd5b506104e5612154565b348015610a2957600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5d57600080fd5b506104e56121b4565b348015610a7257600080fd5b506104e5610a8136600461561e565b6121eb565b348015610a9257600080fd5b50610578610aa136600461548a565b6001600160a01b031660009081526097602052604090205490565b348015610ac857600080fd5b506104e56122b2565b348015610add57600080fd5b50610b13610aec36600461548a565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b03909116602083015201610529565b348015610b4157600080fd5b506104e5610b5036600461561e565b6122e8565b348015610b6157600080fd5b5061057860f75481565b348015610b7757600080fd5b50610578610b8636600461561e565b60ca6020526000908152604090205481565b348015610ba457600080fd5b5061057860d55481565b348015610bba57600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b348015610bee57600080fd5b5060d2546001600160a01b03166105cf565b348015610c0c57600080fd5b506065546001600160a01b03166105cf565b348015610c2a57600080fd5b50610103546105cf906001600160a01b031681565b348015610c4b57600080fd5b5061051c612332565b348015610c6057600080fd5b50610578612341565b348015610c7557600080fd5b506104e5610c8436600461561e565b61237b565b348015610c9557600080fd5b5060cc5460cd5460ce54610ce59260ff808216936101008304909116926001600160a01b036201000090930483169282169166ffffffffffffff600160a01b90910416906001600160681b031686565b60408051961515875260ff90951660208701526001600160a01b03938416948601949094529116606084015266ffffffffffffff1660808301526001600160681b031660a082015260c001610529565b348015610d4157600080fd5b5060d15460d254610d6c916001600160a01b039081169190811690600160a01b900463ffffffff1683565b604080516001600160a01b03948516815293909216602084015263ffffffff1690820152606001610529565b348015610da457600080fd5b5060d254600160a01b900463ffffffff16610578565b348015610dc657600080fd5b5060d1546001600160a01b03166105cf565b348015610de457600080fd5b50610552610df336600461551e565b612475565b348015610e0457600080fd5b506104e5610e1336600461561e565b61250e565b348015610e2457600080fd5b506104e5610e3336600461561e565b6125cb565b348015610e4457600080fd5b5061057860d65481565b348015610e5a57600080fd5b50610552610e6936600461551e565b6126c9565b348015610e7a57600080fd5b5060d4546105cf906001600160a01b031681565b348015610e9a57600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b348015610ece57600080fd5b506105786126d6565b348015610ee357600080fd5b5060f5546105cf906001600160a01b031681565b348015610f0357600080fd5b5061057862093a8081565b348015610f1a57600080fd5b506104e5610f2936600461561e565b612775565b348015610f3a57600080fd5b506104e56127e2565b348015610f4f57600080fd5b506104e5612ab3565b348015610f6457600080fd5b50610578610f7336600461548a565b612b56565b348015610f8457600080fd5b506104e5610f9336600461561e565b612b73565b348015610fa457600080fd5b506104e5610fb336600461548a565b612c38565b348015610fc457600080fd5b5061057860f85481565b348015610fda57600080fd5b506104e5610fe936600461561e565b612cc7565b348015610ffa57600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561102e57600080fd5b5061057861103d3660046154a6565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b34801561107457600080fd5b5061057860fa5481565b34801561108a57600080fd5b506104e561109936600461548a565b612d34565b3480156110aa57600080fd5b506104e5612e27565b3480156110bf57600080fd5b506104e56110ce36600461548a565b61306f565b6104e561310a565b3480156110e757600080fd5b506110fb6110f636600461548a565b61325b565b60408051928352602083019190915201610529565b34801561111c57600080fd5b506104e561333e565b34801561113157600080fd5b5060f6546105cf906001600160a01b031681565b34801561115157600080fd5b50610100546105cf906001600160a01b031681565b34801561117257600080fd5b50610101546105cf906001600160a01b031681565b34801561119357600080fd5b506104e56111a236600461561e565b613393565b6065546001600160a01b031633146111da5760405162461bcd60e51b81526004016111d1906158a3565b60405180910390fd5b61010080546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146112275760405162461bcd60e51b81526004016111d1906158a3565b60cc546001600160a01b038381166201000090920416141561128b5760405162461bcd60e51b815260206004820152601b60248201527f5661756c74206173736574206e6f74207265636f76657261626c65000000000060448201526064016111d1565b6001600160a01b0382163014156112e45760405162461bcd60e51b815260206004820152601b60248201527f5661756c74207368617265206e6f74207265636f76657261626c65000000000060448201526064016111d1565b6001600160a01b03811630141561133d5760405162461bcd60e51b815260206004820152601960248201527f526563697069656e742063616e6e6f74206265207661756c740000000000000060448201526064016111d1565b6040516370a0823160e01b81523060048201526113cb9082906001600160a01b038516906370a082319060240160206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba9190615636565b6001600160a01b0385169190613474565b5050565b6060609a80546113de90615bcb565b80601f016020809104026020016040519081016040528092919081815260200182805461140a90615bcb565b80156114575780601f1061142c57610100808354040283529160200191611457565b820191906000526020600020905b81548152906001019060200180831161143a57829003601f168201915b5050505050905090565b600061146e3384846134d7565b5060015b92915050565b60006114858484846135fc565b6001600160a01b03841660009081526098602090815260408083203384529091529020548281101561150a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016111d1565b61151785338584036134d7565b60019150505b9392505050565b600260015414156115475760405162461bcd60e51b81526004016111d1906158f9565b600260015533600090815260c96020526040902060cf5461ffff168261157f5760405162461bcd60e51b81526004016111d1906158d8565b815461ffff1681146115c35760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b60448201526064016111d1565b81546201000090046001600160681b0316838110156116145760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b60448201526064016111d1565b61161e81856137cc565b83546001600160681b0391909116620100000262010000600160781b031990911617835560d054611658906001600160801b0316856137cc565b60d080546001600160801b0319166001600160801b0392909216919091179055604080518581526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a26116bd33856137d8565b5050600180555050565b6065546001600160a01b031633146116f15760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b03811661173d5760405162461bcd60e51b815260206004820152601360248201527210b732bba9ba3934b5b2a9b2b632b1ba34b7b760691b60448201526064016111d1565b60f680546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156117825760405162461bcd60e51b81526004016111d1906158f9565b6002600155816117a45760405162461bcd60e51b81526004016111d1906158d8565b6001600160a01b0381166117b757600080fd5b6117c18282613939565b60cc546117df906201000090046001600160a01b0316333085613bcb565b505060018055565b3360008181526098602090815260408083206001600160a01b0387168452909152812054909161146e91859061181e908690615a46565b6134d7565b60cc5460009060ff610100909104168161185961183f60995490565b6118476126d6565b60d0546001600160801b031685613c03565b905061186e61186785612b56565b8284613c43565b949350505050565b6065546001600160a01b031633146118a05760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b0381166118f65760405162461bcd60e51b815260206004820152601860248201527f216e65774f7074696f6e735072656d69756d507269636572000000000000000060448201526064016111d1565b60f580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146119425760405162461bcd60e51b81526004016111d1906158a3565b6000811161197c5760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b60448201526064016111d1565b61198581613ca5565b60ce54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160ce80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b6065546001600160a01b03163314611a1d5760405162461bcd60e51b81526004016111d1906158a3565b61010180546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314611a6a5760405162461bcd60e51b81526004016111d1906158a3565b6000816001600160801b031611611ab25760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b60448201526064016111d1565b6001600160801b031660fa5560cf5460f9805461ffff191661ffff909216919091179055565b6065546001600160a01b03163314611b025760405162461bcd60e51b81526004016111d1906158a3565b61010380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611b3e575060005460ff16155b611b5a5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015611b7c576000805461ffff19166101011790555b611c41611b8c602085018561548a565b611b9c604086016020870161548a565b611bac606087016040880161548a565b60608701356080880135611bc360a08a018a6159fa565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c059250505060c08b018b6159fa565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250613cef915050565b6000611c54610100850160e0860161548a565b6001600160a01b03161415611ca45760405162461bcd60e51b815260206004820152601660248201527510afb7b83a34b7b739a83932b6b4bab6a83934b1b2b960511b60448201526064016111d1565b6000611cb86101208501610100860161548a565b6001600160a01b03161415611d035760405162461bcd60e51b815260206004820152601160248201527010afb9ba3934b5b2a9b2b632b1ba34b7b760791b60448201526064016111d1565b6000611d17610140850161012086016156bb565b63ffffffff16118015611d4b5750611d31600a6064615b69565b611d43610140850161012086016156bb565b63ffffffff16105b611d8b5760405162461bcd60e51b81526020600482015260116024820152700857dc1c995b5a5d5b511a5cd8dbdd5b9d607a1b60448201526064016111d1565b61012c8361014001351015611dd65760405162461bcd60e51b815260206004820152601160248201527010afb0bab1ba34b7b7223ab930ba34b7b760791b60448201526064016111d1565b611de7610100840160e0850161548a565b60f580546001600160a01b0319166001600160a01b0392909216919091179055611e196101208401610100850161548a565b60f680546001600160a01b0319166001600160a01b0392909216919091179055611e4b610140840161012085016156bb565b63ffffffff1660f75561014083013560fb558015611e6f576000805461ff00191690555b505050565b60d4546001600160a01b03163314611e9e5760405162461bcd60e51b81526004016111d190615834565b60008111611eda5760405162461bcd60e51b8152602060048201526009602482015268216d696e507269636560b81b60448201526064016111d1565b60f855565b60d4546001600160a01b03163314611f095760405162461bcd60e51b81526004016111d190615834565b60026001541415611f2c5760405162461bcd60e51b81526004016111d1906158f9565b600260015560d2546040516358ffbb3d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015290911660248201526000907325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B40906358ffbb3d9060440160206040518083038186803b158015611fb357600080fd5b505af4158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190615636565b60cf5490915061200a906201000090046001600160681b0316826137cc565b60cf80546001600160681b0392909216620100000262010000600160781b03199092169190911790555060018055565b60d4546001600160a01b031633146120645760405162461bcd60e51b81526004016111d190615834565b600260015414156120875760405162461bcd60e51b81526004016111d1906158f9565b60026001556101015460fc54604051632288d73760e11b81526001600160a01b0392831660048201527f0000000000000000000000000000000000000000000000000000000000000000909216602483015260448201527325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B4090634511ae6e9060640160206040518083038186803b15801561211557600080fd5b505af4158015612129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214d9190615636565b5060018055565b60d4546001600160a01b0316331461217e5760405162461bcd60e51b81526004016111d190615834565b600260015414156121a15760405162461bcd60e51b81526004016111d1906158f9565b60026001556121ae613f2e565b60018055565b600260015414156121d75760405162461bcd60e51b81526004016111d1906158f9565b60026001819055506121ae60006001614061565b6065546001600160a01b031633146122155760405162461bcd60e51b81526004016111d1906158a3565b612223620f42406064615b69565b81106122715760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e63652066656500000000000000000060448201526064016111d1565b60d55460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160d555565b6065546001600160a01b031633146122dc5760405162461bcd60e51b81526004016111d1906158a3565b6122e66000614210565b565b6002600154141561230b5760405162461bcd60e51b81526004016111d1906158f9565b600260015561231981614262565b610102546123279082614429565b610102555060018055565b6060609b80546113de90615bcb565b600061237661234f60995490565b6123576126d6565b60d05460cc546001600160801b0390911690610100900460ff16613c03565b905090565b6002600154141561239e5760405162461bcd60e51b81526004016111d1906158f9565b6002600155806123dd5760405162461bcd60e51b815260206004820152600a602482015269216e756d526f756e647360b01b60448201526064016111d1565b60cf5461ffff1660005b8281101561246c5760006123fb8284615a46565b600081815260ca6020526040902054909150156124485760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b60448201526064016111d1565b600090815260ca60205260409020600190558061246481615c06565b9150506123e7565b50506001805550565b3360009081526098602090815260408083206001600160a01b0386168452909152812054828110156124f75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016111d1565b61250433858584036134d7565b5060019392505050565b6065546001600160a01b031633146125385760405162461bcd60e51b81526004016111d1906158a3565b61012c81101561258a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e206475726174696f6e000000000000000060448201526064016111d1565b60fb5460408051918252602082018390527f5acd982e2240ed224a69aa03dab039d3797c108e4b5f288cd7dd6ca181b275f3910160405180910390a160fb55565b600260015414156125ee5760405162461bcd60e51b81526004016111d1906158f9565b6002600155610100546001600160a01b03168061260a57600080fd5b6000821161261757600080fd5b33600090815260976020526040902054828110156126435761264361263c84836137cc565b6000614061565b61264e3330856135fc565b6126593083856134d7565b6040516383df674760e01b815260048101849052336024820152600060448201526001600160a01b038316906383df674790606401600060405180830381600087803b1580156126a857600080fd5b505af11580156126bc573d6000803e3d6000fd5b5050600180555050505050565b600061146e3384846135fc565b60cc546040516370a0823160e01b815230600482015260009161237691620100009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561272557600080fd5b505afa158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d9190615636565b60cf546201000090046001600160681b031690614429565b600260015414156127985760405162461bcd60e51b81526004016111d1906158f9565b6002600155806127ba5760405162461bcd60e51b81526004016111d1906158d8565b6127c48133613939565b60cc5461214d906201000090046001600160a01b0316333084613bcb565b60d4546001600160a01b0316331461280c5760405162461bcd60e51b81526004016111d190615834565b6002600154141561282f5760405162461bcd60e51b81526004016111d1906158f9565b60026001556101025460fd546000908190819061284c9085614435565b60fd81905560d054929550909350915060009061287990600160801b90046001600160801b031686614429565b9050612884816147d0565b60d080546001600160801b03808416600160801b0291161790556000610102556128ad83613ca5565b60cf805462010000600160781b031916620100006001600160681b0386160217905560405183815233906001600160a01b038616907f045c558fdce4714c5816d53820d27420f4cd860892df203fe636384d8d19aa019060200160405180910390a3604051632904c23960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015285166044820152606481018490526000907325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B4090632904c2399060840160206040518083038186803b1580156129bc57600080fd5b505af41580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f49190615636565b61010154604051636648c73d60e11b81526001600160a01b03918216600482015290871660248201526044810182905261138860648201529091507325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B409063cc918e7a9060840160206040518083038186803b158015612a6657600080fd5b505af4158015612a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9e9190615636565b50612aa7613f2e565b50506001805550505050565b610103546001600160a01b031680612aca57600080fd5b612ad660006001614061565b3360008181526097602052604090205490612af29083836134d7565b60405163c9c2d4f560e01b8152336004820152602481018290526001600160a01b0383169063c9c2d4f590604401600060405180830381600087803b158015612b3a57600080fd5b505af1158015612b4e573d6000803e3d6000fd5b505050505050565b6000806000612b648461325b565b909250905061186e8282614429565b60d4546001600160a01b03163314612b9d5760405162461bcd60e51b81526004016111d190615834565b600081118015612bb85750612bb4600a6064615b69565b8111155b612bf75760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908191a5cd8dbdd5b9d60821b60448201526064016111d1565b60f75460408051918252602082018390527f4cd657fde404967d63a338fb06c5c98751a9df57dfae6dc333a432faf8a5f656910160405180910390a160f755565b6065546001600160a01b03163314612c625760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b038116612ca55760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b60448201526064016111d1565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612cea5760405162461bcd60e51b81526004016111d1906158f9565b600260015580612d295760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b60448201526064016111d1565b61214d816000614061565b6065546001600160a01b03163314612d5e5760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b038116612da75760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b60448201526064016111d1565b60d3546001600160a01b0382811691161415612e055760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e74000000000000000060448201526064016111d1565b60d380546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612e4a5760405162461bcd60e51b81526004016111d1906158f9565b600260015560d25460408051610120810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000008116602083015292831681830181905260006060830181905260f95461ffff16608084015260fa5460a084015260f654851660c084015260f55490941660e083015260f754610100830152915163f39ad79560e01b815291929091819081907325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B409063f39ad79590612f3a90879060cc9060cf90600401615930565b60606040518083038186803b158015612f5257600080fd5b505af4158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8a9190615549565b604080518381526020810183905293965091945092507fa217999b1c125c2a996f712c5f26a28addad7167bd8a67d5bd5b2a751148abb0910160405180910390a160d180546001600160a01b0319166001600160a01b0385161790556000612ff24282614429565b905063ffffffff8111156130485760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e5265616479000000000000000060448201526064016111d1565b60d2805463ffffffff60a01b1916600160a01b63ffffffff841602179055612aa78661481a565b6065546001600160a01b031633146130995760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b0381166130fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016111d1565b61310781614210565b50565b6002600154141561312d5760405162461bcd60e51b81526004016111d1906158f9565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811662010000909204161461319e5760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b60448201526064016111d1565b600034116131d75760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b60448201526064016111d1565b6131e13433613939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561323c57600080fd5b505af1158015613250573d6000803e3d6000fd5b505060018055505050565b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b0316918101919091528291600111156132dd575050506001600160a01b031660009081526097602052604081205491565b60cf54815161ffff908116600090815260ca602052604081205460cc54919361331393869391169190610100900460ff1661498c565b9050613334856001600160a01b031660009081526097602052604090205490565b9590945092505050565b600260015414156133615760405162461bcd60e51b81526004016111d1906158f9565b600260015560006133706149fd565b60fd5490915061338090826137cc565b6001600160801b031660fd555060018055565b6065546001600160a01b031633146133bd5760405162461bcd60e51b81526004016111d1906158a3565b6133cb620f42406064615b69565b81106134125760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b60448201526064016111d1565b600061342f63031ba30961342984620f4240614bba565b90614bc6565b60d65460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160d65550565b6040516001600160a01b038316602482015260448101829052611e6f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614bd2565b6001600160a01b0383166135395760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016111d1565b6001600160a01b03821661359a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016111d1565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166136605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016111d1565b6001600160a01b0382166136c25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016111d1565b6001600160a01b0383166000908152609760205260409020548181101561373a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016111d1565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613771908490615a46565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516137bd91815260200190565b60405180910390a35b50505050565b600061151d8284615b88565b60cc546001600160a01b03620100009091048116907f00000000000000000000000000000000000000000000000000000000000000001681141561392557604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561387857600080fd5b505af115801561388c573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146138dd576040519150601f19603f3d011682016040523d82523d6000602084013e6138e2565b606091505b50509050806137c65760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016111d1565b611e6f6001600160a01b0382168484613474565b60cf5461ffff1660006139548461394e6126d6565b90614429565b60ce549091506001600160681b031681111561399f5760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b60448201526064016111d1565b60cd54600160a01b900466ffffffffffffff168110156139f85760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016111d1565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc54919291613ab7918491879190610100900460ff1661498c565b8251909150869061ffff16851415613ae8576020830151600090613ae4906001600160681b031689614429565b9150505b613af181613ca5565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560d054613b97911689614429565b9050613ba2816147d0565b60d080546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526137c69085906323b872dd60e01b906084016134a0565b600080613c1183600a615ac1565b905060008611613c215780613c39565b613c3986613429613c3288886137cc565b8490614bba565b9695505050505050565b600060018311613c8d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016111d1565b61186e613c9b83600a615ac1565b6134298686614bba565b6001600160681b038111156131075760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b60448201526064016111d1565b600054610100900460ff1680613d08575060005460ff16155b613d245760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015613d46576000805461ffff19166101011790555b60405163c72733f760e01b81527325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B409063c72733f790613d8b908c908c908c908b908d908c908c908c90600401615727565b60006040518083038186803b158015613da357600080fd5b505af4158015613db7573d6000803e3d6000fd5b50505050613dc3614ca4565b613dcd8484614d17565b613dd5614d96565b613dde8961306f565b60d480546001600160a01b03808b166001600160a01b03199283161790925560d38054928a169290911691909117905560d5859055613e2863031ba30961342988620f4240614bba565b60d6558160cc613e388282615c5e565b505060cc546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a082319060240160206040518083038186803b158015613e8457600080fd5b505afa158015613e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebc9190615636565b9050613ec781613ca5565b60cf805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015613f23576000805461ff00191690555b505050505050505050565b6040805160c08101825260d2546001600160a01b039081168083527f000000000000000000000000000000000000000000000000000000000000000082166020840190815260cc54620100008104841685870190815260ff610100909204919091166060860190815260f8546080870190815260fb5460a088019081529751633baf17fd60e21b8152875187166004820152935186166024850152915190941660448301529251606482015291516084830152925160a48201529091907325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B409063eebc5ff49060c40160206040518083038186803b15801561402257600080fd5b505af4158015614036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405a9190615636565b60fc555050565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cf5491865260ca9094529184205460cc54919492909316926140dc9185918591610100900460ff1661498c565b9050836140e957846140eb565b805b9450846140f9575050505050565b8085111561413d5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b60448201526064016111d1565b825161ffff1682111561416a5733600090815260c960205260409020805462010000600160781b03191690555b614173856147d0565b61417d81866137cc565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929916141f69189825261ffff16602082015260400190565b60405180910390a26142093033876135fc565b5050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000811161429f5760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b60448201526064016111d1565b33600090815260c960205260409020546201000090046001600160681b03161515806142e9575033600090815260c96020526040902054600160781b90046001600160801b031615155b156142fa576142fa60006001614061565b60cf5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b0316600082156143835761437c8287614429565b90506143e6565b81156143c55760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b60448201526064016111d1565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b6143ef816147d0565b33600081815260cb60205260409020805462010000600160901b031916620100006001600160801b03851602179055612b4e9030886135fc565b600061151d8284615a46565b60d25460009081908190600160a01b900463ffffffff164210156144845760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b60448201526064016111d1565b60d1546001600160a01b03169250826144cd5760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b60448201526064016111d1565b60d3546040805160e08101825260cc54610100810460ff16825291516370a0823160e01b81523060048201526001600160a01b03938416936000938493849384937325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B409363633c14269360cf939092602084019262010000900416906370a082319060240160206040518083038186803b15801561455d57600080fd5b505afa158015614571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145959190615636565b81526020016145a360995490565b81526020018e815260200160d554815260200160d65481526020018d8152506040518363ffffffff1660e01b815260040161463092919060006101008201905083825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b60c06040518083038186803b15801561464857600080fd5b505af415801561465c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146809190615672565b809750819850829950839650849b50859c505050505050508760d160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060cf60000160009054906101000a900461ffff1661ffff1690508160ca600083815260200190815260200160002081905550856001600160a01b03167f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c00685858460405161476f939291909283526020830191909152604082015260600190565b60405180910390a260d080546001600160801b0319169055614792816001615a46565b60cf805461ffff191661ffff92909216919091179055506147b590503084614dfd565b80156147c5576147c584826137d8565b505050509250925092565b6001600160801b038111156131075760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b60448201526064016111d1565b60cf546201000090046001600160681b03166001600160a01b038216156148665760cf80546cffffffffffffffffffffffffff60781b1916600160781b6001600160681b038416021790555b60cf805462010000600160781b031916905560d280546001600160a01b03191690556001600160a01b038216156113cb57604051636c6fe87f60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000907325Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B409063d8dfd0fe9060240160206040518083038186803b15801561490d57600080fd5b505af4158015614921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149459190615636565b9050336001600160a01b0316836001600160a01b03167f7e830f7c1771deb1bdb35c4a7e6051bbac32b376f7f4e4976b8618b0b11997f7836040516135ef91815260200190565b835160009061ffff16158015906149a75750845161ffff1684115b156149e95760006149c686602001516001600160681b03168585614edc565b60408701519091506149e1906001600160801b031682614429565b91505061186e565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff1681614a5f5760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b60448201526064016111d1565b60cf5461ffff168110614aa75760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b60448201526064016111d1565b33600090815260cb60205260409020805462010000600160901b031916905560d054614ae390600160801b90046001600160801b0316836137cc565b60d080546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc54614b2691859160ff61010090910416613c43565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2614b6e3084614f3f565b60008111614bb05760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b60448201526064016111d1565b61186e33826137d8565b600061151d8284615b69565b600061151d8284615a5e565b6000614c27826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661508d9092919063ffffffff16565b805190915015611e6f5780806020019051810190614c45919061557f565b611e6f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016111d1565b600054610100900460ff1680614cbd575060005460ff16155b614cd95760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614cfb576000805461ffff19166101011790555b614d0361509c565b8015613107576000805461ff001916905550565b600054610100900460ff1680614d30575060005460ff16155b614d4c5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614d6e576000805461ffff19166101011790555b614d7661510b565b614d808383615175565b8015611e6f576000805461ff0019169055505050565b600054610100900460ff1680614daf575060005460ff16155b614dcb5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614ded576000805461ffff19166101011790555b614df561510b565b614d0361520a565b6001600160a01b038216614e535760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016111d1565b8060996000828254614e659190615a46565b90915550506001600160a01b03821660009081526097602052604081208054839290614e92908490615a46565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060018311614f265760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016111d1565b61186e83613429614f3885600a615ac1565b8790614bba565b6001600160a01b038216614f9f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016111d1565b6001600160a01b038216600090815260976020526040902054818110156150135760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016111d1565b6001600160a01b0383166000908152609760205260408120838303905560998054849290615042908490615b88565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606061186e848460008561526a565b600054610100900460ff16806150b5575060005460ff16155b6150d15760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff161580156150f3576000805461ffff19166101011790555b600180558015613107576000805461ff001916905550565b600054610100900460ff1680615124575060005460ff16155b6151405760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614d03576000805461ffff19166101011790558015613107576000805461ff001916905550565b600054610100900460ff168061518e575060005460ff16155b6151aa5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff161580156151cc576000805461ffff19166101011790555b82516151df90609a9060208601906153cb565b5081516151f390609b9060208501906153cb565b508015611e6f576000805461ff0019169055505050565b600054610100900460ff1680615223575060005460ff16155b61523f5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015615261576000805461ffff19166101011790555b614d0333614210565b6060824710156152cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016111d1565b843b6153195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016111d1565b600080866001600160a01b03168587604051615335919061570b565b60006040518083038185875af1925050503d8060008114615372576040519150601f19603f3d011682016040523d82523d6000602084013e615377565b606091505b5091509150615387828286615392565b979650505050505050565b606083156153a157508161151d565b8251156153b15782518084602001fd5b8160405162461bcd60e51b81526004016111d19190615821565b8280546153d790615bcb565b90600052602060002090601f0160209004810192826153f9576000855561543f565b82601f1061541257805160ff191683800117855561543f565b8280016001018555821561543f579182015b8281111561543f578251825591602001919060010190615424565b5061544b92915061544f565b5090565b5b8082111561544b5760008155600101615450565b803561546f81615d6f565b919050565b803561546f81615d92565b803561546f81615da7565b60006020828403121561549b578081fd5b813561151d81615d6f565b600080604083850312156154b8578081fd5b82356154c381615d6f565b915060208301356154d381615d6f565b809150509250929050565b6000806000606084860312156154f2578081fd5b83356154fd81615d6f565b9250602084013561550d81615d6f565b929592945050506040919091013590565b60008060408385031215615530578182fd5b823561553b81615d6f565b946020939093013593505050565b60008060006060848603121561555d578283fd5b835161556881615d6f565b602085015160409095015190969495509392505050565b600060208284031215615590578081fd5b815161151d81615d84565b60008082840360e08112156155ae578283fd5b833567ffffffffffffffff8111156155c4578384fd5b840161016081870312156155d6578384fd5b925060c0601f19820112156155e9578182fd5b506020830190509250929050565b600060208284031215615608578081fd5b81356001600160801b038116811461151d578182fd5b60006020828403121561562f578081fd5b5035919050565b600060208284031215615647578081fd5b5051919050565b60008060408385031215615660578182fd5b8235915060208301356154d381615d6f565b60008060008060008060c0878903121561568a578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000602082840312156156cc578081fd5b813563ffffffff8116811461151d578182fd5b600081518084526156f7816020860160208601615b9f565b601f01601f19169290920160200192915050565b6000825161571d818460208701615b9f565b9190910192915050565b60006101a060018060a01b03808c168452808b166020850152808a1660408501528860608501528760808501528160a0850152615766828501886156df565b915083820360c085015261577a82876156df565b92508435915061578982615d84565b90151560e08401526020840135906157a082615dbc565b60ff8216610100850152604085013591506157ba82615d6f565b166101208301526157cd60608401615464565b6001600160a01b03166101408301526157e86080840161547f565b66ffffffffffffff1661016083015261580360a08401615474565b6001600160681b038116610180840152509998505050505050505050565b60208152600061151d60208301846156df565b60208082526007908201526610b5b2b2b832b960c91b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b83516001600160a01b0316815260208085015161016083019161595d908401826001600160a01b03169052565b50604085015161597860408401826001600160a01b03169052565b50606085015160608301526080850151615998608084018261ffff169052565b5060a085015160a083015260c08501516159bd60c08401826001600160a01b03169052565b5060e08501516159d860e08401826001600160a01b03169052565b5061010094850151948201949094526101208101929092526101409091015290565b6000808335601e19843603018112615a10578283fd5b83018035915067ffffffffffffffff821115615a2a578283fd5b602001915036819003821315615a3f57600080fd5b9250929050565b60008219821115615a5957615a59615c21565b500190565b600082615a7957634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115615ab9578160001904821115615a9f57615a9f615c21565b80851615615aac57918102915b93841c9390800290615a83565b509250929050565b600061151d8383600082615ad757506001611472565b81615ae457506000611472565b8160018114615afa5760028114615b0457615b20565b6001915050611472565b60ff841115615b1557615b15615c21565b50506001821b611472565b5060208310610133831016604e8410600b8410161715615b43575081810a611472565b615b4d8383615a7e565b8060001904821115615b6157615b61615c21565b029392505050565b6000816000190483118215151615615b8357615b83615c21565b500290565b600082821015615b9a57615b9a615c21565b500390565b60005b83811015615bba578181015183820152602001615ba2565b838111156137c65750506000910152565b600181811c90821680615bdf57607f821691505b60208210811415615c0057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615c1a57615c1a615c21565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6000813561147281615d6f565b6000813561147281615d92565b6000813561147281615da7565b8135615c6981615d84565b815460ff19811691151560ff1691821783556020840135615c8981615dbc565b61ff008160081b169050808361ffff198416171784556040850135615cad81615d6f565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b031617815560018101615d05615ce860608501615c37565b82546001600160a01b0319166001600160a01b0391909116178255565b615d3e615d1460808501615c51565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b506113cb615d4e60a08401615c44565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b038116811461310757600080fd5b801515811461310757600080fd5b6001600160681b038116811461310757600080fd5b66ffffffffffffff8116811461310757600080fd5b60ff8116811461310757600080fdfea26469706673582212205fbcaa8781187325d25b31e13bacef69edce6157041a37dc50e9cf290afbc57364736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106104c05760003560e01c806387153eb111610276578063b4d1d7951161014f578063e73c63d5116100c1578063f656ba5111610085578063f656ba51146110db578063f756fa2114611110578063f957a06714611125578063f9a0be6814611145578063fba7dc6114611166578063fe56e2321461118757600080fd5b8063e73c63d514611068578063e74b981b1461107e578063ea00b1ca1461109e578063f2fde38b146110b3578063f6326fb3146110d357600080fd5b8063d13f1b3e11610113578063d13f1b3e14610f78578063d164cc1514610f98578063d5f2638214610fb8578063db006a7514610fce578063db43e86214610fee578063dd62ed3e1461102257600080fd5b8063b4d1d79514610ef7578063b6b55f2514610f0e578063b9f8092b14610f2e578063ca59409414610f43578063ce7c2ac214610f5857600080fd5b8063a285c9e8116101e8578063a6f7f5d6116101ac578063a6f7f5d614610e38578063a9059cbb14610e4e578063aced166114610e6e578063ad5c464814610e8e578063ad7a672f14610ec2578063afa6626414610ed757600080fd5b8063a285c9e814610d98578063a2db9d8314610dba578063a457c2d714610dd8578063a497e67414610df8578063a694fc3a14610e1857600080fd5b8063947061b51161023a578063947061b514610c1e57806395d89b4114610c3f57806399530b0614610c545780639be43daa14610c695780639fcc2d7514610c89578063a083ff1714610d3557600080fd5b806387153eb114610b6b5780638778878214610b9857806389a3027114610bae5780638b10cc7c14610be25780638da5cb5b14610c0057600080fd5b806347786d37116103a85780636719b2ee1161031a57806370897b23116102de57806370897b2314610a6657806370a0823114610a86578063715018a614610abc5780637a9262a214610ad15780637e108d5214610b3557806383536ff314610b5557600080fd5b80636719b2ee1461096f57806369b41170146109f35780636b64c76914610a085780636c10f66c14610a1d5780636f31ab3414610a5157600080fd5b8063573f0d6e1161036c578063573f0d6e146108b157806358358207146108d15780635ea8cd12146108f1578063600a2cfb14610911578063611b034d14610926578063650cce8a1461093b57600080fd5b806347786d37146108245780634ac88cb6146108445780634b2431d914610864578063503c70aa1461087b57806355489bb21461089157600080fd5b806330630da4116104415780633ec143d3116104055780633ec143d3146107625780633f23bb73146107905780633f90916a146107b0578063432833a6146107ce5780634603c0aa146107e4578063469048401461080457600080fd5b806330630da4146106ba578063313ce567146106da578063355274ea1461070457806336efd16f14610722578063395093511461074257600080fd5b806318160ddd1161048857806318160ddd146105865780631a92f6c21461059b57806323b872dd146105e75780632728f333146106075780632775d01c1461069a57600080fd5b8063048bf085146104c5578063056097ac146104e757806306fdde0314610507578063095ea7b3146105325780630cbf54c814610562575b600080fd5b3480156104d157600080fd5b506104e56104e036600461548a565b6111a7565b005b3480156104f357600080fd5b506104e56105023660046154a6565b6111fd565b34801561051357600080fd5b5061051c6113cf565b6040516105299190615821565b60405180910390f35b34801561053e57600080fd5b5061055261054d36600461551e565b611461565b6040519015158152602001610529565b34801561056e57600080fd5b5061057860fb5481565b604051908152602001610529565b34801561059257600080fd5b50609954610578565b3480156105a757600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610529565b3480156105f357600080fd5b506105526106023660046154de565b611478565b34801561061357600080fd5b5060cf5460d0546106559161ffff8116916001600160681b03620100008304811692600160781b900416906001600160801b0380821691600160801b90041685565b6040805161ffff90961686526001600160681b03948516602087015293909216928401929092526001600160801b03918216606084015216608082015260a001610529565b3480156106a657600080fd5b506104e56106b536600461561e565b611524565b3480156106c657600080fd5b506104e56106d536600461548a565b6116c7565b3480156106e657600080fd5b5060cc54610100900460ff1660405160ff9091168152602001610529565b34801561071057600080fd5b5060ce546001600160681b0316610578565b34801561072e57600080fd5b506104e561073d36600461564e565b61175f565b34801561074e57600080fd5b5061055261075d36600461551e565b6117e7565b34801561076e57600080fd5b5060f95461077d9061ffff1681565b60405161ffff9091168152602001610529565b34801561079c57600080fd5b506105786107ab36600461548a565b611823565b3480156107bc57600080fd5b5060d0546001600160801b0316610578565b3480156107da57600080fd5b5061057860fc5481565b3480156107f057600080fd5b506104e56107ff36600461548a565b611876565b34801561081057600080fd5b5060d3546105cf906001600160a01b031681565b34801561083057600080fd5b506104e561083f36600461561e565b611918565b34801561085057600080fd5b506104e561085f36600461548a565b6119f3565b34801561087057600080fd5b506105786101025481565b34801561088757600080fd5b5061057860fd5481565b34801561089d57600080fd5b506104e56108ac3660046155f7565b611a40565b3480156108bd57600080fd5b506104e56108cc36600461548a565b611ad8565b3480156108dd57600080fd5b506104e56108ec36600461559b565b611b25565b3480156108fd57600080fd5b506104e561090c36600461561e565b611e74565b34801561091d57600080fd5b506104e5611edf565b34801561093257600080fd5b506104e561203a565b34801561094757600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561097b57600080fd5b506109c261098a36600461548a565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b031690820152606001610529565b3480156109ff57600080fd5b50610578600081565b348015610a1457600080fd5b506104e5612154565b348015610a2957600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5d57600080fd5b506104e56121b4565b348015610a7257600080fd5b506104e5610a8136600461561e565b6121eb565b348015610a9257600080fd5b50610578610aa136600461548a565b6001600160a01b031660009081526097602052604090205490565b348015610ac857600080fd5b506104e56122b2565b348015610add57600080fd5b50610b13610aec36600461548a565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b03909116602083015201610529565b348015610b4157600080fd5b506104e5610b5036600461561e565b6122e8565b348015610b6157600080fd5b5061057860f75481565b348015610b7757600080fd5b50610578610b8636600461561e565b60ca6020526000908152604090205481565b348015610ba457600080fd5b5061057860d55481565b348015610bba57600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b348015610bee57600080fd5b5060d2546001600160a01b03166105cf565b348015610c0c57600080fd5b506065546001600160a01b03166105cf565b348015610c2a57600080fd5b50610103546105cf906001600160a01b031681565b348015610c4b57600080fd5b5061051c612332565b348015610c6057600080fd5b50610578612341565b348015610c7557600080fd5b506104e5610c8436600461561e565b61237b565b348015610c9557600080fd5b5060cc5460cd5460ce54610ce59260ff808216936101008304909116926001600160a01b036201000090930483169282169166ffffffffffffff600160a01b90910416906001600160681b031686565b60408051961515875260ff90951660208701526001600160a01b03938416948601949094529116606084015266ffffffffffffff1660808301526001600160681b031660a082015260c001610529565b348015610d4157600080fd5b5060d15460d254610d6c916001600160a01b039081169190811690600160a01b900463ffffffff1683565b604080516001600160a01b03948516815293909216602084015263ffffffff1690820152606001610529565b348015610da457600080fd5b5060d254600160a01b900463ffffffff16610578565b348015610dc657600080fd5b5060d1546001600160a01b03166105cf565b348015610de457600080fd5b50610552610df336600461551e565b612475565b348015610e0457600080fd5b506104e5610e1336600461561e565b61250e565b348015610e2457600080fd5b506104e5610e3336600461561e565b6125cb565b348015610e4457600080fd5b5061057860d65481565b348015610e5a57600080fd5b50610552610e6936600461551e565b6126c9565b348015610e7a57600080fd5b5060d4546105cf906001600160a01b031681565b348015610e9a57600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b348015610ece57600080fd5b506105786126d6565b348015610ee357600080fd5b5060f5546105cf906001600160a01b031681565b348015610f0357600080fd5b5061057862093a8081565b348015610f1a57600080fd5b506104e5610f2936600461561e565b612775565b348015610f3a57600080fd5b506104e56127e2565b348015610f4f57600080fd5b506104e5612ab3565b348015610f6457600080fd5b50610578610f7336600461548a565b612b56565b348015610f8457600080fd5b506104e5610f9336600461561e565b612b73565b348015610fa457600080fd5b506104e5610fb336600461548a565b612c38565b348015610fc457600080fd5b5061057860f85481565b348015610fda57600080fd5b506104e5610fe936600461561e565b612cc7565b348015610ffa57600080fd5b506105cf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561102e57600080fd5b5061057861103d3660046154a6565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b34801561107457600080fd5b5061057860fa5481565b34801561108a57600080fd5b506104e561109936600461548a565b612d34565b3480156110aa57600080fd5b506104e5612e27565b3480156110bf57600080fd5b506104e56110ce36600461548a565b61306f565b6104e561310a565b3480156110e757600080fd5b506110fb6110f636600461548a565b61325b565b60408051928352602083019190915201610529565b34801561111c57600080fd5b506104e561333e565b34801561113157600080fd5b5060f6546105cf906001600160a01b031681565b34801561115157600080fd5b50610100546105cf906001600160a01b031681565b34801561117257600080fd5b50610101546105cf906001600160a01b031681565b34801561119357600080fd5b506104e56111a236600461561e565b613393565b6065546001600160a01b031633146111da5760405162461bcd60e51b81526004016111d1906158a3565b60405180910390fd5b61010080546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146112275760405162461bcd60e51b81526004016111d1906158a3565b60cc546001600160a01b038381166201000090920416141561128b5760405162461bcd60e51b815260206004820152601b60248201527f5661756c74206173736574206e6f74207265636f76657261626c65000000000060448201526064016111d1565b6001600160a01b0382163014156112e45760405162461bcd60e51b815260206004820152601b60248201527f5661756c74207368617265206e6f74207265636f76657261626c65000000000060448201526064016111d1565b6001600160a01b03811630141561133d5760405162461bcd60e51b815260206004820152601960248201527f526563697069656e742063616e6e6f74206265207661756c740000000000000060448201526064016111d1565b6040516370a0823160e01b81523060048201526113cb9082906001600160a01b038516906370a082319060240160206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba9190615636565b6001600160a01b0385169190613474565b5050565b6060609a80546113de90615bcb565b80601f016020809104026020016040519081016040528092919081815260200182805461140a90615bcb565b80156114575780601f1061142c57610100808354040283529160200191611457565b820191906000526020600020905b81548152906001019060200180831161143a57829003601f168201915b5050505050905090565b600061146e3384846134d7565b5060015b92915050565b60006114858484846135fc565b6001600160a01b03841660009081526098602090815260408083203384529091529020548281101561150a5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016111d1565b61151785338584036134d7565b60019150505b9392505050565b600260015414156115475760405162461bcd60e51b81526004016111d1906158f9565b600260015533600090815260c96020526040902060cf5461ffff168261157f5760405162461bcd60e51b81526004016111d1906158d8565b815461ffff1681146115c35760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b60448201526064016111d1565b81546201000090046001600160681b0316838110156116145760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b60448201526064016111d1565b61161e81856137cc565b83546001600160681b0391909116620100000262010000600160781b031990911617835560d054611658906001600160801b0316856137cc565b60d080546001600160801b0319166001600160801b0392909216919091179055604080518581526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a26116bd33856137d8565b5050600180555050565b6065546001600160a01b031633146116f15760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b03811661173d5760405162461bcd60e51b815260206004820152601360248201527210b732bba9ba3934b5b2a9b2b632b1ba34b7b760691b60448201526064016111d1565b60f680546001600160a01b0319166001600160a01b0392909216919091179055565b600260015414156117825760405162461bcd60e51b81526004016111d1906158f9565b6002600155816117a45760405162461bcd60e51b81526004016111d1906158d8565b6001600160a01b0381166117b757600080fd5b6117c18282613939565b60cc546117df906201000090046001600160a01b0316333085613bcb565b505060018055565b3360008181526098602090815260408083206001600160a01b0387168452909152812054909161146e91859061181e908690615a46565b6134d7565b60cc5460009060ff610100909104168161185961183f60995490565b6118476126d6565b60d0546001600160801b031685613c03565b905061186e61186785612b56565b8284613c43565b949350505050565b6065546001600160a01b031633146118a05760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b0381166118f65760405162461bcd60e51b815260206004820152601860248201527f216e65774f7074696f6e735072656d69756d507269636572000000000000000060448201526064016111d1565b60f580546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146119425760405162461bcd60e51b81526004016111d1906158a3565b6000811161197c5760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b60448201526064016111d1565b61198581613ca5565b60ce54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160ce80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b6065546001600160a01b03163314611a1d5760405162461bcd60e51b81526004016111d1906158a3565b61010180546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314611a6a5760405162461bcd60e51b81526004016111d1906158a3565b6000816001600160801b031611611ab25760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b60448201526064016111d1565b6001600160801b031660fa5560cf5460f9805461ffff191661ffff909216919091179055565b6065546001600160a01b03163314611b025760405162461bcd60e51b81526004016111d1906158a3565b61010380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611b3e575060005460ff16155b611b5a5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015611b7c576000805461ffff19166101011790555b611c41611b8c602085018561548a565b611b9c604086016020870161548a565b611bac606087016040880161548a565b60608701356080880135611bc360a08a018a6159fa565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c059250505060c08b018b6159fa565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250613cef915050565b6000611c54610100850160e0860161548a565b6001600160a01b03161415611ca45760405162461bcd60e51b815260206004820152601660248201527510afb7b83a34b7b739a83932b6b4bab6a83934b1b2b960511b60448201526064016111d1565b6000611cb86101208501610100860161548a565b6001600160a01b03161415611d035760405162461bcd60e51b815260206004820152601160248201527010afb9ba3934b5b2a9b2b632b1ba34b7b760791b60448201526064016111d1565b6000611d17610140850161012086016156bb565b63ffffffff16118015611d4b5750611d31600a6064615b69565b611d43610140850161012086016156bb565b63ffffffff16105b611d8b5760405162461bcd60e51b81526020600482015260116024820152700857dc1c995b5a5d5b511a5cd8dbdd5b9d607a1b60448201526064016111d1565b61012c8361014001351015611dd65760405162461bcd60e51b815260206004820152601160248201527010afb0bab1ba34b7b7223ab930ba34b7b760791b60448201526064016111d1565b611de7610100840160e0850161548a565b60f580546001600160a01b0319166001600160a01b0392909216919091179055611e196101208401610100850161548a565b60f680546001600160a01b0319166001600160a01b0392909216919091179055611e4b610140840161012085016156bb565b63ffffffff1660f75561014083013560fb558015611e6f576000805461ff00191690555b505050565b60d4546001600160a01b03163314611e9e5760405162461bcd60e51b81526004016111d190615834565b60008111611eda5760405162461bcd60e51b8152602060048201526009602482015268216d696e507269636560b81b60448201526064016111d1565b60f855565b60d4546001600160a01b03163314611f095760405162461bcd60e51b81526004016111d190615834565b60026001541415611f2c5760405162461bcd60e51b81526004016111d1906158f9565b600260015560d2546040516358ffbb3d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116602482015260009073__$c4f279750f4bbb575ac7775e752dc00849$__906358ffbb3d9060440160206040518083038186803b158015611fb357600080fd5b505af4158015611fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611feb9190615636565b60cf5490915061200a906201000090046001600160681b0316826137cc565b60cf80546001600160681b0392909216620100000262010000600160781b03199092169190911790555060018055565b60d4546001600160a01b031633146120645760405162461bcd60e51b81526004016111d190615834565b600260015414156120875760405162461bcd60e51b81526004016111d1906158f9565b60026001556101015460fc54604051632288d73760e11b81526001600160a01b0392831660048201527f00000000000000000000000000000000000000000000000000000000000000009092166024830152604482015273__$c4f279750f4bbb575ac7775e752dc00849$__90634511ae6e9060640160206040518083038186803b15801561211557600080fd5b505af4158015612129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214d9190615636565b5060018055565b60d4546001600160a01b0316331461217e5760405162461bcd60e51b81526004016111d190615834565b600260015414156121a15760405162461bcd60e51b81526004016111d1906158f9565b60026001556121ae613f2e565b60018055565b600260015414156121d75760405162461bcd60e51b81526004016111d1906158f9565b60026001819055506121ae60006001614061565b6065546001600160a01b031633146122155760405162461bcd60e51b81526004016111d1906158a3565b612223620f42406064615b69565b81106122715760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e63652066656500000000000000000060448201526064016111d1565b60d55460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160d555565b6065546001600160a01b031633146122dc5760405162461bcd60e51b81526004016111d1906158a3565b6122e66000614210565b565b6002600154141561230b5760405162461bcd60e51b81526004016111d1906158f9565b600260015561231981614262565b610102546123279082614429565b610102555060018055565b6060609b80546113de90615bcb565b600061237661234f60995490565b6123576126d6565b60d05460cc546001600160801b0390911690610100900460ff16613c03565b905090565b6002600154141561239e5760405162461bcd60e51b81526004016111d1906158f9565b6002600155806123dd5760405162461bcd60e51b815260206004820152600a602482015269216e756d526f756e647360b01b60448201526064016111d1565b60cf5461ffff1660005b8281101561246c5760006123fb8284615a46565b600081815260ca6020526040902054909150156124485760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b60448201526064016111d1565b600090815260ca60205260409020600190558061246481615c06565b9150506123e7565b50506001805550565b3360009081526098602090815260408083206001600160a01b0386168452909152812054828110156124f75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016111d1565b61250433858584036134d7565b5060019392505050565b6065546001600160a01b031633146125385760405162461bcd60e51b81526004016111d1906158a3565b61012c81101561258a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e206475726174696f6e000000000000000060448201526064016111d1565b60fb5460408051918252602082018390527f5acd982e2240ed224a69aa03dab039d3797c108e4b5f288cd7dd6ca181b275f3910160405180910390a160fb55565b600260015414156125ee5760405162461bcd60e51b81526004016111d1906158f9565b6002600155610100546001600160a01b03168061260a57600080fd5b6000821161261757600080fd5b33600090815260976020526040902054828110156126435761264361263c84836137cc565b6000614061565b61264e3330856135fc565b6126593083856134d7565b6040516383df674760e01b815260048101849052336024820152600060448201526001600160a01b038316906383df674790606401600060405180830381600087803b1580156126a857600080fd5b505af11580156126bc573d6000803e3d6000fd5b5050600180555050505050565b600061146e3384846135fc565b60cc546040516370a0823160e01b815230600482015260009161237691620100009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561272557600080fd5b505afa158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d9190615636565b60cf546201000090046001600160681b031690614429565b600260015414156127985760405162461bcd60e51b81526004016111d1906158f9565b6002600155806127ba5760405162461bcd60e51b81526004016111d1906158d8565b6127c48133613939565b60cc5461214d906201000090046001600160a01b0316333084613bcb565b60d4546001600160a01b0316331461280c5760405162461bcd60e51b81526004016111d190615834565b6002600154141561282f5760405162461bcd60e51b81526004016111d1906158f9565b60026001556101025460fd546000908190819061284c9085614435565b60fd81905560d054929550909350915060009061287990600160801b90046001600160801b031686614429565b9050612884816147d0565b60d080546001600160801b03808416600160801b0291161790556000610102556128ad83613ca5565b60cf805462010000600160781b031916620100006001600160681b0386160217905560405183815233906001600160a01b038616907f045c558fdce4714c5816d53820d27420f4cd860892df203fe636384d8d19aa019060200160405180910390a3604051632904c23960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152851660448201526064810184905260009073__$c4f279750f4bbb575ac7775e752dc00849$__90632904c2399060840160206040518083038186803b1580156129bc57600080fd5b505af41580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f49190615636565b61010154604051636648c73d60e11b81526001600160a01b039182166004820152908716602482015260448101829052611388606482015290915073__$c4f279750f4bbb575ac7775e752dc00849$__9063cc918e7a9060840160206040518083038186803b158015612a6657600080fd5b505af4158015612a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9e9190615636565b50612aa7613f2e565b50506001805550505050565b610103546001600160a01b031680612aca57600080fd5b612ad660006001614061565b3360008181526097602052604090205490612af29083836134d7565b60405163c9c2d4f560e01b8152336004820152602481018290526001600160a01b0383169063c9c2d4f590604401600060405180830381600087803b158015612b3a57600080fd5b505af1158015612b4e573d6000803e3d6000fd5b505050505050565b6000806000612b648461325b565b909250905061186e8282614429565b60d4546001600160a01b03163314612b9d5760405162461bcd60e51b81526004016111d190615834565b600081118015612bb85750612bb4600a6064615b69565b8111155b612bf75760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908191a5cd8dbdd5b9d60821b60448201526064016111d1565b60f75460408051918252602082018390527f4cd657fde404967d63a338fb06c5c98751a9df57dfae6dc333a432faf8a5f656910160405180910390a160f755565b6065546001600160a01b03163314612c625760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b038116612ca55760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b60448201526064016111d1565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612cea5760405162461bcd60e51b81526004016111d1906158f9565b600260015580612d295760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b60448201526064016111d1565b61214d816000614061565b6065546001600160a01b03163314612d5e5760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b038116612da75760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b60448201526064016111d1565b60d3546001600160a01b0382811691161415612e055760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e74000000000000000060448201526064016111d1565b60d380546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612e4a5760405162461bcd60e51b81526004016111d1906158f9565b600260015560d25460408051610120810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000008116602083015292831681830181905260006060830181905260f95461ffff16608084015260fa5460a084015260f654851660c084015260f55490941660e083015260f754610100830152915163f39ad79560e01b8152919290918190819073__$c4f279750f4bbb575ac7775e752dc00849$__9063f39ad79590612f3a90879060cc9060cf90600401615930565b60606040518083038186803b158015612f5257600080fd5b505af4158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8a9190615549565b604080518381526020810183905293965091945092507fa217999b1c125c2a996f712c5f26a28addad7167bd8a67d5bd5b2a751148abb0910160405180910390a160d180546001600160a01b0319166001600160a01b0385161790556000612ff24282614429565b905063ffffffff8111156130485760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e5265616479000000000000000060448201526064016111d1565b60d2805463ffffffff60a01b1916600160a01b63ffffffff841602179055612aa78661481a565b6065546001600160a01b031633146130995760405162461bcd60e51b81526004016111d1906158a3565b6001600160a01b0381166130fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016111d1565b61310781614210565b50565b6002600154141561312d5760405162461bcd60e51b81526004016111d1906158f9565b600260015560cc547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811662010000909204161461319e5760405162461bcd60e51b8152602060048201526005602482015264042ae8aa8960db1b60448201526064016111d1565b600034116131d75760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b60448201526064016111d1565b6131e13433613939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561323c57600080fd5b505af1158015613250573d6000803e3d6000fd5b505060018055505050565b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b0316918101919091528291600111156132dd575050506001600160a01b031660009081526097602052604081205491565b60cf54815161ffff908116600090815260ca602052604081205460cc54919361331393869391169190610100900460ff1661498c565b9050613334856001600160a01b031660009081526097602052604090205490565b9590945092505050565b600260015414156133615760405162461bcd60e51b81526004016111d1906158f9565b600260015560006133706149fd565b60fd5490915061338090826137cc565b6001600160801b031660fd555060018055565b6065546001600160a01b031633146133bd5760405162461bcd60e51b81526004016111d1906158a3565b6133cb620f42406064615b69565b81106134125760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b60448201526064016111d1565b600061342f63031ba30961342984620f4240614bba565b90614bc6565b60d65460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160d65550565b6040516001600160a01b038316602482015260448101829052611e6f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614bd2565b6001600160a01b0383166135395760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016111d1565b6001600160a01b03821661359a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016111d1565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166136605760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016111d1565b6001600160a01b0382166136c25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016111d1565b6001600160a01b0383166000908152609760205260409020548181101561373a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016111d1565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613771908490615a46565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516137bd91815260200190565b60405180910390a35b50505050565b600061151d8284615b88565b60cc546001600160a01b03620100009091048116907f00000000000000000000000000000000000000000000000000000000000000001681141561392557604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561387857600080fd5b505af115801561388c573d6000803e3d6000fd5b505050506000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146138dd576040519150601f19603f3d011682016040523d82523d6000602084013e6138e2565b606091505b50509050806137c65760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016111d1565b611e6f6001600160a01b0382168484613474565b60cf5461ffff1660006139548461394e6126d6565b90614429565b60ce549091506001600160681b031681111561399f5760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b60448201526064016111d1565b60cd54600160a01b900466ffffffffffffff168110156139f85760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016111d1565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038316600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc54919291613ab7918491879190610100900460ff1661498c565b8251909150869061ffff16851415613ae8576020830151600090613ae4906001600160681b031689614429565b9150505b613af181613ca5565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560d054613b97911689614429565b9050613ba2816147d0565b60d080546001600160801b0319166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526137c69085906323b872dd60e01b906084016134a0565b600080613c1183600a615ac1565b905060008611613c215780613c39565b613c3986613429613c3288886137cc565b8490614bba565b9695505050505050565b600060018311613c8d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016111d1565b61186e613c9b83600a615ac1565b6134298686614bba565b6001600160681b038111156131075760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b60448201526064016111d1565b600054610100900460ff1680613d08575060005460ff16155b613d245760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015613d46576000805461ffff19166101011790555b60405163c72733f760e01b815273__$c4f279750f4bbb575ac7775e752dc00849$__9063c72733f790613d8b908c908c908c908b908d908c908c908c90600401615727565b60006040518083038186803b158015613da357600080fd5b505af4158015613db7573d6000803e3d6000fd5b50505050613dc3614ca4565b613dcd8484614d17565b613dd5614d96565b613dde8961306f565b60d480546001600160a01b03808b166001600160a01b03199283161790925560d38054928a169290911691909117905560d5859055613e2863031ba30961342988620f4240614bba565b60d6558160cc613e388282615c5e565b505060cc546040516370a0823160e01b81523060048201526000916201000090046001600160a01b0316906370a082319060240160206040518083038186803b158015613e8457600080fd5b505afa158015613e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebc9190615636565b9050613ec781613ca5565b60cf805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff00009092169190911760011790558015613f23576000805461ff00191690555b505050505050505050565b6040805160c08101825260d2546001600160a01b039081168083527f000000000000000000000000000000000000000000000000000000000000000082166020840190815260cc54620100008104841685870190815260ff610100909204919091166060860190815260f8546080870190815260fb5460a088019081529751633baf17fd60e21b8152875187166004820152935186166024850152915190941660448301529251606482015291516084830152925160a482015290919073__$c4f279750f4bbb575ac7775e752dc00849$__9063eebc5ff49060c40160206040518083038186803b15801561402257600080fd5b505af4158015614036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405a9190615636565b60fc555050565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cf5491865260ca9094529184205460cc54919492909316926140dc9185918591610100900460ff1661498c565b9050836140e957846140eb565b805b9450846140f9575050505050565b8085111561413d5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b60448201526064016111d1565b825161ffff1682111561416a5733600090815260c960205260409020805462010000600160781b03191690555b614173856147d0565b61417d81866137cc565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929916141f69189825261ffff16602082015260400190565b60405180910390a26142093033876135fc565b5050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000811161429f5760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b60448201526064016111d1565b33600090815260c960205260409020546201000090046001600160681b03161515806142e9575033600090815260c96020526040902054600160781b90046001600160801b031615155b156142fa576142fa60006001614061565b60cf5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b0316600082156143835761437c8287614429565b90506143e6565b81156143c55760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b60448201526064016111d1565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b6143ef816147d0565b33600081815260cb60205260409020805462010000600160901b031916620100006001600160801b03851602179055612b4e9030886135fc565b600061151d8284615a46565b60d25460009081908190600160a01b900463ffffffff164210156144845760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b60448201526064016111d1565b60d1546001600160a01b03169250826144cd5760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b60448201526064016111d1565b60d3546040805160e08101825260cc54610100810460ff16825291516370a0823160e01b81523060048201526001600160a01b039384169360009384938493849373__$c4f279750f4bbb575ac7775e752dc00849$__9363633c14269360cf939092602084019262010000900416906370a082319060240160206040518083038186803b15801561455d57600080fd5b505afa158015614571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145959190615636565b81526020016145a360995490565b81526020018e815260200160d554815260200160d65481526020018d8152506040518363ffffffff1660e01b815260040161463092919060006101008201905083825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e08301529392505050565b60c06040518083038186803b15801561464857600080fd5b505af415801561465c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146809190615672565b809750819850829950839650849b50859c505050505050508760d160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060cf60000160009054906101000a900461ffff1661ffff1690508160ca600083815260200190815260200160002081905550856001600160a01b03167f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c00685858460405161476f939291909283526020830191909152604082015260600190565b60405180910390a260d080546001600160801b0319169055614792816001615a46565b60cf805461ffff191661ffff92909216919091179055506147b590503084614dfd565b80156147c5576147c584826137d8565b505050509250925092565b6001600160801b038111156131075760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b60448201526064016111d1565b60cf546201000090046001600160681b03166001600160a01b038216156148665760cf80546cffffffffffffffffffffffffff60781b1916600160781b6001600160681b038416021790555b60cf805462010000600160781b031916905560d280546001600160a01b03191690556001600160a01b038216156113cb57604051636c6fe87f60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073__$c4f279750f4bbb575ac7775e752dc00849$__9063d8dfd0fe9060240160206040518083038186803b15801561490d57600080fd5b505af4158015614921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149459190615636565b9050336001600160a01b0316836001600160a01b03167f7e830f7c1771deb1bdb35c4a7e6051bbac32b376f7f4e4976b8618b0b11997f7836040516135ef91815260200190565b835160009061ffff16158015906149a75750845161ffff1684115b156149e95760006149c686602001516001600160681b03168585614edc565b60408701519091506149e1906001600160801b031682614429565b91505061186e565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff1681614a5f5760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b60448201526064016111d1565b60cf5461ffff168110614aa75760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b60448201526064016111d1565b33600090815260cb60205260409020805462010000600160901b031916905560d054614ae390600160801b90046001600160801b0316836137cc565b60d080546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc54614b2691859160ff61010090910416613c43565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2614b6e3084614f3f565b60008111614bb05760405162461bcd60e51b815260206004820152600f60248201526e085dda5d1a191c985dd05b5bdd5b9d608a1b60448201526064016111d1565b61186e33826137d8565b600061151d8284615b69565b600061151d8284615a5e565b6000614c27826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661508d9092919063ffffffff16565b805190915015611e6f5780806020019051810190614c45919061557f565b611e6f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016111d1565b600054610100900460ff1680614cbd575060005460ff16155b614cd95760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614cfb576000805461ffff19166101011790555b614d0361509c565b8015613107576000805461ff001916905550565b600054610100900460ff1680614d30575060005460ff16155b614d4c5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614d6e576000805461ffff19166101011790555b614d7661510b565b614d808383615175565b8015611e6f576000805461ff0019169055505050565b600054610100900460ff1680614daf575060005460ff16155b614dcb5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614ded576000805461ffff19166101011790555b614df561510b565b614d0361520a565b6001600160a01b038216614e535760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016111d1565b8060996000828254614e659190615a46565b90915550506001600160a01b03821660009081526097602052604081208054839290614e92908490615a46565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060018311614f265760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b60448201526064016111d1565b61186e83613429614f3885600a615ac1565b8790614bba565b6001600160a01b038216614f9f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016111d1565b6001600160a01b038216600090815260976020526040902054818110156150135760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016111d1565b6001600160a01b0383166000908152609760205260408120838303905560998054849290615042908490615b88565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b606061186e848460008561526a565b600054610100900460ff16806150b5575060005460ff16155b6150d15760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff161580156150f3576000805461ffff19166101011790555b600180558015613107576000805461ff001916905550565b600054610100900460ff1680615124575060005460ff16155b6151405760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015614d03576000805461ffff19166101011790558015613107576000805461ff001916905550565b600054610100900460ff168061518e575060005460ff16155b6151aa5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff161580156151cc576000805461ffff19166101011790555b82516151df90609a9060208601906153cb565b5081516151f390609b9060208501906153cb565b508015611e6f576000805461ff0019169055505050565b600054610100900460ff1680615223575060005460ff16155b61523f5760405162461bcd60e51b81526004016111d190615855565b600054610100900460ff16158015615261576000805461ffff19166101011790555b614d0333614210565b6060824710156152cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016111d1565b843b6153195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016111d1565b600080866001600160a01b03168587604051615335919061570b565b60006040518083038185875af1925050503d8060008114615372576040519150601f19603f3d011682016040523d82523d6000602084013e615377565b606091505b5091509150615387828286615392565b979650505050505050565b606083156153a157508161151d565b8251156153b15782518084602001fd5b8160405162461bcd60e51b81526004016111d19190615821565b8280546153d790615bcb565b90600052602060002090601f0160209004810192826153f9576000855561543f565b82601f1061541257805160ff191683800117855561543f565b8280016001018555821561543f579182015b8281111561543f578251825591602001919060010190615424565b5061544b92915061544f565b5090565b5b8082111561544b5760008155600101615450565b803561546f81615d6f565b919050565b803561546f81615d92565b803561546f81615da7565b60006020828403121561549b578081fd5b813561151d81615d6f565b600080604083850312156154b8578081fd5b82356154c381615d6f565b915060208301356154d381615d6f565b809150509250929050565b6000806000606084860312156154f2578081fd5b83356154fd81615d6f565b9250602084013561550d81615d6f565b929592945050506040919091013590565b60008060408385031215615530578182fd5b823561553b81615d6f565b946020939093013593505050565b60008060006060848603121561555d578283fd5b835161556881615d6f565b602085015160409095015190969495509392505050565b600060208284031215615590578081fd5b815161151d81615d84565b60008082840360e08112156155ae578283fd5b833567ffffffffffffffff8111156155c4578384fd5b840161016081870312156155d6578384fd5b925060c0601f19820112156155e9578182fd5b506020830190509250929050565b600060208284031215615608578081fd5b81356001600160801b038116811461151d578182fd5b60006020828403121561562f578081fd5b5035919050565b600060208284031215615647578081fd5b5051919050565b60008060408385031215615660578182fd5b8235915060208301356154d381615d6f565b60008060008060008060c0878903121561568a578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000602082840312156156cc578081fd5b813563ffffffff8116811461151d578182fd5b600081518084526156f7816020860160208601615b9f565b601f01601f19169290920160200192915050565b6000825161571d818460208701615b9f565b9190910192915050565b60006101a060018060a01b03808c168452808b166020850152808a1660408501528860608501528760808501528160a0850152615766828501886156df565b915083820360c085015261577a82876156df565b92508435915061578982615d84565b90151560e08401526020840135906157a082615dbc565b60ff8216610100850152604085013591506157ba82615d6f565b166101208301526157cd60608401615464565b6001600160a01b03166101408301526157e86080840161547f565b66ffffffffffffff1661016083015261580360a08401615474565b6001600160681b038116610180840152509998505050505050505050565b60208152600061151d60208301846156df565b60208082526007908201526610b5b2b2b832b960c91b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526007908201526608585b5bdd5b9d60ca1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b83516001600160a01b0316815260208085015161016083019161595d908401826001600160a01b03169052565b50604085015161597860408401826001600160a01b03169052565b50606085015160608301526080850151615998608084018261ffff169052565b5060a085015160a083015260c08501516159bd60c08401826001600160a01b03169052565b5060e08501516159d860e08401826001600160a01b03169052565b5061010094850151948201949094526101208101929092526101409091015290565b6000808335601e19843603018112615a10578283fd5b83018035915067ffffffffffffffff821115615a2a578283fd5b602001915036819003821315615a3f57600080fd5b9250929050565b60008219821115615a5957615a59615c21565b500190565b600082615a7957634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115615ab9578160001904821115615a9f57615a9f615c21565b80851615615aac57918102915b93841c9390800290615a83565b509250929050565b600061151d8383600082615ad757506001611472565b81615ae457506000611472565b8160018114615afa5760028114615b0457615b20565b6001915050611472565b60ff841115615b1557615b15615c21565b50506001821b611472565b5060208310610133831016604e8410600b8410161715615b43575081810a611472565b615b4d8383615a7e565b8060001904821115615b6157615b61615c21565b029392505050565b6000816000190483118215151615615b8357615b83615c21565b500290565b600082821015615b9a57615b9a615c21565b500390565b60005b83811015615bba578181015183820152602001615ba2565b838111156137c65750506000910152565b600181811c90821680615bdf57607f821691505b60208210811415615c0057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615c1a57615c1a615c21565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6000813561147281615d6f565b6000813561147281615d92565b6000813561147281615da7565b8135615c6981615d84565b815460ff19811691151560ff1691821783556020840135615c8981615dbc565b61ff008160081b169050808361ffff198416171784556040850135615cad81615d6f565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b031617815560018101615d05615ce860608501615c37565b82546001600160a01b0319166001600160a01b0391909116178255565b615d3e615d1460808501615c51565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b506113cb615d4e60a08401615c44565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b038116811461310757600080fd5b801515811461310757600080fd5b6001600160681b038116811461310757600080fd5b66ffffffffffffff8116811461310757600080fd5b60ff8116811461310757600080fdfea26469706673582212205fbcaa8781187325d25b31e13bacef69edce6157041a37dc50e9cf290afbc57364736f6c63430008040033",
  "libraries": {
    "VaultLifecycle": "0x25Af99Ff07575Ac55fB3C2D1E6B920Ba3bf67B40"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_gammaController": "is the contract address for opyn actions",
          "_gnosisEasyAuction": "is the contract address that facilitates gnosis auctions",
          "_marginPool": "is the contract address for providing collateral to opyn",
          "_oTokenFactory": "is the contract address for minting new opyn option types (strikes, asset, expiry)",
          "_usdc": "is the USDC contract",
          "_weth": "is the Wrapped Ether contract"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "is the amount of `asset` to deposit"
        }
      },
      "depositFor(uint256,address)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "creditor": "is the address that can claim/withdraw deposited amount"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initRounds(uint256)": {
        "params": {
          "numRounds": "is the number of rounds to initialize in the map"
        }
      },
      "initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256),(bool,uint8,address,address,uint56,uint104))": {
        "params": {
          "_initParams": "is the struct with vault initialization parameters",
          "_vaultParams": "is the struct with vault general data"
        }
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverTokens(address,address)": {
        "params": {
          "recipient": "is the recipient of the recovered tokens",
          "token": "is the ERC20 token to recover from the vault"
        }
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAuctionDuration(uint256)": {
        "params": {
          "newAuctionDuration": "is the auction duration"
        }
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setLiquidityGauge(address)": {
        "params": {
          "newLiquidityGauge": "is the address of the new liquidityGauge contract"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setMinPrice(uint256)": {
        "params": {
          "minPrice": "is the new oToken Premium in the units of 10**18"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "newKeeper": "is the address of the new keeper"
        }
      },
      "setOptionsPremiumPricer(address)": {
        "params": {
          "newOptionsPremiumPricer": "is the address of the new strike selection contract"
        }
      },
      "setOptionsPurchaseQueue(address)": {
        "params": {
          "newOptionsPurchaseQueue": "is the address of the new optionsPurchaseQueue contract"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "setPremiumDiscount(uint256)": {
        "params": {
          "newPremiumDiscount": "is the premium discount"
        }
      },
      "setStrikePrice(uint128)": {
        "params": {
          "strikePrice": "is the strike price of the new oTokens (decimals = 8)"
        }
      },
      "setStrikeSelection(address)": {
        "params": {
          "newStrikeSelection": "is the address of the new strike selection contract"
        }
      },
      "setVaultPauser(address)": {
        "params": {
          "newVaultPauser": "is the address of the new vaultPauser contract"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "stake(uint256)": {
        "params": {
          "numShares": "is the number of shares to stake"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawInstantly(uint256)": {
        "params": {
          "amount": "is the amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELAY()": {
        "notice": "Deprecated: 15 minute timelock between commitAndClose and rollToNexOption."
      },
      "OTOKEN_FACTORY()": {
        "notice": "oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens."
      },
      "PERIOD()": {
        "notice": "7 day period between each options sale."
      },
      "USDC()": {
        "notice": "USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "WETH()": {
        "notice": "WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "burnRemainingOTokens()": {
        "notice": "Burn the remaining oTokens left over from gnosis auction."
      },
      "commitAndClose()": {
        "notice": "Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious."
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "constructor": {
        "notice": "Initializes the contract with immutable variables"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "deposit(uint256)": {
        "notice": "Deposits the `asset` from msg.sender."
      },
      "depositETH()": {
        "notice": "Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH."
      },
      "depositFor(uint256,address)": {
        "notice": "Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf"
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initRounds(uint256)": {
        "notice": "Helper function that helps to save gas for writing values into the roundPricePerShare map.         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0."
      },
      "initialize((address,address,address,uint256,uint256,string,string,address,address,uint32,uint256),(bool,uint8,address,address,uint56,uint104))": {
        "notice": "Initializes the OptionVault contract with storage variables."
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "keeper()": {
        "notice": "role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss."
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "optionState()": {
        "notice": "Vault's state of the options sold and the timelocked option"
      },
      "pausePosition()": {
        "notice": "pause a user's vault position"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss."
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "recoverTokens(address,address)": {
        "notice": "Recovery function that returns an ERC20 token to the recipient"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "rollToNextOption()": {
        "notice": "Rolls the vault's funds into a new short position."
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "sellOptionsToQueue()": {
        "notice": "Sell the allocated options to the purchase queue post auction settlement"
      },
      "setAuctionDuration(uint256)": {
        "notice": "Sets the new auction duration"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setLiquidityGauge(address)": {
        "notice": "Sets the new liquidityGauge contract for this vault"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setMinPrice(uint256)": {
        "notice": "Sets oToken Premium"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      },
      "setOptionsPremiumPricer(address)": {
        "notice": "Sets the new options premium pricer contract"
      },
      "setOptionsPurchaseQueue(address)": {
        "notice": "Sets the new optionsPurchaseQueue contract for this vault"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "setPremiumDiscount(uint256)": {
        "notice": "Sets the new discount on premiums for options we are selling"
      },
      "setStrikePrice(uint128)": {
        "notice": "Optionality to set strike price manually"
      },
      "setStrikeSelection(address)": {
        "notice": "Sets the new strike selection contract"
      },
      "setVaultPauser(address)": {
        "notice": "Sets the new Vault Pauser contract for this vault"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "stake(uint256)": {
        "notice": "Stakes a users vault shares"
      },
      "startAuction()": {
        "notice": "Initiate the gnosis auction."
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts locked into a short position"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawInstantly(uint256)": {
        "notice": "Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "notice": "UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage. RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 179,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 230,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 993,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 169,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 299,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 301,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 303,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 305,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 846,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 21905,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)6582_storage)"
      },
      {
        "astId": 21910,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 21916,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "withdrawals",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Withdrawal)6587_storage)"
      },
      {
        "astId": 21920,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "vaultParams",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(VaultParams)6557_storage"
      },
      {
        "astId": 21924,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "vaultState",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(VaultState)6575_storage"
      },
      {
        "astId": 21928,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "optionState",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(OptionState)6564_storage"
      },
      {
        "astId": 21931,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "211",
        "type": "t_address"
      },
      {
        "astId": 21934,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "keeper",
        "offset": 0,
        "slot": "212",
        "type": "t_address"
      },
      {
        "astId": 21937,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 21940,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 21944,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "____gap",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_uint256)30_storage"
      },
      {
        "astId": 14345,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "optionsPremiumPricer",
        "offset": 0,
        "slot": "245",
        "type": "t_address"
      },
      {
        "astId": 14347,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "strikeSelection",
        "offset": 0,
        "slot": "246",
        "type": "t_address"
      },
      {
        "astId": 14349,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "premiumDiscount",
        "offset": 0,
        "slot": "247",
        "type": "t_uint256"
      },
      {
        "astId": 14351,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "currentOtokenPremium",
        "offset": 0,
        "slot": "248",
        "type": "t_uint256"
      },
      {
        "astId": 14353,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "lastStrikeOverrideRound",
        "offset": 0,
        "slot": "249",
        "type": "t_uint16"
      },
      {
        "astId": 14355,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "overriddenStrikePrice",
        "offset": 0,
        "slot": "250",
        "type": "t_uint256"
      },
      {
        "astId": 14357,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "auctionDuration",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 14359,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "optionAuctionID",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 14362,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 14365,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_isUsdcAuction",
        "offset": 0,
        "slot": "254",
        "type": "t_bool"
      },
      {
        "astId": 14367,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "_swapPath",
        "offset": 0,
        "slot": "255",
        "type": "t_bytes_storage"
      },
      {
        "astId": 14370,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "liquidityGauge",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 14373,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "optionsPurchaseQueue",
        "offset": 0,
        "slot": "257",
        "type": "t_address"
      },
      {
        "astId": 14376,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "currentQueuedWithdrawShares",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 14379,
        "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
        "label": "vaultPauser",
        "offset": 0,
        "slot": "259",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)6582_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)6582_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)6587_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)6587_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositReceipt)6582_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 6577,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6579,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6581,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)6564_storage": {
        "encoding": "inplace",
        "label": "struct Vault.OptionState",
        "members": [
          {
            "astId": 6559,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "nextOption",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6561,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "currentOption",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6563,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "nextOptionReadyAt",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultParams)6557_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 6546,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "isPut",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6548,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "decimals",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6550,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "asset",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6552,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6554,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "minimumSupply",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          },
          {
            "astId": 6556,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "cap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VaultState)6575_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 6566,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6568,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6570,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6572,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6574,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Withdrawal)6587_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 6584,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6586,
            "contract": "contracts/vaults/BaseVaults/RibbonThetaVault.sol:RibbonThetaVault",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}